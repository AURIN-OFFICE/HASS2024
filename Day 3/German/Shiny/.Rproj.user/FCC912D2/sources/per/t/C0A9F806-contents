rm(list=ls())
################## --------------- Paquetes Shiny ------------- ##################
if(!require("shiny")){install.packages("shiny");library(shiny)}else{library(shiny)}
if(!require("shinyFiles")){install.packages("shinyFiles");library(shinyFiles)}else{library(shinyFiles)}
if(!require("shinydashboardPlus")){install.packages("shinydashboardPlus");library(shinydashboardPlus)}else{library(shinydashboardPlus)}
if(!require("shinyjs")){install.packages("shinyjs");library(shinyjs)}else{library(shinyjs)}
if(!require("shinyWidgets")){install.packages("shinyWidgets");library(shinyWidgets)}else{library(shinyWidgets)}
if(!require("shinyBS")){install.packages("shinyBS");library(shinyBS)}else{library(shinyBS)}
if(!require("rstudioapi")){install.packages("rstudioapi");library(rstudioapi)}else{library(rstudioapi)}
if(!require("shinydashboard")){install.packages("shinydashboard");library(shinydashboard)}else{library(shinydashboard)}
if(!require("shinyalert")){install.packages("shinyalert");library(shinyalert)}else{library(shinyalert)}
if(!require("DT")){install.packages("DT");library(DT)}else{library(DT)}
if(!require("timevis")){install.packages("timevis");library(timevis)}else{library(timevis)}
if(!require("plotly")){install.packages("plotly");library(plotly)}else{library(plotly)}


################## --------------- Parametros ------------- ##################
Simular_auxiliar <<- F
Modo_backup <<- F

### --- Fecha inicial --- ###
### --- TRUE: Ajusta futuros para las series que tengan futuros, y ajusta proyecciones a las que no tengan futuros
### --- FALSE: Ajusta todas las series a proyecciones --- ##
Fecha_analisis <<- '2018-06-01'

### --- Vector de variables de control que sobreviven a lo largo del programa --- ##
Guardar_princial <<- c("Menu_cargado_inicial","Resultados_agregacion_teorica","Resultados_agregacion_contable","Corrio_total_tiempo","Informacion_empresas","Fechas_Empresas_cargadas","Futuros_datos","Informacion_econometria","Nombres_shiny","Matriz_Fechas_comando","progress","Funciones_de_herramienta_guardar","Matriz_Fechas","Agregacion_riesgo_empresas_herramienta_amb","path","Menu_cargado_inicial","Modo_backup","Menu_econometria_dinamico","Fechas_factores","Fecha_analisis","Ajustar_simulaciones","Media_futuros","Simulaciones","Guardar_princial","Simular_auxiliar","Corrio_total","Filiales_correr","Matriz_datos","Shiny","Insumos_empresas_ejecutadas","Insumos_econometria_ejecutadas","Econometria_principal_corrida_ejecutada")
### -------------------------- Path  -------------------------- ###
### -------------------------- 2. Matriz Fechas Econometria -------------------------- ###

### --- Recibe como insumo la matriz de fechas y las empresas a seleccionar --- ###
Botton_actualizar_empresas = function(Empresas_botones,Empresas_cargadas){
  Activas = Empresas_botones[Empresas_botones[,"Valor"] == TRUE,]
  Resultados_busqueda_emp = grep(as.character(Empresas_cargadas[,"Empresas"]), pattern = paste0("^",paste0(as.character(Activas[,"Empresas"]),collapse = "$|^"),"$"))
  Empresas_cargadas = Empresas_cargadas[Resultados_busqueda_emp,]
  Empresas_cargadas = Empresas_cargadas[,-4]
  return(Empresas_cargadas)
}

### -------------------------- Cargar empresas -------------------------- ###
Cargar_insumos_empresas = function(Raiz,Shiny = F){
  if (Shiny == T){
    progress = shiny::Progress$new()
    progress$set(message = "Verificando: ", value = 0)
    shinyalert("Verificando que empresas están disponibles",timer = 1500, type = "info",showConfirmButton = T, confirmButtonText = "Entiendo",showCancelButton = F)
  }
  Empresas_raiz = list.files(Raiz)

  Empresas_raiz = Empresas_raiz[-(grep(Empresas_raiz,pattern = "^Cargar_empresas.R$"))]
  for(filial_i in (Empresas_raiz)){
    print(filial_i)
    if (Shiny == T){
      progress$inc((round(100/length(Empresas_raiz))/100), detail = paste0(filial_i))
    }

    source(file = paste0(path,"/Inputs/Empresas/",filial_i,"/Principal.R"),encoding = "UTF-8")
  }

  if (Shiny == T){
    shinyalert("El proceso fue exitoso", type = "success",timer = 1500,showConfirmButton = T, confirmButtonText = "Entiendo",showCancelButton = F)
    progress$close()

  }

}

### ---- Identifica que empresas están actualizadas ---- ####



Empresas_disponibles_correr = function(){
    Matriz_Fechas_comando = data.frame(Empresas= c('ACME'), Fecha_inicial = c(as.Date(paste0(year(Sys.Date()),'-01','-01'))), Fecha_final = c(as.Date(paste0(year(Sys.Date()),'-12','-01'))),Pro = c(TRUE),Lite = c(TRUE))
    ### --------------------------------------------------------------------------------- ###
    save(Matriz_Fechas_comando,file = paste0(path,"/Inputs/Parametros/Matriz_comando_fechas.Rdata"))
    return(Matriz_Fechas_comando)

}



### --- Indica si la empresa esta actualizada o desactualizada --- ###
Estado_desativados_empresas = function(Activado = 1){
  if (Activado == 0){
    '<strong><font color="#f8bf00"> Estado: Desactualizada </font></strong><br>'
  } else if (Activado == 1){
    '<strong><font color="#009946"> Estado: Actualizada </font></strong><br>'
  } else if (Activado == 2){
    '<strong><font color="#c71f1f"> Estado: No Disponible </font></strong><br>'
  }
}
### --- Indica si la empresa tiene edicion Lite o Pro --- ###
Estado_version_empresas = function(Empresa,Matriz_comando){
  Pro = Matriz_comando[grep(as.character(Matriz_comando[,"Empresas"]),pattern = paste0("^",Empresa,"$")),][,"Pro"]
  Lite = Matriz_comando[grep(as.character(Matriz_comando[,"Empresas"]),pattern = paste0("^",Empresa,"$")),][,"Lite"]
  if (Pro & Lite  == TRUE){
    '<strong><font color="#f8bf00"> Versión: Completa </font></strong><br>'
  } else if (Lite == TRUE){
    '<strong><font color="#009946"> Versión: Incompleta </font></strong><br>'
  } else if (Pro & Lite  == FALSE){
    '<strong><font color="#c71f1f"> Versión: No Disponible </font></strong><br>'
  }
}

Estado_agregacion_empresas = function(Empresa,Matriz_comando){
  if(dim(Matriz_comando)[1]  > 2 ){
    Fecha_min = min(unique(Matriz_comando[,"Fecha_inicial"]))
    Fechas_agregar_herramientas = cbind(Matriz_comando,Matriz_comando[,"Fecha_inicial"] >Fecha_min)
    colnames(Fechas_agregar_herramientas)[6] = "Actualizado"
    max_i = data.frame(count(Fechas_agregar_herramientas[,"Actualizado"]))
    max_i = max_i[order(max_i[,"freq"],decreasing = T),]
    max_i = max_i[1,][[1]]
    Estado_empresa_i = Fechas_agregar_herramientas[grep(as.character(Fechas_agregar_herramientas[,"Empresas"]),pattern = paste0("^",Empresa,"$")),]
    if (Estado_empresa_i[,"Actualizado"] == max_i){
      '<strong><font color="#009946"> Agregación </font></strong><br>'
    } else if (Estado_empresa_i[,"Actualizado"] != max_i){
      '<strong><font color="#f8bf00"> Independiente </font></strong><br>'
    }
  } else {
    '<strong><font color="#f8bf00"> Independiente </font></strong><br>'

  }

}

### --- Devuelve el estado de cada empresa --- ###
Estado_empresa = function(Empresa,Matriz_fechas){
  ifelse(length(Matriz_fechas[grep(Matriz_fechas[,"Empresas"],pattern = paste0("^",Empresa,"$")),"Actualizado"])==0,yes = 2,no = Matriz_fechas[grep(Matriz_fechas[,"Empresas"],pattern = paste0("^",Empresa,"$")),"Actualizado"])
}

### --- Activa o desactiva el boton de seleccionar cada empresa --- ###
Botones_desativados_empresas = function(Input_id,Etiqueta,Activado = 1,Check = FALSE){
  if (Activado == 1 ){
    if (Check == TRUE){
      HTML(paste0('<div class="form-group shiny-input-container">
<div class="checkbox">
                  <label>
                  <input id="',Input_id,'"type="checkbox" checked="checked"/>
                  <span><strong><font color="#002e5b">', Etiqueta, '</font></strong></span>
                  </label>
                  </div>
                  </div>'))

    } else {
      HTML(paste0('<div class="form-group shiny-input-container">
<div class="checkbox">
                  <label>
                  <input id="',Input_id,'"type="checkbox"/>
                  <span><strong><font color="#002e5b">', Etiqueta, '</font></strong></span>
                  </label>
                  </div>
                  </div>'))
    }

  } else {
    HTML(paste0('<div class="form-group shiny-input-container">
<div class="checkbox">
                <label>
                <input id="',Input_id,'"type="checkbox" disabled = TRUE/>
                <span><strong><font color="#002e5b">', Etiqueta, '</font></strong></span>
                </label>
                </div>
                </div>'))

  }

}





########################## ----------------- Econometria ----------------- ##########################
Grafica_simulaciones  = function(mat,title,hist=NULL,
  plotear=F,quitarCeros=0,leyenda_x ="",
  leyenda_y,Fecha_inicial = "2014-04-28"){
  mat=t(mat)
  medias = colMeans(mat)
  data = data.frame(media = medias)
  upper_seq = seq(70,95,by = 5)/100
  int=t(apply(mat,2,quantile,probs=upper_seq))
  data=cbind(data,t(apply(mat,2,quantile,probs=c(1-upper_seq,upper_seq))))
  colnames(data) = c("media","min70","min75","min80","min85","min90","min95",
                     "max70","max75","max80","max85","max90","max95")
  if(!is.null(hist)){
    hist=matrix(rep(hist,ncol(data)),ncol = ncol(data))
    colnames(hist)=colnames(data)
    data=rbind(hist,data)
    data=data/10^quitarCeros
  }

  data = cbind(seq(as.Date(Fecha_inicial),
                   length.out = length(rownames(data)),by="quarter"),data)
  colnames(data) = c("Fecha",colnames(data)[-1])
### ----- Textos: interactivos ------ ###
  texto_media <- paste("Media:",round(data$media,2),"\n")
  texto70 = paste("Min 70",round(data$min70,2),"Max 70",round(data$max70),"\n")
  texto75 = paste("Min 75",round(data$min70,2),"Max 75",round(data$max70),"\n")
  texto80 = paste("Min 80",round(data$min70,2),"Max 80",round(data$max70),"\n")
  texto85 = paste("Min 85",round(data$min70,2),"Max 85",round(data$max70),"\n")
  texto90 = paste("Min 90",round(data$min70,2),"Max 90",round(data$max70),"\n")
  texto95 = paste("Min 95",round(data$min70,2),"Max 75",round(data$max70),"\n")

  ### --- Grafica ---- ###
  plot1 = suppressWarnings(ggplot(data=data)+
                             geom_ribbon(aes(x=Fecha,ymin=min95,ymax=max95,
                            linetype=NA,text=texto95,group =1),alpha=0.3,fill="#003c4d") +
                             geom_ribbon(aes(x=Fecha,ymin=min90,ymax=max90,
                            linetype=NA,text=texto90),group =1,alpha=0.4,fill="#becdd6") +
                             geom_ribbon(aes(x=Fecha,ymin=min85,ymax=max85,
                            linetype=NA,text=texto85),group =1,alpha=0.5,fill="#a6bbc9") +
                             geom_ribbon(aes(x=Fecha,ymin=min80,ymax=max80,
                            linetype=NA,text=texto80),group =1,alpha=0.6,fill="#a6bbc9") +
                             geom_ribbon(aes(x=Fecha,ymin=min75,ymax=max75,
                            linetype=NA,text=texto75),group =1,alpha=0.7,fill="#7b98ac") +
                             geom_line(aes(x=Fecha,y=min95),col="#003c4d",size=1.5,alpha =0.5) +
                             geom_line(aes(x=Fecha,y=max95),col="#003c4d",size=1.5,alpha =0.5) +
                             geom_line(aes(x=Fecha,y=media),col="#7b98ac",size=1.5) +
                             theme(legend.position="none") + labs(title = title)+
                             theme_bw()+ theme(legend.background = element_rect(fill="white", size=1.5, linetype="solid"),legend.title = element_text(colour="black", size=5, face="bold"),axis.text.x=element_text(angle=0, hjust=1),legend.text = element_text(colour="black", size=12, face="bold"),panel.grid.major = element_blank(), panel.border = element_blank(), plot.title = element_text(hjust = 1),axis.text=element_text(size=12,face="bold"),axis.title=element_text(size=12,face="bold"),legend.position = "top")+labs(title=title)+labs(x = leyenda_x, y = leyenda_y) +scale_x_date(date_breaks = "9 month", date_labels =  "%b %y")+scale_y_continuous(labels = comma))
  plot1 = suppressWarnings(ggplotly(plot1,tooltip ="text")) %>% layout(margin = list(l = 75))
  ### --- Elimina el repetido --- ###
  for(i in 1:length(plot1$x$data)){
    plot1$x$data[[i]]$text <- c(gsub(plot1$x$data[[i]]$text,pattern = "<br+.+",replacement = ""), "")
    plot1$x$data[[i]]$showlegend <- FALSE
  }
  if(plotear){print(plot1)}
  return(plot1)

}

Graficar_histograma = function(Datos,Moneda = "COP"){
  df = Datos
  if (Moneda == "COP") {
    if (nchar(round(mean(df$Valor),1)) > 8) {
      df$Valor = df$Valor/1000000000
      df$Valor = round(df$Valor,4)
      titulo = "Miles de Millones de pesos"

    } else if(nchar(round(mean(df$Valor),1)) > 6) {
      df$Valor = df$Valor/1000000
      df$Valor = round(df$Valor,2)
      titulo = "Millones de pesos"
    } else {
      titulo = "pesos"

    }

    } else if(Moneda == "USD/UN"){
      df$Valor = df$Valor/1000
      df$Valor = round(df$Valor,2)
      titulo = "dólares"
    } else if(Moneda == "Ton"){
      df$Valor = df$Valor
      df$Valor = round(df$Valor,2)
      titulo = "Toneladas (dólares)"
    }


  if (Moneda == "USD"){
    if (nchar(round(mean(df$Valor),1)) > 5) {
      df$Valor = df$Valor/1e6
      df$Valor = round(df$Valor,2)
      titulo = "Millones de Dólares"
    } else {
      df$Valor = round(df$Valor,1)
      titulo = "Dólares"
    }
  }




  Grafico = ggplotly((ggplot(df) + geom_histogram(aes(x=Valor,y = (..count..)/sum(..count..), fill= ..x..),
                                                  bins = 50)+
                        scale_fill_gradient(low='#d74a2e', high='#d74a2e',guide = 'none')+
                        theme_bw()+labs(y="Simulaciones",x=titulo) +  geom_vline(aes(xintercept = mean(df$Valor),color ='Media'),lwd = 1,linetype = "dashed")
                      + ggtitle("") + theme(legend.background = element_rect(fill="white", size=01, linetype="solid"),
                                          legend.title = element_text(colour="black", size=10, face="bold"),
                                          legend.text = element_text(colour="black", size=15, face="bold"),
                                          title =  element_text(face = "bold", color = "#004237"),
                                          panel.grid.major = element_blank(), panel.border = element_blank(),
                                          plot.title = element_text(hjust = 0.5),axis.text=element_text(size=12,face="bold"),
                                          axis.title=element_text(size=13,face="bold"),legend.position = "none")+
                        labs(title="")+labs(x=titulo)+labs(y="Frecuencia")+ scale_colour_manual(name = '',values=c('Media'="#002e5b")) +
                        scale_y_continuous(labels = percent_format()) + scale_x_continuous(limits = sort(range(df$Valor)*unlist(ifelse(length(unique(sign(df$Valor)) ) !=1,yes = list(c(0.95,1.05)),no = ifelse(test = unique(sign(df$Valor)) == -1,yes = list(c(1.05,0.95)),no = list(c(0.95,1.05)))))))))



  ### --- Modificando el texto --- ###
  for(i in 1:length(Grafico$x$data)){
    Grafico$x$data[[i]]$text <- paste0("Media: ",format(round(mean(df$Valor)),big.mark = ","),"\n Valor: ",
                                       format(round(Grafico$x$data[[i]]$x),big.mark = ","),
                                       "\n Desviacion: ",format(round(sd(df$Valor)),big.mark = ","))

    Grafico$x$data[[i]]$showlegend <- FALSE

    }


  return(suppressWarnings(Grafico))

}


Grafica_correlaciones = function(Insumos = "Castilla|South_Blend",Niveles = FALSE,Fechas_correlaciones_linea){
  if (Niveles == FALSE){
    Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),],charvec=as.Date(Matriz_datos[,c(1)]))
    Correlaciones_cierre=diff(Correlaciones_cierre)[-1,]

    } else {
      Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),]+Matriz_datos[,"Commodity"],charvec=as.Date(Matriz_datos[,c(1)]))
      Correlaciones_cierre=returns(Correlaciones_cierre,method="simple")

    }

  ############# --------------- Se acota la matriz al tiempo
  Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) >=  as.Date(Fechas_correlaciones_linea[1]),]
  Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) <= as.Date(Fechas_correlaciones_linea[2]),]

  Correlaciones_cierre = cor(Correlaciones_cierre)
  Correlaciones_cierre = Correlaciones_cierre*100
  cormat <- round(Correlaciones_cierre,2)
  colnames(cormat) = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(colnames(cormat),collapse = "$|^"),"$")),"Nombre"]
  rownames(cormat) = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(rownames(cormat),collapse = "$|^"),"$")),"Nombre"]
  melted_cormat <- melt(cormat)
  melted_cormat[melted_cormat$value == 100,3] = NA

    #' Funcion que grafica la matriz de correlacion.
    #' @param matCov Matriz de covarianza de los datos, con los nombres de las
    #' variables en las columnas y filas
    #' @return El resultado es la matriz de correlacion en grafica.
    melted_cormat$Var1 <- gsub('(.{1,13})(\\s|$)', '\\1\n', melted_cormat$Var1)
    melted_cormat$Var2 <- gsub('(.{1,13})(\\s|$)', '\\1\n', melted_cormat$Var2)

    Correlaciones_rentav = suppressWarnings(ggplot(melted_cormat,
                                                   aes(Var1, Var2, label = value, fill=value)) +
                                              geom_tile()+
                                              scale_fill_gradient2(low = "#ff8d16", high = "#d62637", mid = "#cecbcb",
                                                                   midpoint = 8, limit = c(-100,100), space = "Lab",
                                                                   name="Correlación") + geom_text(aes(Var1, Var2, label = ifelse(test = value == "NA",yes = paste0("-"),no = paste0(value,'%'))), color = "white", size = 5,fontface = "bold") +
                                              theme(legend.text = element_text(colour="black", size=10, face="bold"),
                                                    axis.text.x = element_text(colour="black", size=8, face="bold",
                                                                               angle = 60, hjust = 1),
                                                    axis.text.y = element_text(colour="black", size=8, face="bold"),
                                                    axis.title.x = element_blank(), axis.title.y = element_blank(),
                                                    panel.grid.major = element_blank(),panel.border = element_blank(),
                                                    panel.background = element_blank(),axis.ticks = element_blank(),
                                                    legend.justification = c(1, 0),
                                                    legend.title = element_text(colour="black", size=26, face="bold"),
                                                    legend.position = 'none',legend.direction = "horizontal")+
                                              guides(fill = guide_colorbar(barwidth = 6, barheight = 1,title.position = "top",
                                                                           title.hjust = 1)))


    Grafico <- ggplotly(Correlaciones_rentav)%>%
      layout(margin = list(l = 120, r = 20, b = 120, t = 20, pad = 4),
             hoverlabel = list(font=list(size=18)))
    ayuda_nombres <- expand.grid(colnames(cormat),colnames(cormat))
    mat_ayuda1 <- matrix(ayuda_nombres[,1],ncol = ncol(cormat),nrow = nrow(cormat),byrow = F)
    mat_ayuda2 <- matrix(ayuda_nombres[,1],ncol = ncol(cormat),nrow = nrow(cormat),byrow = T)

    for(i in 1:ncol(Grafico$x$data[[1]]$text)){

      for(j in 1:nrow(Grafico$x$data[[1]]$text)){
        if(is.na(cormat[j,i])){
          Grafico$x$data[[1]]$text[j,i] <- ""
        } else {
          texto <- gsub("value","",gsub("Var2","",gsub("<br />","",gsub("\n"," ",Grafico$x$data[[1]]$text[j,i]))))
          texto <- unlist(strsplit(texto,":"))[c(2,3,5)]
          texto[3] <- paste0(round(as.numeric(texto[3]),2),"%")
          Grafico$x$data[[1]]$text[j,i] <- paste0("Correlación: ",texto[1],"-",texto[2]
                                                  ,"\n",texto[3])
        }
      }
    }

    for (p in 1:length(Grafico$x$data[[2]]$hovertext)) {
      Grafico$x$data[[2]]$hovertext[p] = ""

    }
return(Grafico)
}


Estadisticas_econometria = function(Inputs,Niveles = FALSE,Plazo = 1){
  Tablas = NULL
  Unidades_finales = Cambios_totales(Base_excel = Base_excel)
  for (Indicador in Inputs){
    if (Niveles == FALSE){
        Tabla = data.frame(Factor = paste0(c(as.character(dimnames(Matriz_simulaciones)[[2]][grep(dimnames(Matriz_simulaciones)[[2]],pattern = Indicador)]))),
                           Media = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,mean)[Plazo]),2),
                           Desviacion = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,sd)[Plazo]),2),
                           P10 = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,function(x){quantile(x = x,probs = c(10,90)/100)})[,Plazo][1]),2),
                           P25 = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,quantile)[,Plazo][2]),2),
                           P75 = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,quantile)[,Plazo][4]),2),
                           P90 = round(as.numeric(apply(Matriz_simulaciones[,Indicador,],1,function(x){quantile(x = x,probs = c(10,90)/100)})[,Plazo][2]),2),
                           Unidades = as.character(Unidades_finales[c(grep(Unidades_finales[,"Ticker"],pattern = Indicador)),"Unidades"]))


    } else {
      Tabla = data.frame(Factor = c(as.character(dimnames(Matriz_simulaciones)[[2]][grep(dimnames(Matriz_simulaciones)[[2]],pattern = Indicador)])),
                         Media = round(as.numeric(apply(((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",])),1,mean)[Plazo])),
                         Desviacion = round(as.numeric(apply((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",]),1,sd)[Plazo])),
                         P10 = round(as.numeric(apply((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",]),1,function(x){quantile(x = x,probs = c(10,90)/100)})[,Plazo][1])),
                         P25 = round(as.numeric(apply((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",]),1,quantile)[,Plazo][2])),
                         P75 = round(as.numeric(apply((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",]),1,quantile)[,Plazo][4])),
                         P90 = round(as.numeric(apply((Matriz_simulaciones[,Indicador,]+Matriz_simulaciones[,"Commodity",]),1,function(x){quantile(x = x,probs = c(10,90)/100)})[,Plazo][2])),
                         Unidades = as.character(Unidades_finales[c(grep(Unidades_finales[,"Ticker"],pattern = Indicador)),"Unidades"]))
      }
    colnames(Tabla) =c("Indicador","Media","D.E","P10%","P25%","P75%","P90%","Unidades")
    Tabla[,1] = as.character(gsub(x = as.character(Tabla[,1]),pattern = "_",replacement = " "))
    Tablas = rbind(Tablas,Tabla)
  }
return(Tablas)
}



Informacion_factores_econometria = function(Info_futuros,Info_econometria){
  Informacion_econometria = Info_econometria
  Futuros_datos = Info_futuros
  ########################## ----------------- Informacion Econometria ----------------- ##########################
  Informacion_econometria <- rbind(Informacion_econometria,Futuros_datos)
  Informacion_avanzada_econ <- Informacion_econometria[,-c(2,5)]
  Informacion_avanzada_econ[,1] <- as.character(Informacion_avanzada_econ[,1])
  Informacion_avanzada_econ[,2] <- as.Date(as.character(Informacion_avanzada_econ[,2]))
  Informacion_avanzada_econ[,3] <- as.Date(as.character(Informacion_avanzada_econ[,3]))
  Informacion_avanzada_econ[,4] <- as.character(Informacion_avanzada_econ[,4])
  Informacion_avanzada_econ[,5] <- as.character(Informacion_avanzada_econ[,5])
  colnames(Informacion_avanzada_econ) <- c("Indicador","Fecha min.","Fecha max.","Frecuencia","Categoria")
  return(Informacion_avanzada_econ)
}

# input = NULL
#  Grupo = "Crudos internacionales"
#  input[[paste0("Econometria",Grupo)]] = "Commodity"
#  Indice_descarga = input[[paste0("Econometria",Grupo)]]


Descargar_simulaciones_econometria = function(Indice_descarga,Niveles = T){
  if (Niveles == T){
    Matriz_descargar = if(Indice_descarga == "Commodity") 0 + Matriz_simulaciones[,grep(colnames(Matriz_simulaciones),pattern = paste0("^",ifelse(length(Indice_descarga) == 0,
                                                                                                                                              yes = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1)],
                                                                                                                                              no = gsub(Indice_descarga,pattern = " ",replacement = "_")),"$")),] else Matriz_simulaciones[,"Commodity",] + Matriz_simulaciones[,grep(colnames(Matriz_simulaciones),pattern = paste0("^",ifelse(length(Indice_descarga) == 0, yes = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1)],no = gsub(Indice_descarga,pattern = " ",replacement = "_")),"$")),]
    Matriz_descargar = t(Matriz_descargar)

  } else if (Niveles == F) {
    Matriz_descargar = if(Indice_descarga == "Commodity") 0 else Matriz_simulaciones[,grep(colnames(Matriz_simulaciones),pattern = paste0("^",ifelse(length(Indice_descarga) == 0, yes = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1)],no = gsub(Indice_descarga,pattern = " ",replacement = "_")),"$")),]
    Matriz_descargar = t(Matriz_descargar)
  }

  Matriz_descargar = as.data.frame(Matriz_descargar)
  Matriz_descargar = round(x = Matriz_descargar,digits = 3)
  Matriz_descargar = cbind(paste0("SIM ",seq(1:dim(Matriz_descargar)[1])),Matriz_descargar)
  colnames(Matriz_descargar)[1] = as.character(Indice_descarga)
  return(Matriz_descargar)
}

Empresas_comando_dinamica = function(input,Empresa, Matriz_Fechas_comando, Informacion_empresas ){
                          userListItem(
                            src = paste0(Empresa,".png"),
                            user_name = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = Empresa),"Shiny_nombre"],
                            description = HTML(paste0(Estado_version_empresas(Empresa,Matriz_comando = Matriz_Fechas_comando),
                                                      Estado_agregacion_empresas(Empresa = Empresa,Matriz_comando = Matriz_Fechas_comando),
                                                      '<strong><font color="#415464"> Moneda funcional: ',Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],' </font></strong><br>',
                                                      Matriz_Fechas_comando[grep(as.character(Matriz_Fechas_comando[,"Empresas"]),pattern = paste0("^",Empresa,"$")),][,"Fecha_inicial"]
                                                      ,' - ',
                                                      Matriz_Fechas_comando[grep(as.character(Matriz_Fechas_comando[,"Empresas"]),pattern = paste0("^",Empresa,"$")),][,"Fecha_final"]))
                          )
}


Construir_datos_correlaciones =function(Insumos = "Castilla|South_Blend",Niveles = FALSE,Fechas_correlaciones_linea){
  if (Niveles == FALSE){
    Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),],charvec=as.Date(Matriz_datos[,c(1)]))
    Correlaciones_cierre=diff(Correlaciones_cierre)[-1,]

  } else {
    Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),]+Matriz_datos[,"Commodity"],charvec=as.Date(Matriz_datos[,c(1)]))
    Correlaciones_cierre=returns(Correlaciones_cierre,method="simple")

  }

  ############# --------------- Se acota la matriz al tiempo
  Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) >=  as.Date(Fechas_correlaciones_linea[1]),]
  Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) <= as.Date(Fechas_correlaciones_linea[2]),]

  Correlaciones_cierre = cor(Correlaciones_cierre)
  Correlaciones_cierre = Correlaciones_cierre*100
  cormat <- round(Correlaciones_cierre,2)
  cormat = cbind(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(rownames(cormat),collapse = "$|^"),"$")),"Nombre"],cormat)
  colnames(cormat) = c("Cor ",Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(colnames(cormat),collapse = "$|^"),"$")),"Nombre"])

  return(cormat)
}

Construir_datos_historicos =function(Insumos = "Castilla|South_Blend",Niveles = FALSE,Fechas_correlaciones_linea){
  if (Niveles == FALSE){
    Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),],charvec=as.Date(Matriz_datos[,c(1)]))

  } else {
    Correlaciones_cierre=timeSeries(data=Matriz_datos[,c(grep(colnames(Matriz_datos),pattern = Insumos)),]+Matriz_datos[,"Commodity"],charvec=as.Date(Matriz_datos[,c(1)]))

  }

    ############# --------------- Se acota la matriz al tiempo
    Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) >=  as.Date(Fechas_correlaciones_linea[1]),]
    Correlaciones_cierre = Correlaciones_cierre[as.Date(rownames(Correlaciones_cierre) ) <= as.Date(Fechas_correlaciones_linea[2]),]
    Correlaciones_cierre = data.frame(Fecha = rownames(Correlaciones_cierre),Correlaciones_cierre)
    rownames(Correlaciones_cierre) = NULL
  return(Correlaciones_cierre)
}


Econometria_dinamica = function(input,Grupo,Corrio_total){
  tagList(h2(HTML(paste0('<strong><font color="#002e5b">Análisis de factores de riesgo</font></strong>'))),
          tabBox(side = "right", height = 1200,width = 4000,
                 selected = HTML('<strong><font color="#002e5b">Simulaciones</font></strong>'),
                 ################### -------------------- Descriptivas -------------------- ###################
                 tabPanel(HTML('<strong><font color="#002e5b">Correlaciones</font></strong>'),
                          box(solidHeader = T,status = "primary",height = 1000,width = 4000,
                              title = HTML('<font color="white">Correlaciones</font>'),
                              HTML('<strong><font color="#415464">Exportar</font></strong>'),
                              ### --- Boton descarga Excel --- ###
                              HTML('<a id=\"Correlaciones_descargar\" href=\"#\" class=\"action-button\"><i class="fa fa-file-excel-o" aria-hidden="true"></i></a>'),
                              ### --- Seleccione producto ---- ###
                              tagList(checkboxGroupButtons(
                                inputId = paste0(Grupo,"_correlacion"), label = "Seleccione un producto:",direction = "horizontal",individual = F,justified = F,width = "auto",selected = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"][c(1:2)]),
                                choiceNames = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"]),
                                choiceValues = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"]),
                                status = "primary",checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon"))),
                                tabBox(side = "right", height = 250,width = 4000,
                                       ### --- Niveles ---- ###
                                       tabPanel(icon = icon("signal"),title = "Niveles",
                                                sliderTextInput(inputId = paste(Grupo,"linea_tiempo_correlaciones_niveles"),label = "Seleccione un plazo",
                                                                choices = as.Date(Matriz_datos[,"Fecha"]),grid = T,selected = c(as.Date(Matriz_datos[,"Fecha"][1]),as.Date(Matriz_datos[,"Fecha"][length(Matriz_datos[,"Fecha"])]))),
                                                renderPlotly(Grafica_correlaciones(Niveles = F,Fechas_correlaciones_linea = input[[paste(Grupo,"linea_tiempo_correlaciones_niveles")]],
                                                                                   Insumos = paste0("^",ifelse(length(input[[paste0(Grupo,"_correlacion")]]) == 0,
                                                                                                               yes = c(as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1:2)]),
                                                                                                               no = paste0(gsub(input[[paste0(Grupo,"_correlacion")]],pattern = " ",replacement = "_"),collapse = "$|^")),"$"))
                                                             ),HTML("La correlación en niveles es calculada a partir de los retornos históricos.
                              Para la correlacion de los diferenciales se toman las diferencias.")
                                                ))
                              ),

                              ### --- Proceso descarga --- ###
                              shinyBS::bsModal(id = "Descargar_mercado",title = HTML(paste0('<strong><font color="#002e5b">Exportar - ',Grupo,'</font></strong>')),
                                               renderUI(
                                               tagList(
                                                 fluidRow(
                                                   column(6,tagList(HTML('<font color="#002e5b">Matriz correlaciones</font> <br /> '),
                                               downloadHandler(filename = paste0(Grupo,"- Correlaciones.xlsx"),
                                                               content = function(file) {write.xlsx(x = Construir_datos_correlaciones(Fechas_correlaciones_linea = input[[paste(Grupo,"linea_tiempo_correlaciones_niveles")]],
                                                                 Niveles = T,Insumos = paste0("^",ifelse(length(input[[paste0(Grupo,"_correlacion")]]) == 0,
                                                                                                         yes = c(as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1:2)]),
                                                                                                         no = paste0(gsub(input[[paste0(Grupo,"_correlacion")]],pattern = " ",replacement = "_"),collapse = "$|^")),"$")), file)}
                                                              ))),
                                               column(6,tagList(HTML('<font color="#002e5b">Serie histórica</font> <br /> '),
                                               downloadHandler(filename = paste0(Grupo,"- Historicos.xlsx"),
                                                               content = function(file) {write.xlsx(x = Construir_datos_historicos(Fechas_correlaciones_linea = input[[paste(Grupo,"linea_tiempo_correlaciones_niveles")]],
                                                                 Niveles = T,Insumos = paste0("^",ifelse(length(input[[paste0(Grupo,"_correlacion")]]) == 0,
                                                                                                         yes = c(as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1:2)]),
                                                                                                         no = paste0(gsub(input[[paste0(Grupo,"_correlacion")]],pattern = " ",replacement = "_"),collapse = "$|^")),"$")), file)}
                                               )))))),
                                               trigger = "Correlaciones_descargar")
                          )
                 ),
                 ################### -------------------- Descriptivas -------------------- ###################
                 tabPanel(HTML('<strong><font color="#002e5b">Estadísticas descriptivas</font></strong>'), box(solidHeader = T,status = "primary",width = 4000,height = 600,
                                                                                                               title = HTML('<font color="white">Estadísticas descriptivas</font>'),
                                                                                                               tagList(
                                                                                                                 ### --- Seleccione producto ---- ###
                                                                                                                 checkboxGroupButtons(
                                                                                                                   inputId = paste0(Grupo,"_in_estadisticas"), label = "Seleccione un producto:",direction = "horizontal",individual = F,justified = F,width = "auto",selected = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"][c(1:2)]),
                                                                                                                   choiceNames = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"]),
                                                                                                                   choiceValues = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"]),
                                                                                                                   status = "primary",
                                                                                                                   checkIcon = list(yes = icon("ok", lib = "glyphicon"),no = icon("remove", lib = "glyphicon"))),
                                                                                                                 #### ------ Linea de tiempo ----- ####
                                                                                                                 sliderInput(inputId = paste(Grupo,"linea_tiempo"),label = "Seleccione un plazo",
                                                                                                                             min = 1,
                                                                                                                             max = (dim(Matriz_simulaciones)[1]-1),
                                                                                                                             value = (dim(Matriz_simulaciones)[1]-1)),
                                                                                                                 tabBox(side = "right", height = 400,width = 4000,
                                                                                                                        #### ------ Niveles ----- ####
                                                                                                                        tabPanel(icon = icon("signal"),title = "Niveles",
                                                                                                                                 #### ------ Tabla: Descriptivas: Niveles ----- ####
                                                                                                                                 renderDataTable(selection = list(target = "cell"),Estadisticas_econometria(Niveles = F,Plazo = as.numeric(input[[paste(Grupo,"linea_tiempo")]]),Inputs = gsub(input[[paste0(Grupo,"_in_estadisticas")]],pattern = " ",replacement = "_"))
                                                                                                                                                 , extensions = 'Buttons',options = list(autoWidth = FALSE,searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,dom = 'Bfrtip',buttons = list(
                                                                                                                                                   list(extend = 'copy',text = "Copiar",title = paste0(gsub(Grupo,pattern = "_",replacement = " ")," - Niveles")),
                                                                                                                                                   list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(Grupo,pattern = "_",replacement = " ")),
                                                                                                                                                        messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                        title = paste0(gsub(Grupo,pattern = "_",replacement = " "),"- Niveles")),
                                                                                                                                                   list(extend = 'pdf',text = "PDF",title = paste0(gsub(Grupo,pattern = "_",replacement = " ")," - Niveles")))))))))),
                 ################### -------------------- Simulaciones -------------------- ###################
                 tabPanel(HTML('<strong><font color="#002e5b">Simulaciones</font></strong>'), box(solidHeader = T,status = "primary",height = 750,width = 400,
                                                                                                  title = HTML('<font color="white">Simulaciones</font>'),
                                                                                                  HTML('<a id=\"Simulaciones_descargar\" href=\"#\" class=\"action-button\"><i class="fa fa-file-excel-o" aria-hidden="true"></i></a>'),
                                                                                                  tagList(
                                                                                                    radioGroupButtons(
                                                                                                      inputId = paste0("Econometria",Grupo), label = "Seleccione un producto:",direction = "horizontal",individual = F,justified = F,width = "auto",selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"][c(1)],
                                                                                                      choiceNames = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"]),
                                                                                                      choiceValues = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1]), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"]),
                                                                                                      status = "primary",checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon"))),
                                                                                                    #### ------ Niveles ----- ####
                                                                                                    tabBox(side = "right", height = 400,width = 4000,
                                                                                                           tabPanel(icon = icon("signal"),title = "Niveles",
                                                                                                                    renderPlotly({Grafica_simulaciones(
                                                                                                                      mat = Matriz_simulaciones[,grep(colnames(Matriz_simulaciones),pattern = paste0("^",ifelse(length(input[[paste0("Econometria",Grupo)]]) == 0,
                                                                                                                                                                                                                                               yes = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1)],no = gsub(input[[paste0("Econometria",Grupo)]],pattern = " ",replacement = "_")),"$")),],title = paste0('') ,leyenda_y = 'USD',
                                                                                                                      hist = Matriz_datos[,grep(colnames(Matriz_datos),pattern = paste0("^",ifelse(length(input[[paste0("Econometria",Grupo)]]) == 0,
                                                                                                                                                                                                                           yes = as.character(Fechas_factores[Fechas_factores[,"Categoria"] == Grupo,1])[c(1)],
                                                                                                                                                                                                                           no = gsub(input[[paste0("Econometria",Grupo)]],pattern = " ",replacement = "_")),"$"))])}))
                                                                                                           )),
                                                                                                  shinyBS::bsModal(id = "Descargar_datos_simulaciones",title =  HTML(paste0('<strong><font color="#002e5b">Exportar - ',Grupo,'</font></strong>')),
                                                                                                                   renderUI(
                                                                                                                     tagList(
                                                                                                                       fluidRow(
                                                                                                                         HTML('<strong><font color="#002e5b">Niveles</font> <br /> </strong>  <br />'),
                                                                                                                         column(6,tagList(HTML('<font color="#002e5b">Simulaciones</font> <br /> ')),
                                                                                                                                downloadHandler(filename = "Simulaciones - Niveles.xlsx",
                                                                                                                                                content = function(file) {write.xlsx(sheetName = as.character(input[[paste0("Econometria",Grupo)]]),x = Descargar_simulaciones_econometria(Niveles = T,Indice_descarga = input[[paste0("Econometria",Grupo)]]),file)
                                                                                                                                                })
                                                                                                                         ),
                                                                                                                         column(6,tagList(HTML('<font color="#002e5b">Serie histórica</font> <br /> '),
                                                                                                                                          downloadHandler(filename = "Historicos - Niveles.xlsx",
                                                                                                                                                          content = function(file) {write.xlsx(x = Construir_datos_historicos(Fechas_correlaciones_linea = c("2011-09-01","2018-05-01"),
                                                                                                                                                                                                                              Niveles = T,Insumos = paste0("^",ifelse(length(input[[paste0("Econometria",Grupo)]]) == 0,
                                                                                                                                                                                                                                                                      yes = "Commodity",
                                                                                                                                                                                                                                                                      no = paste0(gsub(input[[paste0("Econometria",Grupo)]],pattern = " ",replacement = "_"),collapse = "$|^")),"$")), file)})))))),
                                                                                                                   trigger = paste0("Simulaciones_descargar"))))))

}




Diferencias_tablas = function(Tablas,Nombre_unico){

  Tablas_nuevas = NULL
  for (i in (1:dim(Tablas)[3])){
    Tablas_suma = rbind(Tablas[,,i],colSums(Tablas[,,i]))
    rownames(Tablas_suma)[dim(Tablas_suma)[1]] = "Total"
    Tabla_nueva = data.frame(Tablas_suma,Diferencia=abs((Tablas_suma[,1]-Tablas_suma[,2])),
                             Cambio=c(paste0(as.character(round(((Tablas_suma[,2]-Tablas_suma[,1])/Tablas_suma[,1])*100,2)),"%")))

    colnames(Tabla_nueva)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Ecopetrol_description",Nombre_unico,"'",").modal('show')"), HTML("M: Empresa + P: Empresa <i class=\"fa fa-info-circle\"></i></a>")))
    colnames(Tabla_nueva)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Proyecciones_description",Nombre_unico,"'",").modal('show')"), HTML("M: Riesgo + P: Empresa <i class=\"fa fa-info-circle\"></i></a>")))
    colnames(Tabla_nueva)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Quantil_description",Nombre_unico,"'",").modal('show')"), HTML("M: Riesgo + P: Modelo <i class=\"fa fa-info-circle\"></i></a>")))
    colnames(Tabla_nueva)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Diferencia_description",Nombre_unico,"'",").modal('show')"), HTML("Diferencia <i class=\"fa fa-info-circle\"></i></a>")) )
    colnames(Tabla_nueva)[5] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Cambio_description",Nombre_unico,"'",").modal('show')"), HTML("Cambio<i class=\"fa fa-info-circle\"></i></a>" )) )
    Tablas_nuevas = (abind(Tablas_nuevas,Tabla_nueva,along = 3))
  }
  dimnames(Tablas_nuevas)[3] = dimnames(Tablas)[3]


  return(Tablas_nuevas)
}

########################## ----------------- Sesibilidades ----------------- #########################
### --- Funcion que devuelve un vector de cuales son las sensibilidades disponibles por empresa --- ##
Items_sensibilidades = function(Empresa,Informacion = Informacion_empresas,Tipo = 1){
  if (Empresa == "Ecopetrol CB"){
    Empresa = "Ecopetrol"
  }

  # if (Tipo == 1){
  #   Sensibilidades_individuales = Resultados_agregacion_contable$Sensibilidades_PG[[as.character(Empresa)]]
  #   Variables_sensibilidad = as.data.frame(round(apply(Sensibilidades_individuales,3,sum)) != 0)
  #   Variables_sensibilidad = data.frame(Ticker = rownames(Variables_sensibilidad), Activa = Variables_sensibilidad[,1])
  #   Variables_sensibilidad = Variables_sensibilidad[Variables_sensibilidad[,2] == T,]
  #   } else if (Tipo == 2){
  #     Sensibilidades_individuales = Resultados_agregacion_contable$Sensibilidades_FC[[as.character(Empresa)]]
  #     Variables_sensibilidad = as.data.frame(round(apply(Sensibilidades_individuales,3,sum)) != 0)
  #     Variables_sensibilidad = data.frame(Ticker = rownames(Variables_sensibilidad), Activa = Variables_sensibilidad[,1])
  #     Variables_sensibilidad = Variables_sensibilidad[Variables_sensibilidad[,2] == T,]
  #     }

  Variables_sensibilidad = Coberturas_empresa(Empresa = Empresa,Excel = Base_excel)
  Variables_sensibilidad = as.character(Variables_sensibilidad$Sensibilidad$Ticker)
  return(as.character(Variables_sensibilidad))
}


Unidades_indicador_sensibilidad = function(Indicadores,Moneda,Base_nombres){
  Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)
  Unidades_agrupar = NULL
  Cambios_agrupar = NULL
  for (k in 1:length(Indicadores)) {
    Unidad = Base_nombres[grep(Base_nombres[,"Indice"],pattern = Indicadores[k]),grep(colnames(Base_nombres),pattern = paste0("Unidades_",Moneda))]
    Cambios_unidades = Info_unidades_empresa[grep(Info_unidades_empresa[,"Ticker"],pattern = Indicadores[k]),"Cambio"]
    Unidades_agrupar = cbind(Unidades_agrupar,Unidad)
    Cambios_agrupar = cbind(Cambios_agrupar,Cambios_unidades)
  }

  Unidades_agrupar = rbind(Unidades_agrupar,Cambios_agrupar)
  Unidades_agrupar = (as.data.frame((Unidades_agrupar)))
  colnames(Unidades_agrupar) = Indicadores
  rownames(Unidades_agrupar) = NULL
  Unidades_agrupar = as.data.frame(Unidades_agrupar)
  return(Unidades_agrupar)
}


### ---- Devuelve el patriminio de cada empresa --- ###
Patrimonio_individual = function(Empresa,Patrimonios_completos){
  if (Empresa == "Ecopetrol CB"|Empresa == "Ecopetrol_CB"){
    Empresa = "Barranca"
  }

  Patrimonio_resultado = Patrimonios_completos[grep(Patrimonios_completos[,"Empresa"],pattern = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Patrimonios"]),"Patrimonio"]
  Patrimonio_resultado = as.numeric(Patrimonio_resultado)
  return(Patrimonio_resultado)
}

######### --------------- Devuelve los indicadores disponibles ---------------- #####
Resultados_segmentos_agregados_disponibles = function(Segmento,Segmentos_info,Empresas){
  Segmentos = Segmentos_info
  Segmento = Segmento
  Empresas_a_agregrar = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]
  Resultados_unidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas_a_agregrar)
  Resultados_unidades = as.character(Resultados_unidades[,"Ticker"])
  return(Resultados_unidades)
}

### --------- Codigo que devuelve las unidades ---- ###
Nombres_unidades_HTML= function(Insumo_factor,Cambios_totales_factores = Cambios_totales_ver_herramienta(as.data.frame(read_excel(paste0(path,"/Inputs/Parametros/Parametros.xlsx"),sheet = 1)))){
  if (length(Insumo_factor) != 0) {
    Unidades = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = Insumo_factor),]
    texto_html = (paste0("El indicador de ",Unidades[,"Nombre"]," cambió en ",Cambios_totales_factores[grep(Cambios_totales_factores[,"Ticker"],pattern = as.character(Insumo_factor)),"Cambio"]," ",Cambios_totales_factores[grep(Cambios_totales_factores[,"Ticker"],pattern = as.character(Insumo_factor)),"Unidades"],"."))
    return(texto_html)
  }
}

### --------- Codigo que identifica segmentos disponibles ---- ###
Segmentos_activos_empresas = function(Empresas,Segmentos){
  Segmentos_estado = NULL
  for (j in colnames(Segmentos)) {
    Empresas_segmentadas = Segmentos[!is.na(Segmentos[,j]),j]
    ### ----- si no esta todas las empresas del segmento no se muestra ---- ###
    Estado_segmento_empresas = length(Empresas[c(grep(Empresas,pattern = paste0("^",paste0(Empresas_segmentadas,collapse = "$|^"),"$")))]) == length(Empresas_segmentadas)
    Estado_j_segmento = data.frame(Segmento = j, Estado = Estado_segmento_empresas)
    Segmentos_estado = rbind(Segmentos_estado,Estado_j_segmento)
  }

  Segmentos_estado = Segmentos_estado[Segmentos_estado[,"Estado"] == TRUE,]
  Segmentos_estado =as.data.frame(Segmentos_estado)
  return(Segmentos_estado)
}


########## ------------ Empresas Unidades dolares ------------- ##########
### Esta función transforma las unidades de almacenamiento a las unidades
## originales de las empreas que fueron calculadas las empresas en dolares ####
Empresas_unidades_dolar= function(Empresa,Insumos,Simulaciones = Matriz_simulaciones){
  Simulaciones = Simulaciones
  Inicial = Insumos$Inicial_PG[[Empresa]]/t(Simulaciones[,"TRM_Promedio",])
  Sensibilidades = Insumos$Sensibilidades_PG[[Empresa]]
  ### --- Se le quita  el P&G + 1 que fue calculado en el codigo original --- ###
  Sensibilidades[,,grep(dimnames(Sensibilidades)[[3]],pattern = "USD/LC")] = Sensibilidades[,,grep(dimnames(Sensibilidades)[[3]],pattern = "USD/LC")] - Inicial
  Q = replicate(dim(Sensibilidades)[3],Simulaciones[,grep(colnames(Simulaciones),pattern = "TRM_Promedio"),])
  Q = aperm(Q,c(2,1,3))
  ### --- Se pasa todo a dolares nuevamente --- ###
  Sensibilidades = (Sensibilidades/Q)
  return(Sensibilidades)
}

Cambio_exposicion = function(Empresa,Moneda_empresa,Moneda_resultante,Simulaciones,Tipo = 1){
  #### Ecopetrol agregrado ####
  if (Empresa == "Ecopetrol CB"){
    if(Tipo == 1) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Ecopetrol_CB$Sensibilidades_PG
      Agregado_inicial = Resultados_agregacion_contable$Ecopetrol_CB$Inicial_PG

    } else if (Tipo == 2) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Ecopetrol_CB$Sensibilidades_FC
      Agregado_inicial = Resultados_agregacion_contable$Ecopetrol_CB$Inicial_FC
    }
  } else {
    if(Tipo == 1) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Sensibilidades_PG[[Empresa]]
      Agregado_inicial = Resultados_agregacion_contable$Inicial_PG[[Empresa]]

    } else if (Tipo == 2) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Sensibilidades_FC[[Empresa]]
      Agregado_inicial = Resultados_agregacion_contable$Inicial_FC[[Empresa]]
    }
  }

  if (Empresa == "Ecopetrol CB"){
    Empresa = "Ecopetrol"
  }

  Dim_sim_sen_acotar = dim(Sensibilidades_mostrar)[2]
  Dim_sim_cambiar= dim(Matriz_simulaciones[,"TRM_Promedio",])
  Sensibilidades_mostrar = Sensibilidades_mostrar[c(1:Dim_sim_cambiar[2]),c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),]

  ### --- Empresa en pesos --- ###
  if(Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"] == "COP"){
    #### --- Exposicion: TRM --- ###
    ### ---  en Dolares --- ###
    if (Moneda_resultante == "COP"){
      TRM_pos = grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")
      Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]*t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])
    }
    #### --- Exposicion: Otros factores --- ###

    Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)
    ### --- BARRILES --- ####
    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/UN"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))/1000

      }
    }

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/TON"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }
    ### ---- Agregación total: COP Todo ---- ###


  } else if (Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"] == "USD") {
    ######### ------- Le quita el P&G a la sensibilidad total ---------- #############
    Agregado_inicial = Agregado_inicial/t(Simulaciones[,"TRM_Promedio",])
    ### ---- Se cambio en el codigo que agrega todo ---- ###
    #Sensibilidades_mostrar[,,"USD/LC"] = Sensibilidades_mostrar[,,"USD/LC"] - Agregado_inicial
    ### --- Se le quita  el P&G + 1 que fue calculado en el codigo original --- ###
    Q = replicate(dim(Sensibilidades_mostrar)[3],Simulaciones[,grep(colnames(Simulaciones),pattern = "TRM_Promedio"),])
    Q = aperm(Q,c(2,1,3))
    ### --- Se pasa todo a dolares nuevamente --- ###
    Sensibilidades_mostrar = (Sensibilidades_mostrar/Q)

    ### --- Pasa las unidades de sensibilidad a la moneda original --- ###
    Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/UN"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j])/1000
        }
      }

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/TON"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j])

      }
    }

    TRM_pos = grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")

    if (length(grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")) != 0 ){
      #### --- Exposicion en Dolares --- ###
      if (Moneda_resultante == "COP"){
        #### --- TRM --- ###
        Transformacion_TRM = (t((Simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])^3)/(1+t(Simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])))
        Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]*Transformacion_TRM
        } else if (Moneda_resultante == "USD"){
          TRM_pos = grep(dimnames(Resultados_agregacion_contable$Sensibilidades_PG[[Empresa]])[[3]],pattern = "USD/LC")
          ### -- Acotar matriz -- ##
          Sensibilidades_mostrar = Sensibilidades_mostrar[c(1:Dim_sim_cambiar[2]),c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),]
          Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]*t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])
      }

    }


  }
  return(Sensibilidades_mostrar)
}




Cambio_exposicion_grafica = function(Empresa,Moneda_empresa,Moneda_resultante,Simulaciones,Tipo = 1){
  #### Ecopetrol agregrado ####
  if (Empresa == "Ecopetrol CB"){
    if(Tipo == 1) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Ecopetrol_CB$Sensibilidades_PG
    } else if (Tipo == 2) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Ecopetrol_CB$Sensibilidades_FC
    }
  } else {
    if(Tipo == 1) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Sensibilidades_PG[[Empresa]]
    } else if (Tipo == 2) {
      Sensibilidades_mostrar = Resultados_agregacion_contable$Sensibilidades_FC[[Empresa]]
    }
  }

  if (Empresa == "Ecopetrol CB"){
    Empresa = "Ecopetrol"
  }
  Dim_sim_sen_acotar = dim(Sensibilidades_mostrar)[2]
  Dim_sim_cambiar= dim(Matriz_simulaciones[,"TRM_Promedio",])
  Sensibilidades_mostrar = Sensibilidades_mostrar[c(1:Dim_sim_cambiar[2]),c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),]

  ### --- Empresa en pesos --- ###
  if(Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"] == "COP"){
    #### --- Exposicion: TRM --- ###
    ### ---  en Dolares --- ###
    if (Moneda_resultante == "COP"){
      TRM_pos = grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")
      Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]
    }
    #### --- Exposicion: Otros factores --- ###

    Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)
    ### --- BARRILES --- ####
    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/UN"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/TON"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }
    ### ---- Agregación total: COP Todo ---- ###


  } else if (Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"] == "USD") {

    ### --- Pasa las unidades de sensibilidad a la moneda original --- ###
    Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/UN"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }

    for(j in (1:dim(Sensibilidades_mostrar)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Sensibilidades_mostrar)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/TON"){
        Sensibilidades_mostrar[,,j] = (Sensibilidades_mostrar[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }


    TRM_pos = grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")
    if (length(grep(dimnames(Sensibilidades_mostrar)[[3]],pattern = "USD/LC")) != 0 ){
      #### --- Exposicion en Dolares --- ###
      if (Moneda_resultante == "COP"){
        #### --- TRM --- ###
        Transformacion_TRM = (t((Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])^3)/(1+t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])))
        Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]*Transformacion_TRM
      } else if (Moneda_resultante == "USD"){
        TRM_pos = grep(dimnames(Resultados_agregacion_contable$Sensibilidades_PG[[Empresa]])[[3]],pattern = "USD/LC")
        ### -- Acotar matriz -- ##
        Sensibilidades_mostrar = Sensibilidades_mostrar[c(1:Dim_sim_cambiar[2]),c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),]
        #       Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",])
        Sensibilidades_mostrar[,,TRM_pos] = Sensibilidades_mostrar[,,TRM_pos]
      }
    }
  }

  return(Sensibilidades_mostrar)
}



Tabla_sensibilidades_paralelas = function(Empresa,Insumo_boton,Simulaciones = Matriz_simulaciones,Informacion = Informacion_empresas,input = input,Tipo = 1,Moneda_resultante = "USD",Moneda_empresa,Nombre_unico ="Tabla"){
  Simulaciones = Simulaciones

  Predeterminadas = paste0("^",paste0(Items_sensibilidades(Empresa = Empresa,Tipo = Tipo)[c(1,2)],collapse = "$|^"),"$")
  Buscadoras = ifelse(test = length(Insumo_boton) >= 2,
  yes = paste0("^",paste0(as.character(Insumo_boton),collapse = "$|^"),"$"),no = Predeterminadas)
  ### --- Escoge tipo y unidades --- ###
  Sensibilidades_individuales = Cambio_exposicion(Empresa = Empresa,Moneda_empresa = Moneda_empresa,Moneda_resultante = Moneda_resultante,Simulaciones = Simulaciones,Tipo = Tipo)

  ### -- Identificar el los elementos j en la matriz --- ###
  Sensibilidades_individuales = Sensibilidades_individuales[,,c(grep(dimnames(Sensibilidades_individuales)[[3]],pattern = Buscadoras))]
  Tabla_sensibilidades = apply(Sensibilidades_individuales,2,colMeans)
  Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
  Tabla_sensibilidades = round(Tabla_sensibilidades)
  Tabla_sensibilidades = t(Tabla_sensibilidades)
  if (Tipo == 1){
    Tabla_sensibilidades = Tabla_sensibilidades[-c(dim(Tabla_sensibilidades)[1]),]
  }

  Tabla_sensibilidades = rbind(Tabla_sensibilidades,colSums(Tabla_sensibilidades))
  Tabla_sensibilidades = apply(Tabla_sensibilidades, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
  Tabla_sensibilidades = data.frame((Tabla_sensibilidades))
  rownames(Tabla_sensibilidades)[(nrow(Tabla_sensibilidades))] = "Total"
  if (Tipo == 2){
    rownames(Tabla_sensibilidades)[((nrow(Tabla_sensibilidades))-1)] = "Pendiente"
  }

  Unidades_nombre_tablas = Unidades_indicador_sensibilidad(Indicadores = colnames(Tabla_sensibilidades) ,Moneda = Moneda_empresa,Base_nombres = Base_nombres_unidades)
  colnames(Tabla_sensibilidades) = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(colnames(Tabla_sensibilidades),collapse = "$|^"),"$")),"Nombre"]

  if (length(grep(colnames(Unidades_nombre_tablas),pattern = "USD/LC")) == 1) {
    Unidades_nombre_tablas[1,grep(colnames(Unidades_nombre_tablas),pattern = "USD/LC")] = as.character(Moneda_resultante)
    }

  colnames(Unidades_nombre_tablas)= colnames(Tabla_sensibilidades)
  Tabla_sensibilidades =  rbind(Unidades_nombre_tablas,Tabla_sensibilidades)

  for (i in c(1:dim(Tabla_sensibilidades)[2])){
    colnames(Tabla_sensibilidades)[i] = as.character(tags$a(href = "#", onclick = paste0("$(","'#",gsub(as.character(colnames(Tabla_sensibilidades)[i]),pattern = " ",replacement = "_"),"_tabla_explicacion",Nombre_unico,"'",").modal('show')"), colnames(Tabla_sensibilidades)[i]))
  }

  rownames(Tabla_sensibilidades)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Unidades_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Unidades"))
  rownames(Tabla_sensibilidades)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Cambios_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Cambios"))

  ### --- Suma total ---- ###
  return(Tabla_sensibilidades)
}


####### ------ Convierte los resultados a la moneda funcional y grafica la tabla ----- #######
Sensibiilidades_temporales_moneda_funcional = function(Empresa,Factor,Informacion_empresas,Contable = Resultados_agregacion_dinamica_contable,Tipo = 1,Modo_contable = T,Teorica = Resultados_agregacion_dinamica_teorica,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Segmentos_info = Segmentos_empresas_informacion,Participacion_accionaria= Participacion_accionaria_empresas,Patrimonios_completos,Simulaciones = Matriz_simulaciones,Empresas = Empresas_activas_segmentos){
  Tablas_temporales = function(Sensibilidad){
    Sensibilidad = as.data.frame(Sensibilidad)
    Sensibilidad = cbind(Sensibilidad,rowSums(Sensibilidad))
    Sensibilidad = rbind(Sensibilidad,colSums(Sensibilidad))
    colnames(Sensibilidad) = c(paste0('Mes ',seq(1,12)),'Total')
    rownames(Sensibilidad) = c(paste0('Mes ',seq(0,12)),'Total')
    Sensibilidad = round(Sensibilidad)
    Sensibilidad = apply(Sensibilidad, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
    Sensibilidad = as.data.frame(Sensibilidad)
    return(Sensibilidad)
  }

  Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"]

  if(Empresa == "Agregado"){
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_PG
        Agregado_inicial = Contable$Inicial_agregado_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_PG
        Agregado_inicial = Teorica$Inicial_agregado_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_FC
        Agregado_inicial = Contable$Inicial_agregado_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_FC
        Agregado_inicial = Teorica$Inicial_agregado_FC
      }
    }

    Agregacion_por_segmento = Sensibilidades_exposicion
    Patrimonio_por_segmento = Patrimonios_completos[grep(Patrimonios_completos[,"Empresa"],pattern = "Patrimonio_Agregado"),"Patrimonio"]
    PG_cero_por_segneto = Agregado_inicial

  } else if(Empresa == "Upstream"|Empresa == "Midstream"|Empresa=="Downstream") {
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG
        Agregado_inicial = Contable$Inicial_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG
        Agregado_inicial = Teorica$Inicial_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC
        Agregado_inicial =  Contable$Inicial_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC
        Agregado_inicial = Teorica$Inicial_FC
      }
    }

    Segmentos = Segmentos_info
    Segmento = Empresa
    Empresas_a_agregrar = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]
    Agregacion_por_segmento = 0
    Patrimonio_por_segmento = 0
    PG_cero_por_segneto = 0
    ### --- Empresa --- ###
    ### ------- Horizonte agregacion ----- ####
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    ### ------- Agregacion ----- ###
    for (k in Empresas_a_agregrar){
      Cero_k = Agregado_inicial[[k]][,c(1:Horizonte_agregacion_final)]
      Empresa_k = Sensibilidades_exposicion[[k]][,c(1:Horizonte_agregacion_final),,]
      Agregacion_por_segmento = Agregacion_por_segmento + ((Empresa_k)*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      PG_cero_por_segneto = PG_cero_por_segneto + (Cero_k*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      Patrimomio_k = Patrimonio_individual(Empresa = k,Patrimonios_completos = Patrimonios_completos)
      Patrimonio_por_segmento = Patrimonio_por_segmento + Patrimomio_k
    }

    Agregado_inicial = PG_cero_por_segneto
    Sensibilidades_exposicion = Agregacion_por_segmento

  } else if (Empresa == "Ecopetrol CB"){
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_PG
      Agregado_inicial = Contable$Ecopetrol_CB$Inicial_PG
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_FC
      Agregado_inicial =  Contable$Ecopetrol_CB$Inicial_FC
    }
  } else {
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Contable$Inicial_PG[[Empresa]]

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Teorica$Inicial_PG[[Empresa]]

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC[[Empresa]]
        Agregado_inicial =  Contable$Inicial_FC[[Empresa]]

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC[[Empresa]]
        Agregado_inicial = Teorica$Inicial_FC[[Empresa]]

      }
    }

    ### ------------------ Q: (COP/USD)------------------ ###
    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###
    if (Moneda == "USD"){
      ### --- Definir matriz: TRM cuadrada --- ###
      Q = aperm(replicate(dim(Agregado_inicial)[2],Matriz_simulaciones[c(1:dim(Agregado_inicial)[2]),"TRM_Promedio",c(1:dim(Agregado_inicial)[1])]),c(2,1,3))
      #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###
      #### --- PG inicial en dolares ----###
      Agregado_inicial = Agregado_inicial/t(Simulaciones[c(1:dim(Agregado_inicial)[2]),"TRM_Promedio",c(1:dim(Agregado_inicial)[1])])
      ########### ------------------ TRM ------------------ ###########
      for (Tiempo in c(1:dim(Agregado_inicial)[2])) {
        PG_inicial_ceros = matrix(0,nrow = dim(Agregado_inicial)[1],ncol = dim(Agregado_inicial)[2])
        PG_inicial_ceros[,Tiempo] = Agregado_inicial[,Tiempo]
        Sensibilidades_exposicion[,,Tiempo,"USD/LC"] = Sensibilidades_exposicion[,,Tiempo,"USD/LC"] - PG_inicial_ceros
      }
      ### --- Se pasa todas las sensibilidades a dolares nuevamente --- ###
      Q_factores = replicate(dim(Sensibilidades_exposicion)[[4]],Q)
      Sensibilidades_exposicion =Sensibilidades_exposicion/Q_factores
    }


  }

  Sensibilidad_TRM_T=t(apply(Sensibilidades_exposicion[,,,Factor],3,colMeans))[,-13]
  Tabla_final = Tablas_temporales(Sensibilidad = Sensibilidad_TRM_T)
  return(Tabla_final)
}

############ --------------- Agrega por segmentos ----------------- ##########
Resultados_segmentos_agregados = function(Segmento,Segmentos_info,Empresas,Contable,Teorica,Modo_contable,Simulaciones = Matriz_simulaciones,Patrimonios_completos,Tipo = 1,Participacion_accionaria= Participacion_accionaria_empresas,Cambio_unidades_tablas = F,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima ){
  if(Segmento == "Agregado"){
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_PG
        Agregado_inicial = Contable$Inicial_agregado_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_PG
        Agregado_inicial = Teorica$Inicial_agregado_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_FC
        Agregado_inicial = Contable$Inicial_agregado_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_FC
        Agregado_inicial = Teorica$Inicial_agregado_FC
      }
    }

    Agregacion_por_segmento = Sensibilidades_exposicion
    Patrimonio_por_segmento = Patrimonios_completos[grep(Patrimonios_completos[,"Empresa"],pattern = "Patrimonio_Agregado"),"Patrimonio"]
    PG_cero_por_segneto = Agregado_inicial


  } else {
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG
        Agregado_inicial = Contable$Inicial_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG
        Agregado_inicial = Teorica$Inicial_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC
        Agregado_inicial =  Contable$Inicial_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC
        Agregado_inicial = Teorica$Inicial_FC
      }
    }

    Segmentos = Segmentos_info
    Segmento = Segmento
    Empresas_a_agregrar = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]
    Agregacion_por_segmento = 0
    Patrimonio_por_segmento = 0
    PG_cero_por_segneto = 0
    ### --- Empresa --- ###
    ### ------- Horizonte agregacion ----- ####
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    ### ------- Agregacion ----- ###
    for (k in Empresas_a_agregrar){
      Cero_k = Agregado_inicial[[k]][,c(1:Horizonte_agregacion_final)]
      Empresa_k = Sensibilidades_exposicion[[k]][,c(1:Horizonte_agregacion_final),]
      Agregacion_por_segmento = Agregacion_por_segmento + ((Empresa_k)*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      PG_cero_por_segneto = PG_cero_por_segneto + (Cero_k*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      Patrimomio_k = Patrimonio_individual(Empresa = k,Patrimonios_completos = Patrimonios_completos)
      Patrimonio_por_segmento = Patrimonio_por_segmento + Patrimomio_k
    }
  }



  if(Cambio_unidades_tablas ==T){
    Info_unidades_empresa = Cambios_totales(Base_excel = Base_excel)

    Dim_sim_sen_acotar = dim(Agregacion_por_segmento)[2]
    Dim_sim_cambiar= dim(Matriz_simulaciones[,"TRM_Promedio",])

    for(j in (1:dim(Agregacion_por_segmento)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Agregacion_por_segmento)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/UN"){
        Agregacion_por_segmento[,,j] = (Agregacion_por_segmento[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))/365000

      }
    }

    for(j in (1:dim(Agregacion_por_segmento)[3])){
      Pos_item = grep(x = Info_unidades_empresa[,"Ticker"],pattern = dimnames(Agregacion_por_segmento)[[3]][j])
      if (Info_unidades_empresa[Pos_item,"Unidades"] == "USD/TON"){
        Agregacion_por_segmento[,,j] = (Agregacion_por_segmento[,,j]/t(Matriz_simulaciones[c(1:min(Dim_sim_cambiar[1],Dim_sim_sen_acotar)),"TRM_Promedio",]))

      }
    }
  }

  Resultados = NULL
  Resultados = list()
  Resultados[["Inicial"]] = PG_cero_por_segneto
  Resultados[["Sensibilidades"]] = Agregacion_por_segmento
  Resultados[["Patrimonio"]] = Patrimonio_por_segmento
  return(Resultados)
}


##################### -------------------------- Sensibilidades agregadas -------------------------- #####################

########### ------------ Saca la tabla de resultados agregados para todas las empresas ------------- #####
Tabla_sensibilidades_agregadas_segmentos = function(Tipo=1,Modo_contable=T,Contable = Resultados_agregacion_contable,Segmento,Segmentos_info ,Teorica = Resultados_agregacion_teorica,Empresas,Tipo_agregacion ="Completa",Participacion_accionaria=Participacion_accionaria_empresas,Nombre_unico = "Tablas_segmentadas",Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Simulaciones = Matriz_simulaciones){
  ### ------------- P&G ------------ ###
  if (Tipo == 1){
    ### ------------- Contable ------------ ###
    if (Modo_contable == TRUE){
      Sensibilidades_exposicion = Contable$Sensibilidades_PG
      Agregado_inicial = Contable$Inicial_PG
      Sensibilidades_agregadas = Contable$Sensibilidades_agregado_PG
    } else if( Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_exposicion = Teorica$Sensibilidades_PG
      Agregado_inicial = Teorica$Inicial_PG
      Sensibilidades_agregadas = Teorica$Sensibilidades_agregado_PG
    }
    ### ------------- Flujo de caja ------------ ###
  } else if(Tipo == 2) {
    if (Modo_contable == TRUE){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Sensibilidades_FC
      Agregado_inicial =  Contable$Inicial_FC
      Sensibilidades_agregadas = Contable$Sensibilidades_agregado_FC

    } else if (Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_exposicion = Teorica$Sensibilidades_FC
      Agregado_inicial = Teorica$Inicial_FC
      Sensibilidades_agregadas = Teorica$Sensibilidades_agregado_FC


    }
  }
  Segmentos = Segmentos_info
  Segmento = Segmento
  Empresas = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]


  ### ---- Agregación total: COP Todo ---- ###
  Info_tablas = Informacion_empresas[grep(as.character(Informacion_empresas[,"Empresa"]),pattern = paste0(Empresas,collapse = "|")),]
  Unidades_sens_cambio = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas)


  ## ------- Horizonte agregacion ----- ####
  Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)

  Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]


  for (y in (Empresas)){

    Agregado_inicial[[as.character(y)]] = Agregado_inicial[[as.character(y)]][,c(1:Horizonte_agregacion_final)]
    ### --- Acotar horizonte --- ###
    Sensibilidades_exposicion[[as.character(y)]] = Sensibilidades_exposicion[[as.character(y)]][,c(1:Horizonte_agregacion_final),]

    if (Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",y,"$")),"Moneda"] == "USD"){
      ### --- Agregar el PG a las empreas en dolares --- ##
      Sensibilidades_exposicion[[as.character(y)]][,,"USD/LC"] = Sensibilidades_exposicion[[as.character(y)]][,,"USD/LC"] + (Agregado_inicial[[as.character(y)]]/t(Simulaciones[,"TRM_Promedio",]))
    } else {

    }

  }

  ### ----  Unidades por empresa --- ###
  for (y in (Empresas)){
    ### ---- Agregación total: COP Todo ---- ###
    for (j in (1:length(Unidades_sens_cambio[,"Ticker"]))){
      Factor_transformar = as.character(Unidades_sens_cambio[,"Ticker"])[j]
      #print(Factor_transformar)
      if (( Unidades_sens_cambio[grep(Unidades_sens_cambio[,"Ticker"], pattern = Factor_transformar),"Unidades"] == "USD/UN" | Unidades_sens_cambio[grep(Unidades_sens_cambio[,"Ticker"], pattern = Factor_transformar),"Unidades"] == "USD/TON")){
        Sensibilidades_exposicion[[as.character(y)]][,,Factor_transformar] = (Sensibilidades_exposicion[[as.character(y)]][,,Factor_transformar]/t(Matriz_simulaciones[c(1:Horizonte_agregacion_final),grep(colnames(Matriz_simulaciones),pattern = "TRM_Promedio"),]))
      }

    }
    #### ---- Se multiplica por el peso ---- ###
    Sensibilidades_exposicion[[as.character(y)]] = Sensibilidades_exposicion[[as.character(y)]]*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",y,"$")),"Total"])
  }

   if (Tipo_agregacion == "Upstream"){
    Tablas_i = NULL
    for (j in (Empresas)) {
      #print(j)
      Matriz_i = Sensibilidades_exposicion[[as.character(j)]]
      if (Tipo == 1){
        Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,-13,"USD/LC"]))),no = 0),
                           Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Commodity"]))/360000)),no = 0),
                           Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "WTI")) != 0,yes = sum((colMeans((Matriz_i[,-13,"WTI"]))/360000)),no = 0),
                           Castilla = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Castilla")) != 0,yes = (sum((colMeans((Matriz_i[,-13,"Castilla"]))/360000))),no = 0),
                           Vasconia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Vasconia")) != 0,yes = (sum(colMeans((Matriz_i[,-13,"Vasconia"]))/360000)),no = 0),
                           South_Blend = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "South_Blend")) != 0,yes = sum((colMeans((Matriz_i[,-13,"South_Blend"]))/360000)),no = 0)
                           )
      } else {
        Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,,"USD/LC"]))),no = 0),
                             Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,,"Commodity"]))/360000)),no = 0),
                             Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "WTI")) != 0,yes = sum((colMeans((Matriz_i[,,"WTI"]))/360000)),no = 0),
                             Castilla = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Castilla")) != 0,yes = (sum((colMeans((Matriz_i[,,"Castilla"]))/360000))),no = 0),
                             Vasconia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Vasconia")) != 0,yes = (sum(colMeans((Matriz_i[,,"Vasconia"]))/360000)),no = 0),
                             South_Blend = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "South_Blend")) != 0,yes = sum((colMeans((Matriz_i[,,"South_Blend"]))/360000)),no = 0)
        )
        }
      Tablas_i = rbind(Tablas_i,Tabla_i)
    }
    Sensibilidades_agregadas = Tablas_i
    #Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Vasconia|WTI|Magdalena|South_Blend|Castilla")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Vasconia|WTI|Magdalena|South_Blend|Castilla")]/360)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")]/1000000)
    Nombres_empresas = as.character(Sensibilidades_agregadas[,1])
    Sensibilidades_agregadas = rbind(Sensibilidades_agregadas[-1],colSums(Sensibilidades_agregadas[-1]))
    Sensibilidades_agregadas = round(Sensibilidades_agregadas)
    Sensibilidades_agregadas = cbind(c(Nombres_empresas,"Agregado"),Sensibilidades_agregadas)
    colnames(Sensibilidades_agregadas)[1] = "Empresas"
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas[1],apply(Sensibilidades_agregadas[-1],2,round,1))

    Moneda = c(as.character(sapply(as.character(unlist(Tablas_i[1])),function(x){Info_tablas[grep(Info_tablas[,"Empresa"],pattern = paste0("^",x,"$")),"Moneda"]})),"-")
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas,Moneda)

    ### --- Codigo --- ###
    Tabla_sensibilidades = apply(Sensibilidades_agregadas, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
    Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
    colnames(Tabla_sensibilidades)[grep(colnames(Tabla_sensibilidades),pattern = "Empresas")] = "Compañia"
    rownames(Tabla_sensibilidades) = NULL
    Tabla_sensibilidades = Tabla_sensibilidades[,c(grep(colnames(Tabla_sensibilidades),pattern = "Compañia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Moneda"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "USD/LC"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Commodity"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "WTI"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Castilla"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Vasconia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "South_Blend"))]
    Unidades = as.data.frame(cbind("Unidades","-","USD (M)","kbd","kbd","kbd","kbd","kbd"))
    colnames(Unidades) = colnames(Tabla_sensibilidades)
    Tabla_sensibilidades = rbind(Unidades,Tabla_sensibilidades)
    rownames(Tabla_sensibilidades) = Tabla_sensibilidades[,1]
    Tabla_sensibilidades = Tabla_sensibilidades[,-1]

    colnames(Tabla_sensibilidades)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Moneda_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Moneda"))
    colnames(Tabla_sensibilidades)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#TRM_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "USD/LC"))
    colnames(Tabla_sensibilidades)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Brent_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Commodity"))
    colnames(Tabla_sensibilidades)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Brent_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "WTI"))
    colnames(Tabla_sensibilidades)[5] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Castilla_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diff.Castilla"))
    colnames(Tabla_sensibilidades)[6] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Vasconia_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diff.Vasconia"))
    colnames(Tabla_sensibilidades)[7] = as.character(tags$a(href = "#", onclick = paste0("$(","'#South_Blend_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diff.South Blend"))

  } else if (Tipo_agregacion == "Midstream"){
    Tablas_i = NULL
    for (j in (Empresas)) {
      #print(j)
      Matriz_i = Sensibilidades_exposicion[[as.character(j)]]
      if (Tipo == 1){
        Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,-13,"USD/LC"]))),no = 0),
                           Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Commodity"]))/360000)),no = 0),
                           Energia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Energia")) != 0,yes = sum(colMeans((Matriz_i[,-13,"Energia"]))),no = 0),
                           CPICOP = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "CPICOP")) != 0,yes = sum(colMeans((Matriz_i[,-13,"CPICOP"]))),no = 0))
      } else {
        Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,,"USD/LC"]))),no = 0),
                             Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,,"Commodity"]))/360000)),no = 0),
                             Energia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Energia")) != 0,yes = sum(colMeans((Matriz_i[,,"Energia"]))),no = 0),
                             CPICOP = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "CPICOP")) != 0,yes = sum(colMeans((Matriz_i[,,"CPICOP"]))),no = 0))
        }

      Tablas_i = rbind(Tablas_i,Tabla_i)
    }
    ### ------- Unidades --------- ###
    Sensibilidades_agregadas = Tablas_i
    #Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Commodity")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Commodity")]/360)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")]/1000000)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")]/1000000)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "CPICOP")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "CPICOP")]/1000000)

    Nombres_empresas = as.character(Sensibilidades_agregadas[,1])
    Sensibilidades_agregadas = rbind(Sensibilidades_agregadas[-1],colSums(Sensibilidades_agregadas[-1]))
    Sensibilidades_agregadas = round(Sensibilidades_agregadas)
    Sensibilidades_agregadas = cbind(c(Nombres_empresas,"Agregado"),Sensibilidades_agregadas)
    colnames(Sensibilidades_agregadas)[1] = "Empresas"
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas[1],apply(Sensibilidades_agregadas[-1],2,round,1))

    Moneda = c(as.character(sapply(as.character(unlist(Tablas_i[1])),function(x){Info_tablas[grep(Info_tablas[,"Empresa"],pattern = paste0("^",x,"$")),"Moneda"]})),"-")
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas,Moneda)

    ### --- Codigo --- ###
    Tabla_sensibilidades = apply(Sensibilidades_agregadas, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
    Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
    colnames(Tabla_sensibilidades)[grep(colnames(Tabla_sensibilidades),pattern = "Empresas")] = "Compañia"
    rownames(Tabla_sensibilidades) = NULL
    Tabla_sensibilidades = Tabla_sensibilidades[,c(grep(colnames(Tabla_sensibilidades),pattern = "Compañia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Moneda"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "USD/LC"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Energia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "CPICOP"))]
    Unidades = as.data.frame(cbind("Unidades","-","USD (M)","kWh (M)","COP (M)"))
    colnames(Unidades) = colnames(Tabla_sensibilidades)
    Tabla_sensibilidades = rbind(Unidades,Tabla_sensibilidades)
    rownames(Tabla_sensibilidades) = Tabla_sensibilidades[,1]
    Tabla_sensibilidades = Tabla_sensibilidades[,-1]

    colnames(Tabla_sensibilidades)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Moneda_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Moneda"))
    colnames(Tabla_sensibilidades)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#TRM_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "USD/LC"))
    colnames(Tabla_sensibilidades)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Energia_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Energia"))
    colnames(Tabla_sensibilidades)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#CPI_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "IPC COP"))



    } else if (Tipo_agregacion == "Downstream"){
    Tablas_i = NULL
    for (j in (Empresas)) {
      #print(j)
      Matriz_i = Sensibilidades_exposicion[[as.character(j)]]
      if (Tipo == 1){
        Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,-13,"USD/LC"]))),no = 0),
                           Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Commodity"]))/360000)),no = 0),
                           Gasolina = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "NYMEX_RBOB_1M")) != 0,yes = (sum(colMeans((Matriz_i[,-13,"NYMEX_RBOB_1M"]))/360000)/0.7),no = 0),
                           Diesel = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Nymex_Heating_Oil_1M")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Nymex_Heating_Oil_1M"]))/360000)),no = 0),
                           Energia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Energia")) != 0,yes = sum(colMeans((Matriz_i[,-13,"Energia"]))),no = 0),
                           PGR = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Spot,_Weighted_Average_USGC_-_PGR")) != 0,yes = sum(colMeans((Matriz_i[,-13,"Spot,_Weighted_Average_USGC_-_PGR"]))),no = 0))
        } else {
          Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,,"USD/LC"]))),no = 0),
                               Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,,"Commodity"]))/360000)),no = 0),
                               Gasolina = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "NYMEX_RBOB_1M")) != 0,yes = (sum(colMeans((Matriz_i[,,"NYMEX_RBOB_1M"]))/360000)/0.7),no = 0),
                               Diesel = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Nymex_Heating_Oil_1M")) != 0,yes = sum((colMeans((Matriz_i[,,"Nymex_Heating_Oil_1M"]))/360000)),no = 0),
                               Energia = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Energia")) != 0,yes = sum(colMeans((Matriz_i[,,"Energia"]))),no = 0),
                               PGR = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Spot,_Weighted_Average_USGC_-_PGR")) != 0,yes = sum(colMeans((Matriz_i[,,"Spot,_Weighted_Average_USGC_-_PGR"]))),no = 0))

          }
      Tablas_i = rbind(Tablas_i,Tabla_i)
      }
    ### ------- Unidades --------- ###
    Sensibilidades_agregadas = Tablas_i
    #Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Gasolina|Diesel")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Gasolina|Diesel")]/360)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")]/1000000)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")]/1000000)
    Nombres_empresas = as.character(Sensibilidades_agregadas[,1])
    Sensibilidades_agregadas = rbind(Sensibilidades_agregadas[-1],colSums(Sensibilidades_agregadas[-1]))
    Sensibilidades_agregadas = round(Sensibilidades_agregadas)
    Sensibilidades_agregadas = cbind(c(Nombres_empresas,"Agregado"),Sensibilidades_agregadas)
    colnames(Sensibilidades_agregadas)[1] = "Empresas"
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas[1],apply(Sensibilidades_agregadas[-1],2,round,1))

    Moneda = c(as.character(sapply(as.character(unlist(Tablas_i[1])),function(x){Info_tablas[grep(Info_tablas[,"Empresa"],pattern = paste0("^",x,"$")),"Moneda"]})),"-")
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas,Moneda)

    ### --- Codigo --- ###
    Tabla_sensibilidades = apply(Sensibilidades_agregadas, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
    Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
    colnames(Tabla_sensibilidades)[grep(colnames(Tabla_sensibilidades),pattern = "Empresas")] = "Compañia"
    rownames(Tabla_sensibilidades) = NULL
    Tabla_sensibilidades = Tabla_sensibilidades[,c(grep(colnames(Tabla_sensibilidades),pattern = "Compañia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Moneda"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "USD/LC"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Commodity"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Gasolina"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Diesel"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "PGR"))]
    Unidades = as.data.frame(cbind("Unidades","-","USD (M)","kbd","kbd","kbd","Toneladas"))
    colnames(Unidades) = colnames(Tabla_sensibilidades)
    Tabla_sensibilidades = rbind(Unidades,Tabla_sensibilidades)

    rownames(Tabla_sensibilidades) = Tabla_sensibilidades[,1]
    Tabla_sensibilidades = Tabla_sensibilidades[,-1]
    colnames(Tabla_sensibilidades)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Moneda_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Moneda"))
    colnames(Tabla_sensibilidades)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#TRM_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "USD/LC"))
    colnames(Tabla_sensibilidades)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Brent_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Commodity"))
    colnames(Tabla_sensibilidades)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Gasolina_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Gasolina"))
    colnames(Tabla_sensibilidades)[5] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Diesel_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diésel"))
    colnames(Tabla_sensibilidades)[6] = as.character(tags$a(href = "#", onclick = paste0("$(","'#PGR_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "PGR"))


    }
  return(Tabla_sensibilidades)
}


Tabla_sensibilidades_agregadas_completa = function(Tipo=1,Modo_contable=T,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Empresas,Tipo_agregacion ="Completa",Participacion_accionaria = Participacion_accionaria_empresas,Nombre_unico ="TABLAS_agregadas",Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima, Simulaciones = Matriz_simulaciones){
  ### ------------- P&G ------------ ###
  if (Tipo == 1){
    ### ------------- Contable ------------ ###
    if (Modo_contable == TRUE){
      Sensibilidades_exposicion = Contable$Sensibilidades_PG
      Agregado_inicial = Contable$Inicial_PG
      Sensibilidades_agregadas_total = Contable$Sensibilidades_agregado_PG
    } else if( Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_exposicion = Teorica$Sensibilidades_PG
      Agregado_inicial = Teorica$Inicial_PG
      Sensibilidades_agregadas_total = Teorica$Sensibilidades_agregado_PG
    }
    ### ------------- Flujo de caja ------------ ###
  } else if(Tipo == 2) {
    if (Modo_contable == TRUE){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Sensibilidades_FC
      Agregado_inicial =  Contable$Inicial_FC
      Sensibilidades_agregadas_total = Contable$Sensibilidades_agregado_FC

    } else if (Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_exposicion = Teorica$Sensibilidades_FC
      Agregado_inicial = Teorica$Inicial_FC
      Sensibilidades_agregadas_total = Teorica$Sensibilidades_agregado_FC


    }
  }


  ### ---- Agregación total: COP Todo ---- ###
  Info_tablas = Informacion_empresas[grep(as.character(Informacion_empresas[,"Empresa"]),pattern = paste0(Empresas,collapse = "|")),]
  Unidades_sens_cambio = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas)

  ## ------- Horizonte agregacion ----- ####
  Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
  Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]
  for (y in (Empresas)){

    Agregado_inicial[[as.character(y)]] = Agregado_inicial[[as.character(y)]][,c(1:Horizonte_agregacion_final)]
    ### --- Acotar horizonte --- ###
    Sensibilidades_exposicion[[as.character(y)]] = Sensibilidades_exposicion[[as.character(y)]][,c(1:Horizonte_agregacion_final),]

    if (Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",y,"$")),"Moneda"] == "USD"){
      ### --- Agregar el PG a las empreas en dolares --- ##
      Sensibilidades_exposicion[[as.character(y)]][,,"USD/LC"] = Sensibilidades_exposicion[[as.character(y)]][,,"USD/LC"] + (Agregado_inicial[[as.character(y)]]/t(Simulaciones[,"TRM_Promedio",]))
      } else {

      }

  }
  ### ----  Unidades por empresa --- ###
  for (y in (Empresas)){
    ### ---- Agregación total: COP Todo ---- ###
    for (j in (1:length(Unidades_sens_cambio[,"Ticker"]))){
      Factor_transformar = as.character(Unidades_sens_cambio[,"Ticker"])[j]
      #print(Factor_transformar)
      if ((Unidades_sens_cambio[grep(Unidades_sens_cambio[,"Ticker"], pattern = Factor_transformar),"Unidades"] == "USD/UN"|Unidades_sens_cambio[grep(Unidades_sens_cambio[,"Ticker"], pattern = Factor_transformar),"Unidades"] == "USD/TON")){
        Sensibilidades_exposicion[[as.character(y)]][,,Factor_transformar] = (Sensibilidades_exposicion[[as.character(y)]][,,Factor_transformar]/t(Matriz_simulaciones[c(1:Horizonte_agregacion_final),grep(colnames(Matriz_simulaciones),pattern = "TRM_Promedio"),]))
      }

    }
    ### --- Se multiplica por el factor de cada empresa --- ###
    Sensibilidades_exposicion[[as.character(y)]] = Sensibilidades_exposicion[[as.character(y)]]*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",y,"$")),"Total"])
  }

    Tablas_i = NULL
    ######## ------ Se saca la sensibilidad agregada ------- ####
      for (j in (Empresas)) {
        #print(j)
        Matriz_i = Sensibilidades_exposicion[[as.character(j)]]

        if (Tipo == 1){
          Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,-13,"USD/LC"]))),no = 0),
                             Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Commodity"]))/360000)),no = 0),
                             Gasolina = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "NYMEX_RBOB_1M")) != 0,yes = (sum(colMeans((Matriz_i[,-13,"NYMEX_RBOB_1M"]))/360000)/0.7),no = 0),
                             Diesel = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Nymex_Heating_Oil_1M")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Nymex_Heating_Oil_1M"]))/360000)),no = 0),
                             Castilla = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Castilla")) != 0,yes = sum((colMeans((Matriz_i[,-13,"Castilla"]))/360000)),no = 0))
          } else {
            Tabla_i = data.frame(Empresa = j,TRM = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "USD/LC")) != 0,yes = sum(colMeans((Matriz_i[,,"USD/LC"]))),no = 0),
                                 Brent = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Commodity")) != 0,yes = sum((colMeans((Matriz_i[,,"Commodity"]))/360000)),no = 0),
                                 Gasolina = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "NYMEX_RBOB_1M")) != 0,yes = (sum(colMeans((Matriz_i[,,"NYMEX_RBOB_1M"]))/360000)/0.7),no = 0),
                                 Diesel = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Nymex_Heating_Oil_1M")) != 0,yes = sum((colMeans((Matriz_i[,,"Nymex_Heating_Oil_1M"]))/360000)),no = 0),
                                 Castilla = ifelse(test = length(grep(dimnames(Matriz_i)[[3]],pattern = "Castilla")) != 0,yes = sum((colMeans((Matriz_i[,,"Castilla"]))/360000)),no = 0))

        }


        Tablas_i = rbind(Tablas_i,Tabla_i)
      }



    ### ------- Unidades --------- ###
    Sensibilidades_agregadas = Tablas_i
    #Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Gasolina|Diesel")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Brent|Gasolina|Diesel")]/360)
    Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "USD/LC")]/1000000)
    #Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")] = (Sensibilidades_agregadas[grep(colnames(Sensibilidades_agregadas),pattern = "Energia")]/1000000)
    Nombres_empresas = as.character(Sensibilidades_agregadas[,1])
    Sensibilidades_agregadas = rbind(Sensibilidades_agregadas[-1],colSums(Sensibilidades_agregadas[-1]))
    Sensibilidades_agregadas = round(Sensibilidades_agregadas)
    Sensibilidades_agregadas = cbind(c(Nombres_empresas,"Agregado"),Sensibilidades_agregadas)
    colnames(Sensibilidades_agregadas)[1] = "Empresas"
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas[1],apply(Sensibilidades_agregadas[-1],2,round,1))

    Moneda = c(as.character(sapply(as.character(unlist(Tablas_i[1])),function(x){Info_tablas[grep(Info_tablas[,"Empresa"],pattern = paste0("^",x,"$")),"Moneda"]})),"-")
    Sensibilidades_agregadas = cbind(Sensibilidades_agregadas,Moneda)

    ### --- Codigo --- ###
    Tabla_sensibilidades = apply(Sensibilidades_agregadas, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
    Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
    colnames(Tabla_sensibilidades)[grep(colnames(Tabla_sensibilidades),pattern = "Empresas")] = "Compañia"
    rownames(Tabla_sensibilidades) = NULL
    Tabla_sensibilidades = Tabla_sensibilidades[,c(grep(colnames(Tabla_sensibilidades),pattern = "Compañia"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Moneda"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "USD/LC"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Commodity"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Gasolina"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Diesel"),
                                                   grep(colnames(Tabla_sensibilidades),pattern = "Castilla"))]
    Unidades = as.data.frame(cbind("Unidades","-","USD (M)","kbd","kbd","kbd","kbd"))
    colnames(Unidades) = colnames(Tabla_sensibilidades)
    Tabla_sensibilidades = rbind(Unidades,Tabla_sensibilidades)
    rownames(Tabla_sensibilidades) = as.character(Tabla_sensibilidades[,1])
    Tabla_sensibilidades = Tabla_sensibilidades[,-1]
    Tabla_sensibilidades = as.data.frame(Tabla_sensibilidades)
    Tabla_sensibilidades$TRM = as.character(Tabla_sensibilidades$TRM)
    Tabla_sensibilidades[dim(Tabla_sensibilidades)[1],2] = as.character(prettyNum(round(as.numeric(sum(colMeans(Sensibilidades_agregadas_total[,-13,"USD/LC"]))/1000000)),big.mark=",",scientific=FALSE))

    colnames(Tabla_sensibilidades)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Moneda_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Moneda"))
    colnames(Tabla_sensibilidades)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#TRM_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "USD/LC"))
    colnames(Tabla_sensibilidades)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Brent_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Commodity"))
    colnames(Tabla_sensibilidades)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Gasolina_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Gasolina"))
    colnames(Tabla_sensibilidades)[5] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Diesel_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diésel"))
    colnames(Tabla_sensibilidades)[6] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Castilla_tabla_explicacion",Nombre_unico,"'",").modal('show')"), "Diff.Castilla"))


    return(Tabla_sensibilidades)
    }


Sensibilidades_temporales_visualizacion =function(Empresa,Tipo = 1,input){
  tagList(
    renderUI({
      ###### ------------ Caso A: Ya corrio matrices sensibilidades --------------- ####
      if(Corrio_total_tiempo == T){
        ###### ------------ Caso 2: No tiene factores de riesgo a cubrir --------------- ####
        if (length(as.character(Factores_disponibles_para_agregar(Empresas_activas = Empresa))) != 0 ){

          load(paste0(path,"Outputs/Resultados/Resultados_agregacion_dinamica_contable.Rdata"))
          Resultados_agregacion_dinamica_contable <<-Resultados_agregacion_dinamica_contable
          load(paste0(path,"Outputs/Resultados/Resultados_agregacion_dinamica_teorica.Rdata"))
          Resultados_agregacion_dinamica_teorica <<- Resultados_agregacion_dinamica_teorica

          tagList(
            pickerInput(
              inputId = paste0("Matriz_temporal_",Empresa,Tipo),
              label = "Seleccione un factor de riesgo:",
              choices = c(as.character(Factores_disponibles_para_agregar(Empresas_activas = Empresa))),
              options = list(
                style = "btn-primary")),
              renderDataTable(datatable(Sensibiilidades_temporales_moneda_funcional(Contable = Resultados_agregacion_dinamica_contable,Modo_contable = T,
                                                                                    Teorica = Resultados_agregacion_dinamica_teorica,
                                                                                    Simulaciones = Matriz_simulaciones,
                                                                                    Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,
                                                                                    Fecha_final = Filiales_correr[[1]]$Fecha_minima,
                                                                                    Empresa = Empresa,Factor = input[[paste0("Matriz_temporal_",Empresa,Tipo)]],
                                                                                    Informacion_empresas = Informacion_empresas,
                                                                                    Participacion_accionaria = Participacion_accionaria_empresas,
                                                                                    Patrimonios_completos = Patrimonios_completos,
                                                                                    Tipo=Tipo),
                                        selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:6))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                           dom = 'Bfrtip',buttons = list(
                                                                                                                             list(extend = 'copy',text = "Copiar",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Matriz sensibilidades")),
                                                                                                                             list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(Empresa,pattern = "_",replacement = " ")),
                                                                                                                                  messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                  title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Matriz sensibilidades")),
                                                                                                                             list(extend = 'pdf',text = "PDF",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Matriz sensibilidades")))))
            )
          )
        } else {
          ###### ------------ Caso 2: No tiene factores de riesgo a cubrir --------------- ####
          tagList(renderText(paste0(Empresa, " no tiene sensibilidades mensuales de los principales factores a cubrir. ")))
        }

    } else {
      ###### ------------ Caso B: No ha corrido matrices sensibilidad --------------- ####
      tagList(HTML('<p align="justify" <p style="font-family:verdana;"><br>
                   El cálculo de sensibilidades matriciales supone que un factor
                   de riesgo cambia unitariamente en un mes específico, mientras
                   para el resto de los meses, y para el resto de los factores,
                   no hay cambio. Las unidades de impacto de este movimiento se
                   expresan en denominaciones naturales para el factor de riesgo
                   (dólares, barriles, kWh).Nota: las columnas representan
                   los meses futuros de resultados, y las filas los periodos
                   futuros del factor de riesgo, sobre los cuales
                   se afectan esos precios en el futuro. Este análisis se reduce a los factores
                  de riesgo que se pueden cubrir.
                   </p></p>') ,
              HTML("Dado lo anterior, se estima que este proceso se demora entre 3 a 4 horas. Desea continuar"),
              sidebarMenu(menuItem("Ejecutar", tabName = "Ejecutar_temporales",icon = icon("play")),id = "tabs"))
    }
    }))
}

##################################------------ Sensibilidades ------------############################

######### ------------ Agregadas ------------ #########
Sensibilidades_empresas_agregadas_tabs = function(x,input){
  if (x == "Agregado"){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             box(title = "Agregado",solidHeader = T,status = "primary",height = 2000,width = 4000,
                 HTML(paste0('<button id="pdf" type="button" class="btn btn-default action-button" onclick="">
                             <img src=',paste0("Empresas/",gsub("Ecopetrol",pattern = "[[:space:]]",replacement = ""),".png"),' width = 90,height=30/>
                             </button>')),
                 HTML(paste0('<p align="justify"<p style="font-family:verdana;"> A continuacion puede encontrar informacion agregada. Esta agregación se encuentra en moneda funcional COP <br> <br> </p></p>')),

                 tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                        ##################################------------ Contable ------------############################
                        tabPanel(title = "P&G",
                                 ###### -------------------- P&G Contable  ------------------ #####
                                 tabBox(side = "right", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_seaasd",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_seaasd",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),h4(HTML('<strong><font color="#002e5b">Agregación contable</font></strong>')),HTML(paste0('<p align="justify" <p style="font-family:verdana;">Cálculos consistentes con la normativa internacional', ' para consolidación de resultados de empresas con distintas monedas contables, que es adoptada por el Grupo. Grupo: se toma el PyG mensual, y cuando está en moneda funcional dólar, se traduce a pesos con la tasa de cambio promedio del mes, respetando la participación accionaria en cada empresa incluida en el análisis.</p></p>')),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_seaasd",x),title = "Consolidación usando práctica contable."),
                                                 tabBox(side = "left", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_PG",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        ###### ---------- Paralelas ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_PG",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                                 ################# ------------------ Modal paralelo ----------------------- #################
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_agregado_PG",x),title = "Cambios unitarios iguales para todo plazo."),
                                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_completa(Nombre_unico = "TABLAS_agregadas_contable",Empresas = Empresas_activas_segmentos,
                                                                                                                                   Tipo_agregacion = "Completa",
                                                                                                                                   Tipo = 1,
                                                                                                                                   Modo_contable = T),
                                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:6))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")),
                                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")),
                                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")))))


                                                                                 ),Modales_tablas_sensibilidades_agregada(Nombre_unico = "TABLAS_agregadas_contable"),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>')),
                                                        ###### ---------- Distribucion ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_sensibilidad_agregado",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_sensibilidad_agregado",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                                 selectInput(inputId = paste0("Graficar_PG_contable_agregado",x),
                                                                             selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],
                                                                             choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],
                                                                             label = "Seleccione un indicador"),
                                                                 renderText(Nombres_unidades_HTML(Insumo_factor = gsub(input[[paste0("Graficar_PG_contable_agregado",x)]],pattern = " ",replacement = "_"))),
                                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_PG_contable_agregado",x)]]),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_PG_contable_agregado",x)]]),"Indice"],
                                                                                                                                    Valor = colSums(
                                                                                                                                      t(Resultados_segmentos_agregados(Segmento = "Agregado",Tipo = 1,
                                                                                                                                                                       Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                       Empresas = Empresas_activas_segmentos,
                                                                                                                                                                       Contable = Resultados_agregacion_contable,
                                                                                                                                                                       Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                       Modo_contable = T,Cambio_unidades_tablas = T,
                                                                                                                                                                       Patrimonios_completos = Patrimonios_completos,
                                                                                                                                                                       Participacion_accionaria = Participacion_accionaria_empresas)$Sensibilidades[,-dim(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[2],gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_PG_contable_agregado",x)]]),"Indice"],pattern = " ",replacement = "_")]))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                                        # ,
                                                        # ###### ---------- Matriz mensual ---------- #####
                                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_matriz_mensual_agregado",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_matriz_mensual_agregado",x),title = "Cambios unitarios diferenciando cada plazo."),
                                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 1,input = input)))
                                                        )),
                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_sensibilidad_fc",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),h4(HTML('<strong><font color="#002e5b">Agregación Teórica</font></strong>')),HTML('<p align="justify" <p style="font-family:verdana;">Cálculos en los que se cambia teóricamente a pesos la moneda funcional de aquéllas empresas que tienen dólar como moneda funcional, antes de consolidar resultados vía agregación directa. El cambio radica en considerar la posición neta en dólares (y no en pesos) al calcular el PyG de la diferencia en cambio.</p></p>'),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_sensibilidad_fc",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                 tabBox(side = "left", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_PG_teorica",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        ###### ---------- Paralelas ---------- #####
                                                        ###### ---------- Paralelas ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_PG_teorica",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_agregado_PG_teorica",x),title = "Cambios unitarios iguales para todo plazo."),
                                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_completa(Nombre_unico = "TABLAS_agregadas_teorica",Empresas = Empresas_activas_segmentos,
                                                                                                                                   Tipo_agregacion = "Completa",
                                                                                                                                   Tipo = 1,Modo_contable = F),
                                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:6))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Teorica")),
                                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Teoricas")),
                                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Teorica")))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>'),
                                                                 Modales_tablas_sensibilidades_agregada(Nombre_unico = "TABLAS_agregadas_teorica")),
                                                        ###### ---------- Distribucion ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_sensibilidad_agregado_teorica",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_sensibilidad_agregado_teorica",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                                 selectInput(inputId = paste0("Graficar_PG_teorico_agregado",x),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_teorica$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_teorica$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                                 renderText(Nombres_unidades_HTML(Insumo_factor = gsub(input[[paste0("Graficar_PG_teorico_agregado",x)]],pattern = " ",replacement = "_"))),
                                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_PG_teorico_agregado",x)]]),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_PG_teorico_agregado",x)]]),"Indice"],
                                                                                                                                    Valor = colSums(t(Resultados_segmentos_agregados(Segmento = x,Tipo = 1,
                                                                                                                                                                                     Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                                     Empresas = Empresas_activas_segmentos,
                                                                                                                                                                                     Contable = Resultados_agregacion_contable,
                                                                                                                                                                                     Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                                     Modo_contable = F,Cambio_unidades_tablas = T,
                                                                                                                                                                                     Patrimonios_completos = Patrimonios_completos,
                                                                                                                                                                                     Participacion_accionaria = Participacion_accionaria_empresas)$Sensibilidades[,-dim(Resultados_agregacion_teorica$Sensibilidades_agregado_PG)[2],gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_PG_teorico_agregado",x)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                                        # ,
                                                        # ###### ---------- Matriz mensual ---------- #####
                                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_matriz_mensual_agregado_teorica",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_matriz_mensual_agregado_teorica",x),title = "Cambios unitarios diferenciando cada plazo."),
                                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 1,input=input))
                                                        #          )
                                                        )))),
                        ##################################------------ Teorico ------------############################
                        tabPanel(title = "Flujo de caja",
                                 ###### -------------------- P&G Teorico  ------------------ #####
                                 tabBox(side = "right", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_FC_ag",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        ###### ---------- Paralelas ---------- #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_FC_ag",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_agregado_FC_ag",x),title = "Cambios unitarios iguales para todo plazo."),
                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_completa(Nombre_unico = "TABLAS_agregadas_flujo_caja",Empresas = Empresas_activas_segmentos,
                                                                                                                   Tipo_agregacion = "Completa",
                                                                                                                   Tipo = 2,
                                                                                                                   Modo_contable = T),
                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:6))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades FC")),
                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Flujo de caja")),
                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades FC")))))),
                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>')
                                                 ,Modales_tablas_sensibilidades_agregada(Nombre_unico = "TABLAS_agregadas_flujo_caja")),
                                        ###### ---------- Distribucion ---------- #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_sensibilidad_agregado_teorica_flujo_caja",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_sensibilidad_agregado_teorica_flujo_caja",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                 selectInput(inputId = paste0("Graficar_agregado_flujo_caja",x),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_FC)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_FC)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                 renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo_caja",x)]],"$")),"Indice"])),
                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo_caja",x)]],"$")),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo_caja",x)]],"$")),"Indice"],
                                                                                                                    Valor = colSums(t(Resultados_segmentos_agregados(Segmento = x,Tipo = 2,
                                                                                                                                                                     Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                     Empresas = Empresas_activas_segmentos,
                                                                                                                                                                     Contable = Resultados_agregacion_contable,
                                                                                                                                                                     Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                     Modo_contable = T,Cambio_unidades_tablas = T,
                                                                                                                                                                     Patrimonios_completos = Patrimonios_completos,
                                                                                                                                                                     Participacion_accionaria = Participacion_accionaria_empresas)$Sensibilidades[,,gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo_caja",x)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                        # ,
                                        # ###### ---------- Matriz mensual ---------- #####
                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_matriz_mensual_agregado_teorica_flujo_caja",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_matriz_mensual_agregado_teorica_flujo_caja",x),title = "Cambios unitarios diferenciando cada plazo."),
                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 2,input=input)))
                                        )))))
  } else {
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             box(title = "Agregado",solidHeader = T,height = 2000,status = "primary",width = 4000,
                 HTML(paste0('<button id="pdf" type="button" class="btn btn-default action-button" onclick="window.open(&#39;',paste0("Informes/",x,".pdf"),'&#39;)">
                             <img src=',paste0("Empresas/",gsub(x,pattern = "[[:space:]]",replacement = ""),".png"),' width = 90,height=30/>
                             </button>')),
                 HTML(paste0('<p align="justify"<p style="font-family:verdana;"> A continuacion puede encontrar informacion de agregada para el segmento ',x,". Los resultados que se presentan a continuación están en COP",' <br> <br> </p></p>')),
                 tabBox(side = "right", height = 1000,width = 850,selected = "P&G",
                        ##################################------------ Contable ------------############################
                        tabPanel(title = "P&G",
                                 ###### -------------------- P&G Contable  ------------------ #####
                                 tabBox(side = "right", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),h4(HTML('<strong><font color="#002e5b">Agregación contable</font></strong>')),HTML(paste0('<p align="justify" <p style="font-family:verdana;">Cálculos consistentes con la normativa internacional',' para consolidación de resultados de empresas con distintas monedas contables, que es adoptada por el Grupo. Grupo: se toma el PyG mensual, y cuando está en moneda funcional dólar, se traduce a pesos con la tasa de cambio promedio del mes, respetando la participación accionaria en cada empresa incluida en el análisis.</p></p>')),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_",x),title = "Consolidación usando práctica contable."),
                                                 tabBox(side = "left", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_contable_PG",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        ###### ---------- Paralelas ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_agregado_contable_PG",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_agregado_contable_PG",x),title = "Cambios unitarios iguales para todo plazo."),
                                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_1",x),Empresas = Empresas_activas_segmentos,Tipo = 1,Modo_contable= T,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x),
                                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:dim(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_1",x),Empresas = Empresas_activas_segmentos,Tipo = 1,Modo_contable= T,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x))[2]))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")),
                                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")),
                                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidades Contable")))
                                                                                           ))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>'),
                                                                 Modales_tablas_sensibilidades_agregada(Nombre_unico = paste0("Modales_1",x))),
                                                        ###### ---------- Distribucion ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_segmento_pg",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_segmento_pg",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                                 selectInput(inputId = paste0("Graficar_contable_segmentos_",x),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Resultados_segmentos_agregados_disponibles(Segmento = x,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],
                                                                             choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Resultados_segmentos_agregados_disponibles(Segmento = x,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                                 renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_contable_segmentos_",x)]],"$")),"Indice"])),
                                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_contable_segmentos_",x)]],"$")),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_contable_segmentos_",x)]],"$")),"Indice"],
                                                                                                                                    Valor = colSums(t(Resultados_segmentos_agregados(Segmento = x,Tipo = 1,
                                                                                                                                                                                     Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                                     Empresas = Empresas_activas_segmentos,
                                                                                                                                                                                     Contable = Resultados_agregacion_contable,
                                                                                                                                                                                     Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                                     Modo_contable = T,Cambio_unidades_tablas = T,
                                                                                                                                                                                     Patrimonios_completos = Patrimonios_completos,
                                                                                                                                                                                     Participacion_accionaria = Participacion_accionaria_empresas)$Sensibilidades[,-dim(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[2],
                                                                                                                                                                                    gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_contable_segmentos_",x)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                                        # ,
                                                        # ###### ---------- Matriz mensual ---------- #####
                                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_mensual_matriz_PG_cont",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_mensual_matriz_PG_cont",x),title = "Cambios unitarios diferenciando cada plazo."),
                                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 1,input=input))
                                                        #          )
                                                        )),
                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_sensibilidades",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),h4(HTML('<strong><font color="#002e5b">Agregación Teórica</font></strong>')),HTML('<p align="justify" <p style="font-family:verdana;">Cálculos en los que se cambia teóricamente a pesos la moneda funcional de aquéllas empresas que tienen dólar como moneda funcional, antes de consolidar resultados vía agregación directa. El cambio radica en considerar la posición neta en dólares (y no en pesos) al calcular el PyG de la diferencia en cambio.</p></p>'),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_sensibilidades",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                  tabBox(side = "left", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_PG_segmentos",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        ###### ---------- Paralelas ---------- #####
                                                        ###### ---------- Paralelas ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_PG_segmentos",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_PG_segmentos",x),title = "Cambios unitarios iguales para todo plazo."),
                                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_2",x),Empresas = Empresas_activas_segmentos,Tipo = 1,Modo_contable= F,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x),
                                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:dim(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_2",x),Empresas = Empresas_activas_segmentos,Tipo = 1,Modo_contable= F,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x))[2]))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad Teorica")),
                                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad Teorica")),
                                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad Teorica")))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>'),
                                                                 Modales_tablas_sensibilidades_agregada(Nombre_unico = paste0("Modales_2",x))),
                                                        ###### ---------- Distribucion ---------- #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_segmento_pg_teorico",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_segmento_pg_teorico",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                                 selectInput(inputId = paste0("Graficar_teorica_segmentos_",x),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                                 renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_teorica_segmentos_",x)]],"$")),"Indice"])),
                                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_teorica_segmentos_",x)]],"$")),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_teorica_segmentos_",x)]],"$")),"Indice"],
                                                                                                                                    Valor = colSums(t(Resultados_segmentos_agregados(Segmento = x,Tipo = 1,
                                                                                                                                                                                     Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                                     Empresas = Empresas_activas_segmentos,
                                                                                                                                                                                     Contable = Resultados_agregacion_contable,
                                                                                                                                                                                     Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                                     Modo_contable = F
                                                                                                                                                                                     ,Cambio_unidades_tablas = T,
                                                                                                                                                                                     Patrimonios_completos = Patrimonios_completos)$Sensibilidades[,-dim(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[2],gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],
                                                                                                                                                                                                             pattern = paste0("^",input[[paste0("Graficar_teorica_segmentos_",x)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                                        # ,
                                                        # ###### ---------- Matriz mensual ---------- #####
                                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_mensual_matriz_PG_teorica",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_mensual_matriz_PG_teorica",x),title = "Cambios unitarios diferenciando cada plazo."),
                                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 1,input=input))
                                                        #          )
                                                        )))

                                                 ),

                        ##################################------------ Teorico ------------############################
                        tabPanel(title = "Flujo de caja",
                                 ###### -------------------- P&G Teorico  ------------------ #####
                                 tabBox(side = "right", height = 800,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_FC_segmentos",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        ###### ---------- Paralelas ---------- #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_FC_segmentos",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("align-justify"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_FC_segmentos",x),title = "Cambios unitarios iguales para todo plazo."),
                                                 renderDataTable(datatable(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_3",x),Empresas = Empresas_activas_segmentos,Tipo = 2,Modo_contable= T,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x),
                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(columnDefs = list(list(className = 'dt-right', targets = c(1:dim(Tabla_sensibilidades_agregadas_segmentos(Nombre_unico = paste0("Modales_3",x),Empresas = Empresas_activas_segmentos,Tipo = 2,Modo_contable= T,Segmentos_info = Segmentos_empresas_informacion,Segmento = x,Tipo_agregacion = x))[2]))),searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad FC")),
                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(x,pattern = "_",replacement = " ")),
                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                     title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad Flujo de caja")),
                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(x,pattern = "_",replacement = " ")," - Sensibilidad FC")))))),
                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>El análisis de sensibilidad exhibe el cambio en el presupuesto de las empresas ante cambios unitarios de los factores de riesgo. El cálculo de sensibilidades paralelas supone que un factor de riesgo cambia unitariamente a través de todos los periodos futuros, mientras el resto de los factores se mantiene invariante. Las unidades de impacto de este movimiento se expresan en denominaciones naturales para el factor de riesgo (dólares, barriles, kWh).
                                                      Nota: estos cálculos, al considerar cambios paralelos en la curva de los factores, no presentan el riesgo generado por las posiciones netas en moneda distinta a la funcional. Esa precisión puede observarse en el análisis matricial.</p></p>'),
                                                 Modales_tablas_sensibilidades_agregada(Nombre_unico = paste0("Modales_3",x))),
                                        ###### ---------- Distribucion ---------- #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_segmento_fc_contable",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("bar-chart"),
                                                shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_segmento_fc_contable",x),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                 selectInput(inputId = paste0("Graficar_agregado_flujo",x),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = as.character(unlist(dimnames(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[3]])), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                 renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo",x)]],"$")),"Indice"])),
                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_agregado_flujo",x)]]),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^Ecopetrol$")),"Moneda"])],
                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo",x)]],"$")),"Indice"],
                                                                                                                    Valor = colSums(t(Resultados_segmentos_agregados(Segmento = x,Tipo = 2,
                                                                                                                                                                     Segmentos_info = Segmentos_empresas_informacion,
                                                                                                                                                                     Empresas = Empresas_activas_segmentos,
                                                                                                                                                                     Contable = Resultados_agregacion_contable,
                                                                                                                                                                     Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                     Modo_contable = T,
                                                                                                                                                                     Cambio_unidades_tablas = T,
                                                                                                                                                                     Patrimonios_completos = Patrimonios_completos)
                                                                                                                                      $Sensibilidades[,,gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_agregado_flujo",x)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))
                                        # ,
                                        # ###### ---------- Matriz mensual ---------- #####
                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_mensual_matriz_fc_contable",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_mensual_matriz_fc_contable",x),title = "Cambios unitarios diferenciando cada plazo."),
                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = x,Tipo = 2,input=input))
                                        #          )
                                        )))))
    }
}


######### ------------ Empresas ------------ #########
Sensibilidades_empresas_individual_tabs = function(Empresa,input){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',Empresa,'</font></strong>'))),
             box(title = "Sensibilidades",solidHeader = T,height = 2000,width = 4000,status = "primary",
                 HTML(paste0('<button id="pdf" type="button" class="btn btn-default action-button" onclick="window.open(&#39;',paste0("Informes/",Empresa,".pdf"),'&#39;)">
                             <img src=',paste0("Empresas/",gsub(Empresa,pattern = "[[:space:]]",replacement = ""),".png"),' width = 90,height=30/>
                             </button>')),
                 HTML(paste0('<p align="justify"<p style="font-family:verdana;"> A continuacion puede encontrar informacion de la empresa ',Empresa,". Esta empresa se encuentra en moneda funcional " ,Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],' <br> <br> </p></p>')),
                 tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                        tabPanel(title = "P&G"
                                 ,tabBox(side = "right", height = 800,width = 4000,
                                         tabPanel(icon = icon("signal"),title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_Empresa_PG",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                  ################# ------------------ Modal paralelo ----------------------- #################
                                                  shinyBS::bsTooltip(id = paste0("ID_aviso_Empresa_PG",Empresa),title = "Cambios unitarios iguales para todo plazo."),
                                                  checkboxGroupButtons(
                                                    inputId = paste0(Empresa,"_Seleccionado_s"), label = "Seleccione los factores que desee:",direction = "horizontal",individual = F,justified = F,width = "auto",selected = gsub(Items_sensibilidades(Empresa = Empresa),pattern = "_",replacement = " ")[c(1,2)],
                                                    choiceNames = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Items_sensibilidades(Empresa = Empresa)),collapse = "$|^"),"$"),"Nombre"],
                                                    choiceValues = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Items_sensibilidades(Empresa = Empresa)),collapse = "$|^"),"$"),"Indice"],
                                                    status = "primary",
                                                    checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon"))
                                                  ),
                                                  ################# ------------------ Modal paralelo ----------------------- #################
                                                  shinyBS::bsTooltip(id = paste0("ID_aviso",Empresa),title = "Cambios unitarios iguales para todo plazo."),
                                                  ### --- Seleccion de moneda --- ###
                                                  HTML('<strong><font color="#002e5b">Moneda</font></strong>'),
                                                  renderDataTable(datatable(Tabla_sensibilidades_paralelas(Nombre_unico = paste0("Tablas_individuales_PG",Empresa),Insumo_boton = input[[paste0(Empresa,"_Seleccionado_s")]],Empresa = Empresa,input = input,Moneda_resultante = 'USD',Tipo = 1,Moneda_empresa = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"]),
                                                                            selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                               dom = 'Bfrtip',buttons = list(
                                                                                                                                                                 list(extend = 'copy',text = "Copiar",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades")),
                                                                                                                                                                 list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(Empresa,pattern = "_",replacement = " ")),
                                                                                                                                                                      messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                      title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades")),
                                                                                                                                                                 list(extend = 'pdf',text = "PDF",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades")))))
                                                                  ),Modales_tablas_sensibilidades_inviduales(Nombre_unico = paste0("Tablas_individuales_PG",Empresa))),

                                         tabPanel(icon = icon("align-center"),title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_sensibilidad_invidi",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                  selectInput(inputId = paste0("Graficar_empresa_",Empresa),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],
                                                              choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                  ################# ------------------ Modal paralelo ----------------------- #################
                                                  shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_sensibilidad_invidi",Empresa),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                  renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_",Empresa)]],"$")),"Indice"])),
                                                  renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_",Empresa)]],"$")),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"])],
                                                                                   Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_",Empresa)]],"$")),"Indice"],
                                                                                                      Valor = colSums(t(Cambio_exposicion_grafica(Empresa,
                                                                                                                                          Moneda_empresa = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],
                                                                                                                                          Moneda_resultante = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],
                                                                                                                                          Simulaciones = Matriz_simulaciones,Tipo = 1)[,-dim(Matriz_simulaciones)[1],gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],
                                                                                                                                          pattern = paste0("^",input[[paste0("Graficar_empresa_",Empresa)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                  HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))

                                         # ,
                                         # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_Matriz_mensual",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                         #          shinyBS::bsTooltip(id = paste0("ID_aviso_Matriz_mensual",Empresa),title = "Cambios unitarios diferenciando cada plazo."),
                                         #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = Empresa,Tipo = 1,input=input))
                                         #          )
                                         )
                                 ),
                        ######## ------- Flujo de caja ----------- ###
                        tabPanel(title = "Flujo",
                                 tabBox(side = "right", height = 800,width = 4000,
                                        tabPanel(icon = icon("signal"),title = HTML(paste0('<strong><font color="#46555f">Paralela</font></strong> <a id=\"',paste0("ID_aviso_FLUJOS",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                 ################# ------------------ Modal paralelo ----------------------- #################
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_FLUJOS",Empresa),title = "Cambios unitarios iguales para todo plazo."),
                                                 checkboxGroupButtons(
                                                   inputId = paste0(Empresa,"_Seleccionado_flujo"), label = "Seleccione los factores que desee:",direction = "horizontal",individual = F,justified = F,width = "auto",selected = gsub(Items_sensibilidades(Empresa = Empresa),pattern = "_",replacement = " ")[c(1,2)],
                                                   choiceNames = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],
                                                   choiceValues = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Indice"],
                                                   status = "primary",
                                                   checkIcon = list(yes = icon("ok", lib = "glyphicon"), no = icon("remove", lib = "glyphicon"))
                                                 ),
                                                 ### --- Seleccion de moneda --- ###
                                                 HTML('<strong><font color="#002e5b">Moneda</font></strong>'),
                                                 switchInput(
                                                   inputId = paste0("Moneda_resultados_flujo_individual",Empresa),
                                                   value = TRUE
                                                   ,onLabel = "USD",offLabel = "COP"
                                                 ),
                                                 renderDataTable(datatable(Tabla_sensibilidades_paralelas(Nombre_unico =  paste0("Tablas_individuales_FC",Empresa),Insumo_boton = input[[paste0(Empresa,"_Seleccionado_flujo")]],Empresa = Empresa,input = input,Moneda_resultante = ifelse(test = input[[paste0("Moneda_resultados_flujo_individual",Empresa)]] == TRUE,yes = "USD",no = "COP"),Tipo = 2,Moneda_empresa = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"]),
                                                                           selection = list(target = "cell"),escape = F,extensions = 'Buttons',options = list(searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE,
                                                                                                                                                              dom = 'Bfrtip',buttons = list(
                                                                                                                                                                list(extend = 'copy',text = "Copiar",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades")),
                                                                                                                                                                list(extend = 'excel',text = "Excel",sheetName = paste0(gsub(Empresa,pattern = "_",replacement = " ")),
                                                                                                                                                                     messageBottom = paste0("Fecha de actualización: ", Sys.Date()),
                                                                                                                                                                     title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades")),
                                                                                                                                                                list(extend = 'pdf',text = "PDF",title = paste0(gsub(Empresa,pattern = "_",replacement = " ")," - Sensibilidades"))))
                                                                           )),Modales_tablas_sensibilidades_inviduales(Nombre_unico = paste0("Tablas_individuales_FC",Empresa))),

                                        tabPanel(icon = icon("align-center"),title = HTML(paste0('<strong><font color="#46555f">Distribución sensibilidad</font></strong> <a id=\"',paste0("ID_aviso_distribucion_sensibilidad_invididual_fc",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_distribucion_sensibilidad_invididual_fc",Empresa),title = "Distribución de la incertidumbre en la sensibilidad paralela."),
                                                 selectInput(inputId = paste0("Graficar_empresa_Flujo_individual",Empresa),selected = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"][1],
                                                             choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(gsub(x = Items_sensibilidades(Empresa = Empresa), pattern = " ",replace = "_"),collapse = "$|^"),"$")),"Nombre"],label = "Seleccione un indicador"),
                                                 renderText(Nombres_unidades_HTML(Insumo_factor = Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_Flujo_individual",Empresa)]],"$")),"Indice"])),
                                                 renderPlotly(Graficar_histograma(Moneda = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = input[[paste0("Graficar_empresa_Flujo_individual",Empresa)]]),"Indice"],pattern = " ",replacement = "_") ),paste0("Unidades_",Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"])],
                                                                                  Datos = data.frame(Indicador= Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_Flujo_individual",Empresa)]],"$")),"Indice"],
                                                                                                     Valor = colSums(t(Cambio_exposicion_grafica(Empresa,Moneda_empresa = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],Moneda_resultante = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],Simulaciones = Matriz_simulaciones,Tipo = 2)[,,gsub(Nombres_shiny[grep(Nombres_shiny[,"Nombre"],pattern = paste0("^",input[[paste0("Graficar_empresa_Flujo_individual",Empresa)]],"$")),"Indice"],pattern = " ",replacement = "_")]))))),
                                                 HTML('<p align="justify" <p style="font-family:verdana;"><br>Distribución de la sensibilidad (análisis paralelo) al factor seleccionado. Se nota que este valor no es constante, sino que presenta incertidumbre según la naturaleza del negocio, representada en el modelo de riesgo de la empresa.</p></p>'))

                                        # ,
                                        # tabPanel(title = HTML(paste0('<strong><font color="#46555f">Matriz mensual</font></strong> <a id=\"',paste0("ID_aviso_matriz_mensual_invididual_fc",Empresa),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("th"),
                                        #          shinyBS::bsTooltip(id = paste0("ID_aviso_matriz_mensual_invididual_fc",Empresa),title = "Cambios unitarios diferenciando cada plazo."),
                                        #          do.call(tagList,Sensibilidades_temporales_visualizacion(Empresa = Empresa,Tipo = 2,input=input)))
                                        )))))

}



######### ------------ UI ------------ #########
Sensibilidades_empresas = function(x,input,session){
  ################# ------------------- Agregacion --------------- #################
  if (x == "Agregado"){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">Agregado y Segmentos</font></strong>'))),
             tabBox(side = "right", height = 2100,width = 4000,selected = "Agregado",
                    do.call(tabsetPanel, lapply(c("Agregado",c(as.character(unlist(Segmentos_activos_empresas(Empresas = Empresas_activas_segmentos,Segmentos = Segmentos_empresas_load)["Segmento"])))),function(y){Sensibilidades_empresas_agregadas_tabs(x = y,input = input)}))))
    } else if (x != "Agregado" | x!= "Ecopetrol"){
        ################# ------------------- Empresas --------------- #################
    ### --- Tabs dinamicos: De agregacion dinamicos --- ###
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             do.call(tagList, lapply(c(x),function(z){Sensibilidades_empresas_individual_tabs(Empresa = z,input = input)})))
    }
  }






############################### -------------------- Riesgo ------------------- ###############################
Coberturas_empresas_totales_componentes <- function(Factores_cubrir,Nivel_cobertura,Tipo,Contable=Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = T ,Empresa,Moneda,Simulaciones = Matriz_simulaciones) {

  if (Empresa == "Ecopetrol CB"){
    Simulaciones = Cortador_matriz_simulaciones(Empresa = "Barranca",Matriz_Fechas = Matriz_Fechas,Simulaciones_cortar = Simulaciones)

    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_PG
      Agregado_inicial = Contable$Ecopetrol_CB$Inicial_PG
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_FC
      Agregado_inicial =  Contable$Ecopetrol_CB$Inicial_FC
    }
  } else {
    Simulaciones = Simulaciones

    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Contable$Inicial_PG[[Empresa]]

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Teorica$Inicial_PG[[Empresa]]

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC[[Empresa]]
        Agregado_inicial =  Contable$Inicial_FC[[Empresa]]

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC[[Empresa]]
        Agregado_inicial = Teorica$Inicial_FC[[Empresa]]

      }
    }

  }


  ### --- Se ajusta las dimensiones ---- ###
  Sensibilidades_exposicion = Sensibilidades_exposicion[,-dim(Sensibilidades_exposicion)[2],]
  Agregado_inicial = Agregado_inicial[,-dim(Agregado_inicial)[2]]

  ###################################################################################
  ##############################  GRADIENT DESCENT  #################################
  ###################################################################################
  ## ------------ Definimos los parámetros de coberturas: ------------- ###
  Fechas = dimnames(Simulaciones)[[1]][-1]
  CoberturasPorAno=length(Fechas)
  nMeses = length(Fechas)
  nSim = dim(Simulaciones)[[3]]
  ## EBITDA_Base
  ### --- Aversion --- ###
  Aversion = A1
  # Número de coberturas por año (4 es trimestral, 12 mensual, etc.)
  ### ----------- Espacios a llenar ---------- ###
  params=rep(Nivel_cobertura,CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
  ### ------- Limites de las coberturas -------- ###
  lims=cbind(rep(rep(0,length(Factores_cubrir)),CoberturasPorAno),rep(rep(0.9,length(Factores_cubrir)),CoberturasPorAno));rownames(lims)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)));colnames(lims)=c("Min","Max")
  # lims[,2] =  c((Sensibilidaded_PG_T$Limite))
  ### -------- P&G Inicial sin alterar  ---------- ###
  EBITDA_Base = rowSums(Agregado_inicial)
  #################### ---------------------- Forwards  -------------------  ####################
  ########## -------------------- TRM ------------------- ##########
  if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")]) == 1){
    SensibilidadDolar = colMeans(Sensibilidades_exposicion[,,"USD/LC"])
    ### ------------------ TRM ----------------- ###
    nDolar=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")],1:nMeses)]*SensibilidadDolar
    nDolar=matrix(rep(nDolar,nSim),nrow=nSim,byrow=T)
    Sensibilidades_exposicion[,,"USD/LC"] = Sensibilidades_exposicion[,,"USD/LC"] - nDolar
  }

  ### ------------------ Brent ----------------- ###
  if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")])== 1){
    SensibilidadBrent = colMeans(Sensibilidades_exposicion[,,"Commodity"])
    nBrent=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")],1:nMeses)]*SensibilidadBrent
    nBrent=matrix(rep(nBrent,nSim),nrow=nSim,byrow=T)
    Sensibilidades_exposicion[,,"Commodity"] = Sensibilidades_exposicion[,,"Commodity"] - nBrent
  }


  ### ------------------ Nymex Heating  ----------------- ###
  if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "Nymex_Heating_Oil_1M")])== 1){
    SensibilidadHO = colMeans(Sensibilidades_exposicion[,,"Nymex_Heating_Oil_1M"])
    nHO=params[names(params)%in%paste("Nymex_Heating_Oil_1M",1:nMeses)]*as.numeric(SensibilidadHO)
    nHO=matrix(rep(nHO,nSim),nrow=nSim,byrow=T)
    Sensibilidades_exposicion[,,"Nymex_Heating_Oil_1M"] = Sensibilidades_exposicion[,,"Nymex_Heating_Oil_1M"] - nHO
  }

  ########## -------------------- RBOB ------------------- ##########
  if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "NYMEX_RBOB_1M")])== 1){
    SensibilidadRBOB = colMeans(Sensibilidades_exposicion[,,"NYMEX_RBOB_1M"])
    nRBOB=params[names(params)%in%paste("NYMEX_RBOB_1M",1:nMeses)]*as.numeric(SensibilidadRBOB)
    nRBOB=matrix(rep(nRBOB,nSim),nrow=nSim,byrow=T)
    Sensibilidades_exposicion[,,"NYMEX_RBOB_1M"] = Sensibilidades_exposicion[,,"NYMEX_RBOB_1M"] - nRBOB
  }

  Var_agregado = Var_componentes(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = as.character(Empresa)),Matriz_sensibilidad = Sensibilidades_exposicion,Matriz_simulaciones  = Simulaciones)

  Var_agregado = Var_agregado[-length(Var_agregado)]
  colnames(Var_agregado) = c(Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"], pattern = paste0("^",paste0(colnames(Var_agregado),collapse = "$|^"),"$"))),"Nombre"])
  Var_agregado = round(Var_agregado)
  Var_agregado = Var_agregado[which(round(Var_agregado)!=0)]
  Var_agregado = Var_agregado[which(round(Var_agregado) !=1)]
  Var_agregado = Var_agregado[which(round(Var_agregado) !=-1)]
  Var_agregado = cbind(Var_agregado,(100-sum(Var_agregado)))
  colnames(Var_agregado) = c(colnames(Var_agregado)[-length(colnames(Var_agregado))],"Otros")
  # Diesel = Var_agregado[grep(colnames(Var_agregado),pattern = "Heating")] + Var_agregado[grep(colnames(Var_agregado),pattern = "USGC vs HO")]
  # Gasolina = Var_agregado[grep(colnames(Var_agregado),pattern = "^RBOB$")] + Var_agregado[grep(colnames(Var_agregado),pattern = "UNL87 vs RBOB")]
  #
  # Var_agregado= cbind(Var_agregado,Diesel,Gasolina)
  # colnames(Var_agregado)[grep(colnames(Var_agregado),pattern = "Heating")] = "Diésel"
  # colnames(Var_agregado)[grep(colnames(Var_agregado),pattern = "RBOB")] = "Gasolina"

  a = cbind(rownames(t(Var_agregado)),t(Var_agregado))
  a = as.data.frame(a)
  rownames(a) = NULL
  colnames(a) = c("x","y")
  dtf = a
  dtf$y = as.numeric(as.character(dtf$y))
  dtf$y = dtf$y/100
  colores = c("USD/LC" = "#ed7800", "Commodity" = "#003a70")

  colores = colores[c(1:nrow(dtf))]
  names(colores) = dtf$x
  Var_agregado= suppressWarnings(ggplot(dtf, aes(x, y)) + geom_bar(stat = "identity", aes(fill = x), legend = FALSE) + geom_text(aes(label = paste(round(y,digits = 2) * 100, "%"),
                                                                                                                                     vjust = 0.1),size = 5) + scale_y_continuous("Participación en riesgo %", labels = percent_format())  + theme_bw() + theme(legend.background = element_rect(fill="white", size=01, linetype="solid"),legend.title = element_text(colour="black", size=5, face="bold"),legend.text = element_text(colour="black", size=5, face="bold"),title =  element_text(face = "bold", color = "#004237"),panel.grid.major = element_blank(), panel.border = element_blank(), plot.title = element_text(hjust = 0.5),axis.text=element_text(size=10,face="bold"),axis.title=element_text(size=20,face="bold"),legend.position = "none")+labs(title="")+labs(x="")+labs(y="\n") + scale_fill_manual("legend", values = colores))
  return(ggplotly(Var_agregado))
}

Var_agregado = function(Vector_sensibilidades,Matriz_sensibilidad,Simulaciones){
  Var_agregado= Var_componentes(Vector_sensibilidades =Vector_sensibilidades,
                                Matriz_sensibilidad = Matriz_sensibilidad ,
                                Matriz_simulaciones = Simulaciones)
  Var_agregado = Var_agregado[-length(Var_agregado)]
  colnames(Var_agregado) = c(Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"], pattern = paste0("^",paste0(colnames(Var_agregado),collapse = "$|^"),"$"))),"Nombre"])
  Var_agregado = round(Var_agregado)
  Var_agregado = Var_agregado[which(round(Var_agregado)!=0)]
  Var_agregado = Var_agregado[which(round(Var_agregado) !=1)]
  Var_agregado = Var_agregado[which(round(Var_agregado) !=-1)]
  Var_agregado = cbind(Var_agregado,(100-sum(Var_agregado)))
  colnames(Var_agregado) = c(colnames(Var_agregado)[-length(colnames(Var_agregado))],"Otros")
  # Diesel = Var_agregado[grep(colnames(Var_agregado),pattern = "Heating")] + Var_agregado[grep(colnames(Var_agregado),pattern = "USGC vs HO")]
  # Gasolina = Var_agregado[grep(colnames(Var_agregado),pattern = "^RBOB$")] + Var_agregado[grep(colnames(Var_agregado),pattern = "UNL87 vs RBOB")]
  #
  # Var_agregado= cbind(Var_agregado,Diesel,Gasolina)
  # colnames(Var_agregado)[grep(colnames(Var_agregado),pattern = "Heating")] = "Diésel"
  # colnames(Var_agregado)[grep(colnames(Var_agregado),pattern = "RBOB")] = "Gasolina"

  a = cbind(rownames(t(Var_agregado)),t(Var_agregado))
  a = as.data.frame(a)
  rownames(a) = NULL
  colnames(a) = c("x","y")
  dtf = a
  dtf$y = as.numeric(as.character(dtf$y))
  dtf$y = dtf$y/100
  colores = c("USD/LC" = "#ed7800", "Commodity" = "#003a70")

  colores = colores[c(1:nrow(dtf))]
  names(colores) = dtf$x
  Var_agregado= suppressWarnings(ggplot(dtf, aes(x, y)) + geom_bar(stat = "identity", aes(fill = x), legend = FALSE) + geom_text(aes(label = paste(round(y,digits = 2) * 100, "%"),
                                                                                                                                     vjust = 0.1),size = 5) + scale_y_continuous("Participación en riesgo %", labels = percent_format())  + theme_bw() + theme(legend.background = element_rect(fill="white", size=01, linetype="solid"),legend.title = element_text(colour="black", size=5, face="bold"),legend.text = element_text(colour="black", size=5, face="bold"),title =  element_text(face = "bold", color = "#004237"),panel.grid.major = element_blank(), panel.border = element_blank(), plot.title = element_text(hjust = 0.5),axis.text=element_text(size=10,face="bold"),axis.title=element_text(size=20,face="bold"),legend.position = "none")+labs(title="")+labs(x="")+labs(y="\n") + scale_fill_manual("legend", values = colores))
  return(ggplotly(Var_agregado))

}

### -------- Tablas medidas de Riesgo -------- ###
Medidas_riesgo_agregada = function(PG_inicial,Aversion,Patrimonio,Nombre_unico = "Generico",Moneda =" COP"){
  Equivalente = (E0(mean(Ut(1+PG_inicial/Patrimonio ,Aversion)),Aversion)-1)*Patrimonio
  Medidas_riesgo = cbind(mean(PG_inicial),sd(PG_inicial),
                         t(as.data.frame(quantile(x = PG_inicial,c(0.25,0.75)))),
                         fExtremes::VaR(PG_inicial,alpha = 0.05),CVaR(PG_inicial,alpha = 0.05),
                         Equivalente,(sum(PG_inicial<0)/length(PG_inicial))*100)
  Medidas_riesgo = as.data.frame(Medidas_riesgo)
  colnames(Medidas_riesgo) = c('Media','SD','25%',"75%","VAR-5%","CVAR-5%","Equivalente de certeza","Probabilidad de pérdida")
  if (Moneda == "USD"){
    Medidas_riesgo[-8] = round(Medidas_riesgo[-8]/1000000,digits = 2)
  } else {
    Medidas_riesgo[-8] = round(Medidas_riesgo[-8]/1000000000)
  }
  Medidas_riesgo = apply(Medidas_riesgo, 2, function(x) {prettyNum(x,big.mark=",",scientific=FALSE)})
  Medidas_riesgo[8] = paste0(Medidas_riesgo[8],"%")
  Medidas_riesgo = as.data.frame(Medidas_riesgo)
  Medidas_riesgo = t(Medidas_riesgo)
  row.names(Medidas_riesgo) = NULL
  #### ------ Asigna enlaces dinamicos ----- ####
  colnames(Medidas_riesgo)[1] = as.character(tags$a(href = "#", onclick = paste0("$(","'#media_explicacion",Nombre_unico,"'",").modal('show')"), "Media de la distribución"))
  colnames(Medidas_riesgo)[2] = as.character(tags$a(href = "#", onclick = paste0("$(","'#SD_explicacion",Nombre_unico,"'",").modal('show')"), "SD"))
  colnames(Medidas_riesgo)[3] = as.character(tags$a(href = "#", onclick = paste0("$(","'#P25_explicacion",Nombre_unico,"'",").modal('show')"), "25%"))
  colnames(Medidas_riesgo)[4] = as.character(tags$a(href = "#", onclick = paste0("$(","'#P75_explicacion",Nombre_unico,"'",").modal('show')"), "75%"))
  colnames(Medidas_riesgo)[5] = as.character(tags$a(href = "#", onclick = paste0("$(","'#VAR_explicacion",Nombre_unico,"'",").modal('show')"), "VAR-5%"))
  colnames(Medidas_riesgo)[6] = as.character(tags$a(href = "#", onclick = paste0("$(","'#CVAR_explicacion",Nombre_unico,"'",").modal('show')"), "CVAR-5%"))
  colnames(Medidas_riesgo)[7] = as.character(tags$a(href = "#", onclick = paste0("$(","'#EQ_explicacion",Nombre_unico,"'",").modal('show')"), "Equivalente de certeza"))
  colnames(Medidas_riesgo)[8] = as.character(tags$a(href = "#", onclick = paste0("$(","'#Prob_explicacion",Nombre_unico,"'",").modal('show')"), "Probabilidad de pérdida"))
  return(Medidas_riesgo)
}


Modales_riesgo = function(Nombre_unico){
  tagList(
    ##### -------------------- Modales ------------------ #####
    ### -----------------   Media  ----------------- ###
    bsModal(id = paste0("media_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Media</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Percentil 50% de la distribución de resultados.
                  <br>'),
            tags$head(tags$style("#media_explicacion .modal-footer{display:none}"))),
    ### -----------------     Desviacion  ----------------- ###
    bsModal(id = paste0("SD_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Desviación Estándar</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Desviación Estándar de la distribución de resultados.<br>'),
            tags$head(tags$style("#SD_explicacion .modal-footer{display:none}"))),
    ### -----------------     Percentil 25  ----------------- ###
    bsModal(id = paste0("P25_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Percentil 25%</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Percentil 25% de la distribución de resultados.
                  <br>'),
            tags$head(tags$style("#P25_explicacion .modal-footer{display:none}"))),
    ### -----------------     Percentil 75  ----------------- ###
    bsModal(id = paste0("P75_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Percentil 75%</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Percentil 75% de la distribución de resultados.
                  <br>'),
            tags$head(tags$style("#P75_explicacion .modal-footer{display:none}"))),
    ### -----------------  VAR ----------------- ###
    bsModal(id = paste0("VAR_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">VAR</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Percentil 5% de la distribución de resultados. <br>'),
            tags$head(tags$style("#VAR_explicacion .modal-footer{display:none}"))),
    ### -----------------  CVAR ----------------- ###
    bsModal(id = paste0("CVAR_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">CVAR</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;"><b>(I)</b>
                  Promedio de las simulaciones que se encuentran en el percentil 5% inferior.<br>'),
            tags$head(tags$style("#CVAR_explicacion .modal-footer{display:none}"))),
    ### -----------------  EQcerteza ----------------- ###
    bsModal(id = paste0("EQ_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Equivalente de certeza</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Media ajustada por riesgo. Este cálculo representa el valor certero de resultados
                  que sería equivalente a la distribución riesgosa, desde la óptica de un inversionista
                  con una aversión moderada al riesgo.<br>'),
            tags$head(tags$style("#EQ_explicacion .modal-footer{display:none}"))),
    ### -----------------  EQcerteza ----------------- ###
    bsModal(id = paste0("Prob_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Probabilidad de pérdida</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  La Probabilidad de que el resultado sea negativo.<br>'),
            tags$head(tags$style("#Prob_explicacion .modal-footer{display:none}"))))

}

Modales_tablas_sensibilidades_inviduales = function(Nombre_unico){
  tagList(
    ##### -------------------- Modales ------------------ #####
    ### -----------------   Moneda funcional  ----------------- ###
    bsModal(id = paste0("Unidades_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Unidades </font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">Unidades de denominación de
                la exposición. M: millones.
                  <br>'),
            tags$head(tags$style("#Unidades_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("Cambios_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Cambios (Delta) </font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Cambios: "Delta" aplicado a cada factor de riesgo
                  para estimar el impacto en los resultados.
                  <br>'),
            tags$head(tags$style("#TRM_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("TRM_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">TRM - Sensibilidad</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                Impacto por un cambio de un peso por dólar
                (en paralelo para toda la curva forward).
                Se fuerza un cambio en el mes de cierre para evitar
                exhibir el impacto de la posición neta en el primer mes.
                  <br>'),
            tags$head(tags$style("#TRM_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("Brent_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Brent - Sensibilidad</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                 Brent: Exposición (en kb).
                  El impacto sobre el presupuesto mensual
                  ante un cambio de un dólar por kb
                  (en paralelo en toda la curva futura)
                  es este número si la Moneda es USD, o
                  este número multiplicado por la tasa de
                  cambio, si es COP.
                  <br>'),
            tags$head(tags$style("#Brent_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("Brent_tabla_explicacion",Nombre_unico),"",
                    title = (HTML(paste0('<strong><font color="#002e5b">Brent - Sensibilidad</font></strong>'))),
                    HTML( '<p align="justify" <p style="font-family:verdana;">
                 Brent: Exposición (en barriles).
                  El impacto sobre el presupuesto mensual
                  ante un cambio de un dólar por barril
                  (en paralelo en toda la curva futura)
                  es este número si la Moneda es USD, o
                  este número multiplicado por la tasa de
                  cambio, si es COP.
                  <br>'),
                    tags$head(tags$style("#Brent_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("Energia_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Energía - Sensibilidad</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                Impacto en $COP por un cambio de un peso
                por kWh en toda la curva forward. Se puede interpretar
                  como la exposición (en kWh anuales) al precio de bolsa.
                  <br>'),
            tags$head(tags$style("#Energia_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("IPC_Colombia_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Inflación Colombia - Sensibilidad</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">Exposición a inflación colombiana.
                Se calcula como el impacto sobre el
                  presupuesto mensual ante un cambio de 1% en la inflación futura.
                  <br>'),
            tags$head(tags$style("#IPC_Colombia_tabla_explicacion .modal-footer{display:none}"))),
    bsModal(id = paste0("PGR_Colombia_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">PGR - Sensibilidad</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">Exposición (en toneladas).
              El impacto sobre el presupuesto mensual ante un cambio de un dólar por tonelada
              (en paralelo en toda la curva futura) es este número si la Moneda es USD, o
              este número multiplicado por la tasa de cambio, si es COP.
                  <br>'),
            tags$head(tags$style("#PGR_Colombia_tabla_explicacion .modal-footer{display:none}")))
    )

}


Modales_tablas_sensibilidades_agregada = function(Nombre_unico){
  tagList(
    ##### -------------------- Modales ------------------ #####
    ### -----------------   Moneda funcional  ----------------- ###
    bsModal(id = paste0("Moneda_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Moneda funcional</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                   Moneda funcional de cada empresa.
                  <br>'),
            tags$head(tags$style("#Moneda_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------     Explicacion TRM  ----------------- ###
    bsModal(id = paste0("TRM_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición TRM</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Impacto en $COP por un cambio de un peso por dólar en toda la curva forward.
                  Se fuerza un cambio en el mes de cierre para evitar exhibir el impacto de la posición neta
                  en el primer mes. El resultado en esta columna puede interpretarse
                  como la exposición anual (en dólares).<br>'),
            tags$head(tags$style("#TRM_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------     Explicacion Brent ----------------- ###
    bsModal(id = paste0("Brent_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Brent</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en miles de barriles diarios) a Brent. El impacto sobre el presupuesto anual
                  en $COP por un cambio de un dólar por barril en toda la curva futura se podría estimar
                  multiplicando esta exposición por 365 días al año y la tasa de cambio.
                  <br>'),
            tags$head(tags$style("#Brent_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------     Exposición Gasolina  ----------------- ###
    bsModal(id = paste0("Gasolina_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Gasolina</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en miles de barriles diarios) a UNL87. El impacto sobre el presupuesto anual en $COP
                  por un cambio de un dólar por barril en toda la curva futura se podría estimar
                  multiplicando esta exposición por 365 días al año y la tasa de cambio.
                  <br>'),
            tags$head(tags$style("#Gasolina_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición Diésel ----------------- ###
    bsModal(id = paste0("Diesel_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Diésel</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                 Exposición (en miles de barriles diarios) a USGC. El impacto sobre el
                 presupuesto anual en $COP por un cambio de un dólar por barril en toda la curva
                 futura se podría estimar multiplicando esta exposición por 365 días al año
                 y la tasa de cambio.<br>'),
            tags$head(tags$style("#Diesel_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición Castilla ----------------- ###
    bsModal(id = paste0("Castilla_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Castilla </font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en miles de barriles diarios) al diferencial de Castilla contra Brent.
                  El impacto sobre el presupuesto anual en $COP por un cambio de un dólar por
                  barril en toda la curva futura del diferencial se podría estimar multiplicando
                  esta exposición por 365 días al año y la tasa de cambio. <br>'),
            tags$head(tags$style("#Castilla_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición Vasconia ----------------- ###
    bsModal(id = paste0("Vasconia_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Vasconia</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en miles de barriles diarios) al diferencial de Vasconia contra Brent.
                  El impacto sobre el presupuesto anual en $COP por un cambio de un dólar por
                  barril en toda la curva futura del diferencial se podría estimar multiplicando
                  esta exposición por 365 días al año y la tasa de cambio.<br>'),
            tags$head(tags$style("#Vasconia_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición South Blend ----------------- ###
    bsModal(id = paste0("South_Blend_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición South Blend</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en miles de barriles diarios) al diferencial de South Blend contra Brent.
                  El impacto sobre el presupuesto anual en $COP por un cambio de un dólar por
                  barril en toda la curva futura del diferencial se podría estimar multiplicando
                  esta exposición por 365 días al año y la tasa de cambio.<br>'),
            tags$head(tags$style("#South_Blend_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición energia ----------------- ###
    bsModal(id = paste0("Energia_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición Energía</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Impacto en $COP por un cambio de un peso por kWh en toda la curva forward.
                  Se puede interpretar como la exposición (en kWh anuales) al precio de bolsa.” <br>'),
            tags$head(tags$style("#Energia_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición energia ----------------- ###
    bsModal(id = paste0("CPI_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición IPC Colombia</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición a inflación colombiana. Se calcula como el impacto sobre el presupuesto anual
                  en $COP por un cambio de 1% en la inflación futura <br>'),
            tags$head(tags$style("#CPI_tabla_explicacion .modal-footer{display:none}"))),
    ### -----------------  Exposición PGR ----------------- ###
    bsModal(id = paste0("PGR_tabla_explicacion",Nombre_unico),"",
            title = (HTML(paste0('<strong><font color="#002e5b">Exposición PGR</font></strong>'))),
            HTML( '<p align="justify" <p style="font-family:verdana;">
                  Exposición (en toneladas anuales) a PGR. El impacto sobre el presupuesto anual en $COP por un
                  cambio de un dólar por tonelada en toda la curva futura se podría estimar multiplicando esta
                  exposición por la tasa de cambio.<br>'),
            tags$head(tags$style("#PGR_tabla_explicacion .modal-footer{display:none}"))))

}


### --- Esta funcion: presenta el histograma, y tablas  ---- ###
Riesgo_visulizacion = function(Moneda,Datos,Patrimonio,Aversion,Nombre_unico,Simulaciones = Matriz_simulaciones){
  tagList(
    renderUI({
      if( Moneda == "USD"){
        Datos = data.frame(Indicador="Empresa",Valor = rowSums((Datos/t(Simulaciones[c(1:dim(Datos)[2]),"TRM_Promedio",]))))
      } else {
        Datos = data.frame(Indicador="Empresa",Valor = rowSums(Datos))
        }

    tagList(    ### ---- Histograma - Agregado ---- ###
      renderPlotly(Graficar_histograma(Moneda = Moneda,Datos = Datos)),
      ### ---- Medidas de riesgo - x ---- ###
      renderDataTable(datatable(selection = list(target = "cell"),
                                Medidas_riesgo_agregada(Nombre_unico = Nombre_unico,
                                                        PG_inicial = Datos[["Valor"]],
                                                        Aversion = Aversion,
                                                        Patrimonio = Patrimonio,Moneda = Moneda),
                                escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
      ### ---- Modales - texto ---- ###
      Modales_riesgo(Nombre_unico = Nombre_unico))})
    )
}




Riesgo_empresas_agregadas_tabs = function(x,input){
  if (x == "Agregado"){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
      box(title = "Agregado",solidHeader = T,status = "primary",width = 4000,height = 1000,
       tabBox(side = "right", height = 1000,width = 850,selected = "P&G",
        #################################------------ Contable ------------############################
         tabPanel(title = "P&G",
          ###### -------------------- P&G Contable  ------------------ #####
           tabBox(side = "right", height = 1000,width = 850,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_agregads",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
             tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_agregads",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
              shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_agregads",x),title = "Consolidación usando práctica contable."),
               tabBox(side = "left", height = 500,width = 4000,selected = "Contable",
               #### ---- Agregacion - Contable ---- ####
                 tabBox(side = "right", height = 500,width = 4000,selected = "Total",
                  tabPanel(title = "Total", icon = icon("area-chart"),
                  #### ---- Resultados ---- ####
                  tagList(
                    HTML('Distribución de la utilidad antes de impuestos utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                    do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                               Datos = Resultados_agregacion_contable$Inicial_agregado_PG[,-dim(Resultados_agregacion_contable$Inicial_agregado_PG)[2]],
                                                               Patrimonio = Patrimonio_agregado,
                                                               Aversion = A1,Nombre_unico = "Total_PG_contable")))),
                  ### ---- Riesgo por componentes ---- ###
                  tabPanel(title = "Componentes", icon = icon("pie-chart"),
                    tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                            HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                 El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                 a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                 parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                 de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                 del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                 columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                 se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                 de los demás factores.</p></p>'),
                      renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas_activas_segmentos),
                                              Matriz_sensibilidad = Resultados_agregacion_contable$Sensibilidades_agregado_PG[,-dim(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[[2]],],
                                              Simulaciones = Matriz_simulaciones[c(1:dim(Resultados_agregacion_contable$Sensibilidades_agregado_PG)[2]),,]
                                              ))))))),

             ###### -------------------- Flujo de caja: Contable  ------------------ #####
            tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_ag",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
            shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_ag",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
              tabBox(side = "left", height = 500,width = 4000,selected = "Paralelas",
                  #### ---- Agregacion - Contable ---- ####
                 tabBox(side = "right", height = 500,width = 4000,selected = "Total",
                  tabPanel(title = "Total", icon = icon("area-chart"),
                    #### ---- Resultados ---- ####
                    tagList(
                      HTML('Distribución de la utilidad antes de impuestos utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                     do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                               Datos =Resultados_agregacion_teorica$Inicial_agregado_PG[,-dim(Resultados_agregacion_contable$Inicial_agregado_PG)[2]],
                                                               Patrimonio = Patrimonio_agregado,
                                                               Aversion = A1,Nombre_unico = "Total_PG_teorico")))),
                    ### ---- Riesgo por componentes ---- ###
              tabPanel(title = "Componentes", icon = icon("pie-chart"),
                       tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                               HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                    El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                    a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                    parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                    de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                    del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                    columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                    se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                    de los demás factores.</p></p>'),
                renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas_activas_segmentos),
                                          Matriz_sensibilidad = Resultados_agregacion_teorica$Sensibilidades_agregado_PG[,-dim(Resultados_agregacion_teorica$Sensibilidades_agregado_PG)[[2]],],
                                          Simulaciones = Matriz_simulaciones[c(1:dim(Resultados_agregacion_teorica$Sensibilidades_agregado_PG)[2]),,])) ))))))),

                        ##################################------------ Teorico ------------############################
        tabPanel(title = "Flujo de caja",
          ###### -------------------- Contable  ------------------ #####
           tabBox(side = "right", height = 500,width = 4000,selected = "Total",
            tabPanel(title = "Total", icon = icon("area-chart"),
              #### ---- Resultados ---- ####
              tagList(
                HTML('Flujo de caja utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
              do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                  Datos = Resultados_agregacion_contable$Inicial_agregado_FC[,-dim(Resultados_agregacion_contable$Inicial_agregado_FC)[2]],
                                                  Patrimonio = Patrimonio_agregado,
                                                  Aversion = A1,Nombre_unico = "Total_FC_agregado")))),
            #### ---- Riesgo por componentes ---- ###
            tabPanel(title = "Componentes", icon = icon("pie-chart"),
                     tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                             HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                  El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                  a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                  parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                  de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                  del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                  columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                  se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                  de los demás factores.</p></p>'),

              renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Empresas_activas_segmentos),
                                        Matriz_sensibilidad = Resultados_agregacion_contable$Sensibilidades_agregado_FC[,-dim(Resultados_agregacion_contable$Sensibilidades_agregado_FC)[[2]],],
                                        Simulaciones = Matriz_simulaciones[c(1:dim(Resultados_agregacion_contable$Sensibilidades_agregado_FC)[2]),,])) )))))))
    } else {
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             box(title = "Agregado",solidHeader = T,status = "primary",width = 4000,height = 1000,
                 tabBox(side = "right", height = 1000,width = 850,selected = "P&G",
                        ##################################------------ Contable ------------############################
                        tabPanel(title = "P&G",
                                 ###### -------------------- P&G Contable  ------------------ #####
                                 tabBox(side = "right", height = 1000,width = 850,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_a",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        tabPanel(HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_a",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_individual_a",x),title = "Consolidación usando práctica contable."),
                                                  tabBox(side = "left", height = 500,width = 4000,selected = "Contable",
                                                        #### ---- Agregacion - Contable ---- ####
                                                        tabBox(side = "right", height = 500,width = 4000,selected = "Total",
                                                          tabPanel(title = "Total", icon = icon("area-chart"),
                                                                        ### ---- Histograma - Agregado ---- ###
                                                                        renderUI({
                                                                          assign(envir = .GlobalEnv,x = paste0("Agregado_PG_contable_riesgo",x),value = Resultados_segmentos_agregados(Segmento = x,Tipo = 1,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,
                                                                                                                                                             Modo_contable = T,Patrimonios_completos = Patrimonios_completos))
                                                                          #### ---- Resultados --- ###
                                                                          tagList(
                                                                            HTML('Distribución de la utilidad antes de impuestos utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                                                                          do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                                                                              Datos = get(paste0('Agregado_PG_contable_riesgo',x))[["Inicial"]][,-dim(get(paste0('Agregado_PG_contable_riesgo',x))[["Inicial"]])[[2]]],
                                                                                                              Patrimonio = get(paste0('Agregado_PG_contable_riesgo',x))[["Patrimonio"]],
                                                                                                              Aversion = A1,Nombre_unico = paste0("Total_PG_contable",x))))}
                                                                          )
                                                                   ),
                                                          ### ---- Riesgo por componentes ---- ###
                                                          tabPanel(title = "Componentes", icon = icon("pie-chart"),
                                                                   tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                                                                           HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                                                                El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                                                                a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                                                                parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                                                                de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                                                                del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                                                                columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                                                                se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                                                                de los demás factores.</p></p>'),
                                                                           renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Segmentos_empresas_informacion[!is.na(Segmentos_empresas_informacion[,grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),
                                                                                                  Matriz_sensibilidad = get(paste0('Agregado_PG_contable_riesgo',x))[["Sensibilidades"]][,-dim(get(paste0('Agregado_PG_contable_riesgo',x))[["Sensibilidades"]])[[2]],],
                                                                                                  Simulaciones = Matriz_simulaciones[c(1:dim(get(paste0('Agregado_PG_contable_riesgo',x))[["Sensibilidades"]][,,])[2]),,]))))))),

                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                 tabBox(side = "left", height = 500,width = 4000,selected = "Paralelas",
                                                        #### ---- Agregacion - Contable ---- ####
                                                        tabBox(side = "right", height = 500,width = 4000,selected = "Total",
                                                               tabPanel(title = "Total", icon = icon("area-chart"),
                                                                        renderUI({
                                                                          assign(envir = .GlobalEnv,x = paste0("Agregado_PG_teorica_riesgo",x),value = Resultados_segmentos_agregados(Segmento = x,
                                                                                                                                                                                      Tipo = 1,
                                                                                                                                                                                      Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos,
                                                                                                                                                                                      Contable = Resultados_agregacion_contable,
                                                                                                                                                                                      Teorica = Resultados_agregacion_teorica,
                                                                                                                                                                                      Modo_contable = F,
                                                                                                                                                                                      Patrimonios_completos = Patrimonios_completos))
                                                                          #### ---- Resultados --- ###
                                                                          tagList(
                                                                            HTML('Flujo de caja utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                                                                          do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                                                                              Datos = get(paste0('Agregado_PG_teorica_riesgo',x))[["Inicial"]][,-dim(get(paste0('Agregado_PG_teorica_riesgo',x))[["Inicial"]])[[2]]],
                                                                                                              Patrimonio = get(paste0('Agregado_PG_teorica_riesgo',x))[["Patrimonio"]],
                                                                                                              Aversion = A1,Nombre_unico = paste0("Total_PG_teorico",x))))})),
                                                               tabPanel(title = "Componentes", icon = icon("pie-chart"),
                                                                        #### ---- Riesgo por componentes ---- ###
                                                                        tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                                                                                HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                                                                     El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                                                                     a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                                                                     parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                                                                     de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                                                                     del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                                                                     columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                                                                     se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                                                                     de los demás factores.</p></p>'),

                                                                        renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,
                                                                                                  Empresas = Segmentos_empresas_informacion[!is.na(Segmentos_empresas_informacion[,grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),
                                                                                                  Matriz_sensibilidad = get(paste0("Agregado_PG_teorica_riesgo",x))[["Sensibilidades"]][,-dim(get(paste0('Agregado_PG_teorica_riesgo',x))[["Sensibilidades"]])[[2]],],
                                                                                                  Simulaciones = Matriz_simulaciones[c(1:dim(get(paste0("Agregado_PG_teorica_riesgo",x))[["Sensibilidades"]])[[2]]),,])) ))))))),
                        ##################################------------ Teorico ------------############################
                        tabPanel(title = "Flujo de caja",
                          ###### -------------------- Contable  ------------------ #####
                            tabBox(side = "right", height = 500,width = 4000,selected = "Total",
                                tabPanel(title = "Total", icon = icon("area-chart"),
                                         renderUI({
                                           assign(envir = .GlobalEnv,x = paste0("Agregado_FC_contable_riesgo",x),value = Resultados_segmentos_agregados(Segmento = x,Tipo = 2,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = T,Patrimonios_completos = Patrimonios_completos))
                                          tagList(
                                            HTML('Flujo de caja utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                                           do.call(tagList,Riesgo_visulizacion(Moneda = "COP",
                                                                               Datos =get(paste0('Agregado_FC_contable_riesgo',x))[["Inicial"]][,-dim(get(paste0('Agregado_FC_contable_riesgo',x))[["Inicial"]])[[2]]],
                                                                               Patrimonio = get(paste0('Agregado_FC_contable_riesgo',x))[["Patrimonio"]],
                                                                               Aversion = A1,Nombre_unico = paste0("Total_FC_agregado",x))))})),
                                tabPanel(title = "Componentes", icon = icon("pie-chart"),
                                #### ---- Riesgo por componentes ---- ###
                                tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                                        HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                             El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                             a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                             parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                             de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                             del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                             columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                             se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                             de los demás factores.</p></p>'),
                                                 renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = Segmentos_empresas_informacion[!is.na(Segmentos_empresas_informacion[,grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),grep(colnames(Segmentos_empresas_informacion),pattern =  paste0("^",x,"$"))]),
                                                                          Matriz_sensibilidad = get(paste0("Agregado_FC_contable_riesgo",x))[["Sensibilidades"]][,-dim(get(paste0('Agregado_FC_contable_riesgo',x))[["Sensibilidades"]])[[2]],],
                                                                          Simulaciones = Matriz_simulaciones[c(1:dim(get(paste0("Agregado_FC_contable_riesgo",x))[["Sensibilidades"]])[2]),,])) )))))))
    }
}



Riesgo_empresas_individual_tabs = function(Empresa,input){
      ######################### --------------- Empresas ------------------- ################
      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',Empresa,'</font></strong>'))),
               box(title = "Riesgo",solidHeader = T,height = 1800,width = 4000,status = "primary",
                   HTML(paste0('<button id="pdf" type="button" class="btn btn-default action-button" onclick="window.open(&#39;',paste0("Informes/",Empresa,".pdf"),'&#39;)">
                               <img src=',paste0("Empresas/",gsub(Empresa,pattern = "[[:space:]]",replacement = ""),".png"),' width = 90,height=30/></button>')),
                   HTML(paste0('<p align="justify"<p style="font-family:verdana;"> A continuacion puede encontrar informacion de la empresa ',Empresa,". Esta empresa se encuentra en moneda funcional " ,Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],' <br> <br> </p></p>')),
                   tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                          tabPanel(title = "P&G",tabBox(side = "right", height = 1000,width = 4000,
                                                        ### -------------- Riesgo Total ------------###
                                                        tabPanel(title = "Total", icon = icon("area-chart"),
                                                                 ### --- Resultados --- ###
                                                                 tagList(HTML('Distribución de la utilidad antes de impuestos utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                                                                 do.call(tagList,Riesgo_visulizacion(Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],
                                                                                                     Datos = Resultados_agregacion_contable$Inicial_PG[[as.character(Empresa)]][,-dim(Resultados_agregacion_contable$Inicial_PG[[as.character(Empresa)]])[2]],
                                                                                                     Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                                     Aversion = A1,Nombre_unico = paste0("Total_PG_empresa",Empresa))))),
                                                        ### -------------- Riesgo  ------------###
                                                        tabPanel(title = "Componentes", icon = icon("pie-chart"),
                                                                 tagList(HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                                                                         HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                                                              El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                                                              a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                                                              parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                                                              de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                                                              del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                                                              columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                                                              se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                                                              de los demás factores.</p></p>'),
                                                                         renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = as.character(Empresa)),
                                                                                           Matriz_sensibilidad = Resultados_agregacion_contable$Sensibilidades_PG[[as.character(Empresa)]][,-dim(Resultados_agregacion_contable$Sensibilidades_PG[[as.character(Empresa)]])[2],],
                                                                                           Simulaciones = Matriz_simulaciones)))))),
                          tabPanel(title = "Flujo",tabBox(side = "right", height = 1000,width = 4000,
                                                          tabPanel(title = "Total", icon = icon("area-chart"),
                                                                   ### --- Resultados --- ###
                                                                   tagList(HTML('Flujo de caja utilizando las simulaciones de los factores de riesgo y el modelo de presupuesto.'),
                                                                   do.call(tagList,Riesgo_visulizacion(Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa,"$")),"Moneda"],
                                                                                                       Datos = Resultados_agregacion_contable$Inicial_FC[[as.character(Empresa)]][,-dim(Resultados_agregacion_contable$Inicial_FC[[as.character(Empresa)]])[2]],
                                                                                                       Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                                       Aversion = A1,Nombre_unico = paste0("Total_FC_empresa",Empresa))))),
                                                          #### ---- Riesgo por componentes ---- ###
                                                          tabPanel(title = "Componentes", icon = icon("pie-chart"),
                                                                   tagList(
                                                                     HTML(paste0('<strong><font color="#002e5b">Riesgo por Componentes</font></strong>')),
                                                                     HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                                                                        de la empresa en sus componentes, representados con los factores de riesgo.
                                                                          El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                                                                          a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                                                                          parcialmente riesgos, o a aumentarlos. Específicamente, se toma la matriz de covarianza de la matriz
                                                                          de “pérdidas” (definida como la sensibilidad paralela a cada factor multiplicada por el movimiento
                                                                          del factor en cada simulación). El resultado de contribución para cada factor es la suma de su
                                                                          columna, como porcentaje de la suma de todos los componentes de la matriz. Un número negativo
                                                                          se da cuando el impacto típico de un factor tiene correlación negativa con el impacto típico
                                                                          de los demás factores.</p></p>'),
                                                                     renderPlotly(Var_agregado(Vector_sensibilidades = Cambios_agregados(Base_excel = Base_excel,Empresas = as.character(Empresa)),
                                                                                             Matriz_sensibilidad = Resultados_agregacion_contable$Sensibilidades_FC[[as.character(Empresa)]][,-dim(Resultados_agregacion_contable$Sensibilidades_FC[[as.character(Empresa)]])[2],],
                                                                                             Simulaciones = Matriz_simulaciones)) )))))))

}




##################### -------------------------- Unificacion Riesgo -------------------------- #####################
Riesgo_empresas = function(x,input,session){
  if (x == "Agregado"){
    ### --- Tabs dinamicos: De agregacion dinamicos --- ###
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">Agregado y Segmentos</font></strong>'))),
             tabBox(side = "right", height = 1800,width = 4000,selected = "Agregado",
                    do.call(tabsetPanel, lapply(c("Agregado",c(as.character(unlist(Segmentos_activos_empresas(Empresas = Empresas_activas_segmentos,Segmentos = Segmentos_empresas_load)["Segmento"])))),function(y){Riesgo_empresas_agregadas_tabs(x = y,input = input)}))))
  } else if (x == "Ecopetrol"){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             tabBox(side = "right", height = 1900,width = 4000,selected = HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol S.A.",'</font></strong>')),
                    ### ---------- Barranca --------- ###
                    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Barrancabermeja",'</font></strong>'))),
                             do.call(tagList, lapply(c("Barranca"),function(z){Riesgo_empresas_individual_tabs(Empresa = z,input = input)}))),
                    ### ---------- Ecopetrol --------- ###
                    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol Sin GRB",'</font></strong>'))),
                             do.call(tagList, lapply(c("Ecopetrol"),function(z){Riesgo_empresas_individual_tabs(Empresa = z,input = input)}))),
                    ### ---------- Ecopetrol agregado --------- ###
                    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol S.A.",'</font></strong>'))),
                             do.call(tagList, lapply(c("Ecopetrol CB"),function(z){Riesgo_empresas_individual_tabs(Empresa = z,input = input)})))))
  } else {
    ### --- Tabs dinamicos: De agregacion dinamicos --- ###
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             do.call(tagList, lapply(c(x),function(z){Riesgo_empresas_individual_tabs(Empresa = z,input = input)})))
  }
}



Coberturas_empresas_totales <- function(Factores_cubrir,Nivel_cobertura,Tipo,Modo_contable = T,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Empresa,Moneda,Simulaciones = Matriz_simulaciones, Cobertura = "Futuros",Insumos_puts_brent= NA,Insumos_puts_TRM = NA,Insumos_call_brent = NA, Insumos_call_TRM = NA,Puts_Brent = F,Puts_TRM = F, Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos) {
  Participacion_accionaria = Participacion_empresas(Excel = paste0(path,"/Inputs/Parametros/Parametros.xlsx"))
  Patrimonios_completos <- as.data.frame(read_excel(paste0(path,"/Inputs/Parametros/Parametros.xlsx"),sheet = "Patrimonios"))
  if(Empresa == "Agregado"){

    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)

    Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]

    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_PG
        Agregado_inicial = Contable$Inicial_agregado_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_PG
        Agregado_inicial = Teorica$Inicial_agregado_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_FC
        Agregado_inicial = Contable$Inicial_agregado_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_FC
        Agregado_inicial = Teorica$Inicial_agregado_FC
      }
    }

    Agregacion_por_segmento = Sensibilidades_exposicion
    Patrimonio_por_segmento = Patrimonios_completos[grep(Patrimonios_completos[,"Empresa"],pattern = "Patrimonio_Agregado"),"Patrimonio"]
    PG_cero_por_segneto = Agregado_inicial

  } else if(Empresa == "Upstream"|Empresa == "Midstream"|Empresa=="Downstream") {
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]

    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG
        Agregado_inicial = Contable$Inicial_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG
        Agregado_inicial = Teorica$Inicial_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC
        Agregado_inicial =  Contable$Inicial_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC
        Agregado_inicial = Teorica$Inicial_FC
      }
    }

    Segmentos = Segmentos_info
    Segmento = Empresa
    Empresas_a_agregrar = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]
    Agregacion_por_segmento = 0
    Patrimonio_por_segmento = 0
    PG_cero_por_segneto = 0
    ### --- Empresa --- ###
    ### ------- Horizonte agregacion ----- ####
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    ### ------- Agregacion ----- ###
    for (k in Empresas_a_agregrar){
      Cero_k = Agregado_inicial[[k]][,c(1:Horizonte_agregacion_final)]
      Empresa_k = Sensibilidades_exposicion[[k]][,c(1:Horizonte_agregacion_final),]
      Agregacion_por_segmento = Agregacion_por_segmento + ((Empresa_k)*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      PG_cero_por_segneto = PG_cero_por_segneto + (Cero_k*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      Patrimomio_k = Patrimonio_individual(Empresa = k,Patrimonios_completos = Patrimonios_completos)
      Patrimonio_por_segmento = Patrimonio_por_segmento + Patrimomio_k
    }
    Agregado_inicial = PG_cero_por_segneto
    Sensibilidades_exposicion = Agregacion_por_segmento


  } else if (Empresa == "Ecopetrol CB"){

    Simulaciones = Cortador_matriz_simulaciones(Empresa = "Ecopetrol",Matriz_Fechas = Matriz_Fechas,Simulaciones_cortar = Simulaciones)
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_PG
      Agregado_inicial = Contable$Ecopetrol_CB$Inicial_PG
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_FC
      Agregado_inicial =  Contable$Ecopetrol_CB$Inicial_FC
    }
  } else {
    print("a")
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Contable$Inicial_PG[[Empresa]]

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Teorica$Inicial_PG[[Empresa]]

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC[[Empresa]]
        Agregado_inicial =  Contable$Inicial_FC[[Empresa]]

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC[[Empresa]]
        Agregado_inicial = Teorica$Inicial_FC[[Empresa]]

      }
    }

    ### ------------------ Q: (COP/USD)------------------ ###
    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###

    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###
    if (Moneda == "USD"){
      Agregado_inicial = Agregado_inicial/t(Simulaciones[,"TRM_Promedio",])

      #Sensibilidades_exposicion[,,"USD/LC"] = Sensibilidades_exposicion[,,"USD/LC"] - Agregado_inicial
      ### --- Se le quita  el P&G + 1 que fue calculado en el codigo original --- ###
      Q = replicate(dim(Sensibilidades_exposicion)[3],Simulaciones[,grep(colnames(Simulaciones),pattern = "TRM_Promedio"),])
      Q = aperm(Q,c(2,1,3))
      ### --- Se pasa todo a dolares nuevamente --- ###
      Sensibilidades_exposicion = (Sensibilidades_exposicion/Q)
    }

  }

  ### --- Se ajusta las dimensiones ---- ###
  Sensibilidades_exposicion = Sensibilidades_exposicion[,-dim(Sensibilidades_exposicion)[2],]
  Agregado_inicial = Agregado_inicial[,-dim(Agregado_inicial)[2]]


  ###################################################################################
  ##############################  GRADIENT DESCENT  #################################
  ###################################################################################
  ## ------------ Definimos los parámetros de coberturas: ------------- ###
  Fechas = dimnames(Simulaciones)[[1]][-1]
  CoberturasPorAno=length(Fechas)
  nMeses = length(Fechas)
  nSim = dim(Simulaciones)[[3]]
  ## EBITDA_Base
  ### --- Aversion --- ###
  Aversion = A1
  # Número de coberturas por año (4 es trimestral, 12 mensual, etc.)
  ### ----------- Espacios a llenar ---------- ###
  params=rep(Nivel_cobertura,CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
  ### ------- Limites de las coberturas -------- ###
  lims=cbind(rep(rep(0,length(Factores_cubrir)),CoberturasPorAno),rep(rep(0.9,length(Factores_cubrir)),CoberturasPorAno));rownames(lims)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)));colnames(lims)=c("Min","Max")
  # lims[,2] =  c((Sensibilidaded_PG_T$Limite))

  ### -------- P&G Inicial sin alterar  ---------- ###
  EBITDA_Base = rowSums(Agregado_inicial)


  load(paste0(path,'/Outputs/Matriz/Matriz_futuros.Rdata'))

  #################### ---------------------- Puts -------------------  ####################
  if (Cobertura == "Puts"){
    print("Calculando Puts")
    ### --- Solo se van a hacer puts de USD/LC y Commodity --- ###
    Ganancia_futuros_HO = 0
    Ganancia_futuros_rbob = 0
    ########## -------------------- TRM ------------------- ##########
    if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")]) == 1){
      ### -- Boton activo: Puts Brent --- ###
      if (Puts_TRM == T){
        TRM = as.data.frame(t(as.numeric(Matriz_futuros[1:nMeses,"USD/LC"])))
        colnames(TRM)= stringr::str_extract(colnames(TRM),pattern = "[0-9]+")
        Futuro_Dolar = round(as.numeric(spline(TRM,x = colnames(TRM),xout = c(seq(1:12)))$y),2)
        FuturoDolar=matrix(rep(Futuro_Dolar,nSim),nrow=nSim,byrow=T) #(Disponibles)
        ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
        ### -------------------------------- Simulaciones --------------------------------- ###
        SerieDolar = t(Simulaciones[-1,"USD/LC",])
        if (Moneda == "USD"){
          ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
          Transformacion_TRM = (t((Simulaciones[,"TRM_Promedio",])^3)/(1+t(Simulaciones[,"TRM_Promedio",])))
          #Transformacion_TRM = t(Simulaciones[,"TRM_Promedio",])*t(Simulaciones[,"TRM_Promedio",])
          Transformacion_TRM = Transformacion_TRM[,-13]
          SensibilidadDolar = colMeans(Sensibilidades_exposicion[,,"USD/LC"]*Transformacion_TRM)
          ### ------------------ TRM ----------------- ###
          nDolar=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")],1:nMeses)]*SensibilidadDolar
          nDolar=matrix(rep(nDolar,nSim),nrow=nSim,byrow=T)
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_Puts_activas = Insumos_puts_TRM
          ### ---- Strike --- ###
          Strike_put_Dolar=matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_dolar = (apply(((1/SerieDolar) - Strike_put_Dolar), 2, function(x){rowMaxs(cbind(0,x))}))*nDolar - (nDolar*Prima_put_vector)
        } else if (Moneda == "COP"){
          ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
          SensibilidadDolar = colMeans(Sensibilidades_exposicion[,,"USD/LC"])
          ### ------------------ TRM ----------------- ###
          nDolar=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")],1:nMeses)]*SensibilidadDolar
          nDolar=matrix(rep(nDolar,nSim),nrow=nSim,byrow=T)
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_Puts_activas = Insumos_puts_TRM
          ### ---- Strike --- ###
          Strike_put_Dolar=matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_dolar = (apply((Strike_put_Dolar-SerieDolar), 2, function(x){rowMaxs(cbind(0,x))}))*nDolar - (nDolar*Prima_put_vector)
        }
      } else {
        Ganancia_futuros_dolar = 0
      }
    } else {
      Ganancia_futuros_dolar = 0
    }

    ########## -------------------- Brent ------------------- ##########
    if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")])== 1){
      ### -- Boton activo: Puts Brent --- ###
      if (Puts_Brent == T){
        Futuro_Brent = as.numeric(Matriz_futuros[1:nMeses,"Commodity"])
        FuturoBrent = matrix(rep(Futuro_Brent,nSim),nrow=nSim,byrow=T)
        ### -------------------------------- Simulaciones --------------------------------- ###
        SerieBrent = t(Simulaciones[-1,"Commodity",])
        SerieDolar = t(Simulaciones[-1,"USD/LC",])

        ### ------------------ Brent: Barriles ----------------- ###
        if (Moneda == "USD"){
          ### ------------------ Brent: Barriles ----------------- ###
          SensibilidadBrent = colMeans(Sensibilidades_exposicion[,,"Commodity"])
          ### ------------------ Brent ----------------- ###
          nBrent=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")],1:nMeses)]*SensibilidadBrent
          nBrent=matrix(rep(nBrent,nSim),nrow=nSim,byrow=T)
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_Puts_activas = Insumos_puts_brent
          ### ---- Strike --- ###
          Strike_put_Brent = matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_brent = (apply((Strike_put_Brent-SerieBrent), 2, function(x){rowMaxs(cbind(0,x))}))*nBrent - (nBrent*Prima_put_vector)
        } else if (Moneda == "COP"){
          ### ---------- Cobertura promedio Proporción*Sensibilidad --------- ###
          ### ------------------ Brent: Barriles ----------------- ###
          SensibilidadBrent = colMeans((Sensibilidades_exposicion[,,"Commodity"]/t(Simulaciones[-dim(Simulaciones)[1],"TRM_Promedio",])))
          ### ------------------ Brent ----------------- ###
          nBrent=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")],1:nMeses)]*SensibilidadBrent
          nBrent=matrix(rep(nBrent,nSim),nrow=nSim,byrow=T)

          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_Puts_activas = Insumos_puts_brent
          ### ---- Strike --- ###
          Strike_put_Brent=matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_brent = (apply((Strike_put_Brent-SerieBrent), 2, function(x){rowMaxs(cbind(0,x))})*SerieDolar)*nBrent - (nBrent*Prima_put_vector)*SerieDolar
        }
      } else {
        ### --- Ganancia futuros --- ###
        Ganancia_futuros_brent = 0
      }
    } else {
      Ganancia_futuros_brent = 0
    }

    ### -------------------------------- P&G con Coberturas ---------------------------------- ###
    GananciaFuturos =  Ganancia_futuros_dolar + Ganancia_futuros_brent + Ganancia_futuros_HO + Ganancia_futuros_rbob


  } else if (Cobertura == "Collares") {
    print("Calculando Collares")
    Ganancia_futuros_HO = 0
    Ganancia_futuros_rbob = 0
    ########## -------------------- TRM ------------------- ##########
    if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")]) == 1){
      if (Puts_TRM == T){
        TRM = as.data.frame(t(as.numeric(Matriz_futuros[1:nMeses,"USD/LC"])))
        colnames(TRM)= stringr::str_extract(colnames(TRM),pattern = "[0-9]+")
        Futuro_Dolar = round(as.numeric(spline(TRM,x = colnames(TRM),xout = c(seq(1:12)))$y),2)
        FuturoDolar=matrix(rep(Futuro_Dolar,nSim),nrow=nSim,byrow=T) #(Disponibles)
        ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
        ### -------------------------------- Simulaciones --------------------------------- ###
        SerieDolar = t(Simulaciones[-1,"USD/LC",])
        if (Moneda == "USD"){
          ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
          Transformacion_TRM = (t((Simulaciones[,"TRM_Promedio",])^3)/(1+t(Simulaciones[,"TRM_Promedio",])))
          #Transformacion_TRM = t(Simulaciones[,"TRM_Promedio",])*t(Simulaciones[,"TRM_Promedio",])
          Transformacion_TRM = Transformacion_TRM[,-dim(Simulaciones)[1]]
          SensibilidadDolar = colMeans(Sensibilidades_exposicion[,,"USD/LC"]*Transformacion_TRM)
          ### ------------------ TRM ----------------- ###
          nDolar=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")],1:nMeses)]*SensibilidadDolar
          nDolar=matrix(rep(nDolar,nSim),nrow=nSim,byrow=T)

          ################ ------------------ PUT ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_Puts_activas = Insumos_puts_TRM
          ### ---- Strike --- ###
          Strike_put_Dolar=matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: TRM/USD -------- ###
          Ganancia_futuros_put_dolar = (apply(((1/SerieDolar) - Strike_put_Dolar), 2, function(x){rowMaxs(cbind(0,x))}))*nDolar - (nDolar*Prima_put_vector)

          ################ ------------------ CALL ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_call_activas = Insumos_call_TRM
          ### ---- Strike --- ###
          Strike_call_Dolar=matrix(rep(as.numeric(Insumos_TRM_call_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_call_vector = matrix(rep(as.numeric(Insumos_TRM_call_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Call: TRM/USD -------- ###
          Ganancia_futuros_call_dolar = (apply((Strike_put_Dolar - (1/SerieDolar)), 2, function(x){rowMins(cbind(0,x))}))*nDolar + (nDolar*Prima_call_vector)
          ### --- Matriz de ganancia total --- ###
          Ganancia_futuros_dolar = Ganancia_futuros_put_dolar + Ganancia_futuros_call_dolar
        } else if (Moneda == "COP"){
          ### ------------------ TRM: Sensibilidad En Pesos ----------------- ###
          SensibilidadDolar = colMeans(Sensibilidades_exposicion[,,"USD/LC"])
          ### ------------------ TRM ----------------- ###
          nDolar=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "USD/LC")],1:nMeses)]*SensibilidadDolar
          nDolar=matrix(rep(nDolar,nSim),nrow=nSim,byrow=T)

          ################ ------------------ PUT ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_Puts_activas = Insumos_puts_TRM
          ### ---- Strike --- ###
          Strike_put_Dolar=matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_TRM_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_put_dolar = (apply((Strike_put_Dolar-SerieDolar), 2, function(x){rowMaxs(cbind(0,x))}))*nDolar - (nDolar*Prima_put_vector)

          ################ ------------------ CALL ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_TRM_call_activas = Insumos_call_TRM
          ### ---- Strike --- ###
          Strike_call_Dolar=matrix(rep(as.numeric(Insumos_TRM_call_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_call_vector = matrix(rep(as.numeric(Insumos_TRM_call_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Call: TRM/USD -------- ###
          Ganancia_futuros_call_dolar = (apply((SerieDolar-Strike_put_Dolar), 2, function(x){rowMins(cbind(0,x))}))*nDolar + (nDolar*Prima_call_vector)
          ### --- Matriz de ganancia total --- ###
          Ganancia_futuros_dolar = Ganancia_futuros_put_dolar + Ganancia_futuros_call_dolar
        }

      } else {
        Ganancia_futuros_dolar = 0
      }
    } else {
      Ganancia_futuros_dolar = 0
    }

    ########## -------------------- Brent ------------------- ##########
    if (length(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")])== 1){
      if (Puts_Brent == T){
        Futuro_Brent = as.numeric(Matriz_futuros[1:nMeses,"Commodity"])
        FuturoBrent = matrix(rep(Futuro_Brent,nSim),nrow=nSim,byrow=T)
        ### -------------------------------- Simulaciones --------------------------------- ###
        SerieBrent = t(Simulaciones[-1,"Commodity",])
        SerieDolar = t(Simulaciones[-1,"USD/LC",])
        ### ------------------ Brent: Barriles ----------------- ###
        if (Moneda == "USD"){
          ### ------------------ Brent: Barriles ----------------- ###
          SensibilidadBrent = colMeans(Sensibilidades_exposicion[,,"Commodity"])
          ### ------------------ Brent ----------------- ###
          nBrent=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")],1:nMeses)]*SensibilidadBrent
          nBrent=matrix(rep(nBrent,nSim),nrow=nSim,byrow=T)
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_Puts_activas = Insumos_puts_brent
          ### ---- Strike --- ###
          Strike_put_Brent=matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_put_brent = (apply((Strike_put_Brent-SerieBrent), 2, function(x){rowMaxs(cbind(0,x))}))*nBrent - (nBrent*Prima_put_vector)


          ################ ------------------ CALL ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_call_activas = Insumos_call_brent
          ### ---- Strike --- ###
          Strike_call_brent=matrix(rep(as.numeric(Insumos_Brent_call_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_call_vector = matrix(rep(as.numeric(Insumos_Brent_call_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)

          ####  -------- Ganancia Call: TRM/USD -------- ###
          Ganancia_futuros_call_brent = (apply((SerieBrent-Strike_put_Brent), 2, function(x){rowMins(cbind(0,x))}))*nBrent + (nBrent*Prima_call_vector)
          ### --- Matriz de ganancia total --- ###
          Ganancia_futuros_brent = Ganancia_futuros_put_brent + Ganancia_futuros_call_brent
        } else if (Moneda == "COP"){
          ### ---------- Cobertura promedio Proporción*Sensibilidad --------- ###
          ### ------------------ Brent: Barriles ----------------- ###
          SensibilidadBrent = colMeans((Sensibilidades_exposicion[,,"Commodity"]/t(Simulaciones[-dim(Simulaciones)[1],"TRM_Promedio",])))
          ### ------------------ Brent ----------------- ###
          nBrent=params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = "Commodity")],1:nMeses)]*SensibilidadBrent
          nBrent=matrix(rep(nBrent,nSim),nrow=nSim,byrow=T)

          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_Puts_activas = Insumos_puts_brent
          ### ---- Strike --- ###
          Strike_put_Brent=matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_put_vector = matrix(rep(as.numeric(Insumos_Brent_Puts_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)
          ####  -------- Ganancia Puts: Brent/PESOS -------- ###
          Ganancia_futuros_put_brent = (apply((Strike_put_Brent-SerieBrent), 2, function(x){rowMaxs(cbind(0,x))})*SerieDolar)*nBrent - (nBrent*Prima_put_vector)*SerieDolar


          ################ ------------------ CALL ----------------- ################
          ### --- Insumos: Funcion Puts_insumos --- ###
          Insumos_Brent_call_activas = Insumos_call_brent
          ### ---- Strike --- ###
          Strike_call_brent=matrix(rep(as.numeric(Insumos_Brent_call_activas["Strike",]) ,nSim),nrow=nSim,byrow=T)
          #### --- Primas --- ###
          Prima_call_vector = matrix(rep(as.numeric(Insumos_Brent_call_activas["Prima",]) ,nSim),nrow=nSim,byrow=T)

          ####  -------- Ganancia Call: TRM/USD -------- ###
          Ganancia_futuros_call_brent = (apply((SerieBrent-Strike_put_Brent), 2, function(x){rowMins(cbind(0,x))})*SerieDolar)*nBrent + (nBrent*Prima_call_vector)*SerieDolar
          ### --- Matriz de ganancia total --- ###
          Ganancia_futuros_brent = Ganancia_futuros_put_brent + Ganancia_futuros_call_brent
        }

      } else {
        Ganancia_futuros_brent = 0
      }
    } else {
      ### --- Ganancia futuros --- ###
      Ganancia_futuros_brent = 0
    }


    ### -------------------------------- P&G con Coberturas ---------------------------------- ###
    GananciaFuturos =  Ganancia_futuros_dolar + Ganancia_futuros_brent + Ganancia_futuros_HO + Ganancia_futuros_rbob


  } else {
    print("Calculando Forwards")
    #################### ---------------------- Forwards  -------------------  ####################
    Gradiente_agregado <- new.env()
    #### ----------- Parametros de Gradiente ------------ ####
    # Número máximo de pasos - para evitar casos de iteraciones infinitas


    ### -------------------------------- Simulaciones --------------------------------- ###
    for (j in Factores_cubrir) {
      assign(x = paste0("Serie",j), t(Simulaciones[-1,j,]),envir = Gradiente_agregado)
    }


    ########## -------------------- Futuros ------------------- ##########
    for (j in Factores_cubrir) {
      if( j == "USD/LC"){
        TRM = as.data.frame(t(as.numeric(Matriz_futuros[1:dim(Agregado_inicial)[2],"USD/LC"])))
        colnames(TRM)= stringr::str_extract(colnames(TRM),pattern = "[0-9]+")
        Futuro_Dolar = round(as.numeric(spline(TRM,x = colnames(TRM),xout = c(seq(1:dim(Agregado_inicial)[2])))$y),2)
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Futuro_Dolar),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      } else if ((j == 'NYMEX_RBOB_1M' | j == "Nymex_Heating_Oil_1M")) {
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j] + Matriz_futuros[1:nMeses,"Commodity"]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      } else {
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)

      }
    }

    ### ---------- Cobertura promedio Proporción*Sensibilidad --------- ###
    ### ------------------ Brent: Barriles ----------------- ###
    if( Moneda == "USD"){
      ######################### --------------------- Caso Pesos pasar TRM a pesos ------------------------------ ##########
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          print("cambiando TRM dolar")
          Transformacion_TRM = (t((Simulaciones[,"TRM_Promedio",])^3)/(1+t(Simulaciones[,"TRM_Promedio",])))
          #Transformacion_TRM = t(Simulaciones[,"TRM_Promedio",])*t(Simulaciones[,"TRM_Promedio",])
          Transformacion_TRM = Transformacion_TRM[,-dim(Simulaciones)[1]]
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]*Transformacion_TRM),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton" ){
          print(paste(j," barriles"))
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]),envir = Gradiente_agregado)
        }
      }


    } else if(Moneda == "COP") {
      ######################### --------------------- Caso Pesos pasar todo a barriles ------------------------------ ##########
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
          assign(x = paste0("Sensibilidad",j),  value = colMeans((Sensibilidades_exposicion[,,j]/t(Simulaciones[-dim(Simulaciones)[1],"TRM_Promedio",]))),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]),envir = Gradiente_agregado)
        }
      }


    }


    for (j in Factores_cubrir) {
      assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
    }


    ### -------------------------------- P&G con Coberturas ---------------------------------- ###
    # GananciaFuturos = ((FuturoDolar-SerieDolar)*nDolar -CostosDolar*abs(nDolar-matrix(rep(0,12*nSim),nrow=nSim,byrow=T)))/SerieDolar + (FuturoBrent-SerieBrent)*nBrent -CostosBrent*abs(nBrent-matrix(rep(0,12*nSim),nrow=nSim,byrow=T))

    GananciaFuturos = 0
    if(Moneda == "USD"){
      ### ------------------ Cobertura para monedas funcionales dolares  ----------------- ###
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
          GananciaFuturos = GananciaFuturos + (get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*get(paste0("n",j),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          GananciaFuturos = GananciaFuturos + ((get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Serie",j),envir = Gradiente_agregado)) - (get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Futuro",j),envir = Gradiente_agregado)))
        }
      }

    } else if (Moneda == "COP"){
      ### ------------------ Cobertura para monedas funcionales pesos  ----------------- ###
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
        }
      }

    }



  }


  ### --- Ganancias --- ###
  ### -------- en el caso que sea cero --- ###
  if (all(GananciaFuturos != 0)){
    EBITDA_cobertura = (EBITDA_Base+rowSums(GananciaFuturos))
  } else {
    EBITDA_cobertura =  EBITDA_Base
  }
  Resultados = NULL
  Resultados = as.list(Resultados)
  Resultados[["Base"]] = EBITDA_Base
  Resultados[["Cobertura"]] = EBITDA_cobertura

  return(Resultados)

}


Coberturas_agregadas_gradiente <- function(Factores_cubrir,Nivel_cobertura,Tipo,Contable,Modo_contable,Teorica,Patrimonio,Simulaciones = Matriz_simulaciones,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Shiny = T) {
  if (Shiny == TRUE){
    progress = shiny::Progress$new()
    progress$set(message = "Se está iterando", value = 0)
    shinyalert("Óptimizando el gradiente. Por favor espere.",time =3500 ,type = "warning",showConfirmButton = T, confirmButtonText = "Entiendo",showCancelButton = F)
    }

  Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
  Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]

  Gradiente_agregado <- new.env()
  #### ----------- Parametros de Gradiente ------------ ####
  # Número máximo de pasos - para evitar casos de iteraciones infinitas
  nRep=20
  # Cambio mínima en equivalente de certeza para detener al algoritmo mientras aún no se cumplan los pasos - Medido en pesos
  Precision=100
  ### --- Valor para calcular las derivadas en cada paso - se fija en 1%.
  Delta=0.02
  ### --- Alpha que es la multiplicacion de la derivada --- ###
  Alpha=0.02
  ### --- Aversion --- ###
  Aversion = A1


  ### ---------- Selecciona el tipo de sensibilidad ------------ ###
  ### ------------- P&G ------------ ###
  ### ---------- Selecciona el tipo de sensibilidad ------------ ###
  ### ------------- P&G ------------ ###
  if (Tipo == 1){
    ### ------------- Contable ------------ ###
    if (Modo_contable == TRUE){
      Sensibilidades_agregadas_exposicion = Contable$Sensibilidades_agregado_PG
      Agregado_inicial = Contable$Inicial_agregado_PG

    } else if( Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_agregadas_exposicion = Teorica$Sensibilidades_agregado_PG
      Agregado_inicial = Teorica$Inicial_agregado_PG

    }
    ### ------------- Flujo de caja ------------ ###
  } else if(Tipo == 2) {
    if (Modo_contable == TRUE){
      ### ------------- Contable ------------ ###
      Sensibilidades_agregadas_exposicion = Contable$Sensibilidades_agregado_FC
      Agregado_inicial = Contable$Inicial_agregado_FC

    } else if (Modo_contable == FALSE) {
      ### ------------- Teorica ------------ ###
      Sensibilidades_agregadas_exposicion = Teorica$Sensibilidades_agregado_FC
      Agregado_inicial = Teorica$Inicial_agregado_FC

    }
  }


  Sensibilidades_agregadas_exposicion = Sensibilidades_agregadas_exposicion[,-dim(Sensibilidades_agregadas_exposicion)[2],]
  Agregado_inicial = Agregado_inicial[,-dim(Agregado_inicial)[2]]


  #Factores_cubrir = c('TRM','Brent')
  #Nivel_cobertura = c(1,1)
  ###################################################################################
  ##############################  GRADIENT DESCENT  #################################
  ###################################################################################
  ## ------------ Definimos los parámetros de coberturas: ------------- ###
  Fechas = dimnames(Simulaciones)[[1]][-1]
  CoberturasPorAno=length(Fechas)
  nMeses = length(Fechas)
  nSim = dim(Simulaciones)[[3]]
  ## EBITDA_Base
  ### --- Aversion --- ###
  Aversion = A1
  # Número de coberturas por año (4 es trimestral, 12 mensual, etc.)
  ### ----------- Espacios a llenar ---------- ###
  params=rep(Nivel_cobertura,CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
  ### ------- Limites de las coberturas -------- ###
  lims=cbind(rep(rep(0,length(Factores_cubrir)),CoberturasPorAno),rep(rep(0.9,length(Factores_cubrir)),CoberturasPorAno));rownames(lims)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)));colnames(lims)=c("Min","Max")
  # lims[,2] =  c((Sensibilidaded_PG_T$Limite))

  ### -------- P&G Inicial sin alterar  ---------- ###
  EBITDA_Base = rowSums(Agregado_inicial)


  load(paste0(path,'/Outputs/Matriz/Matriz_futuros.Rdata'))



  ### -------------------------------- Simulaciones --------------------------------- ###
  for (j in Factores_cubrir) {
    assign(x = paste0("Serie",j), t(Simulaciones[-1,j,]),envir = Gradiente_agregado)
  }


  ########## -------------------- Futuros ------------------- ##########
  for (j in Factores_cubrir) {
    if( j == "USD/LC"){
      TRM = as.data.frame(t(as.numeric(Matriz_futuros[1:dim(Agregado_inicial)[2],"USD/LC"])))
      colnames(TRM)= stringr::str_extract(colnames(TRM),pattern = "[0-9]+")
      Futuro_Dolar = round(as.numeric(spline(TRM,x = colnames(TRM),xout = c(seq(1:dim(Agregado_inicial)[2])))$y),2)
      assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Futuro_Dolar),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
    } else if ((j == 'NYMEX_RBOB_1M' | j == "Nymex_Heating_Oil_1M")) {
      assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j] + Matriz_futuros[1:nMeses,"Commodity"]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
    } else {
      assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)

    }
  }

  ### ---------- Cobertura promedio Proporción*Sensibilidad --------- ###
  ### ------------------ Brent: Barriles ----------------- ###
  for (j in Factores_cubrir) {
    if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
      assign(x = paste0("Sensibilidad",j),  value = colMeans((Sensibilidades_agregadas_exposicion[,,j]/t(Simulaciones[-dim(Simulaciones)[1],"TRM_Promedio",]))),envir = Gradiente_agregado)
    } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
      assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_agregadas_exposicion[,,j]),envir = Gradiente_agregado)
    }
  }

  for(i in c(1,2)){
    print(i)
    Valor_Funcion = 1e10
    Paso=0
    ### -------------------------------- Paso 1 Semilla inicial t = 0 ---------------------------------- ###
    nom_orig=names(params)
    noms=unique(names(params))

    ### --- Numeros Aleatorios de una unifome, utilizando como limites el percentil 95 --- ###
    params=rep(runif(length(params)/(4/CoberturasPorAno),min(lims),max(lims)),4/CoberturasPorAno)
    names(params)=rep(noms,4/CoberturasPorAno)
    params=params[nom_orig]

    for (j in Factores_cubrir) {
      assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
    }


    ### -------------------------------- P&G con Coberturas ---------------------------------- ###
    # GananciaFuturos = ((FuturoDolar-SerieDolar)*nDolar -CostosDolar*abs(nDolar-matrix(rep(0,12*nSim),nrow=nSim,byrow=T)))/SerieDolar + (FuturoBrent-SerieBrent)*nBrent -CostosBrent*abs(nBrent-matrix(rep(0,12*nSim),nrow=nSim,byrow=T))

    GananciaFuturos = 0
    ### ------------------ Brent: Barriles ----------------- ###
    for (j in Factores_cubrir) {
      if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
        GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
      } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
        GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
      }
    }


    EBITDA_cobertura = (EBITDA_Base+rowSums(GananciaFuturos))

    ### ----------------------------- Etapa 3: Optimizacion ------------------------------ ###
    while(Valor_Funcion>Precision & Paso<nRep){

      if (Shiny == TRUE){
        progress$inc(round((1/nRep),2)/length(c(1,2)), detail = paste0("Iteración ",Paso,"  Semilla ", i))
      }
      ### -------------------- Derivadas ------------------- ###

      Derivadas=sapply(unique(names(params)),function(x){

        params[names(params)%in%x]=params[names(params)%in%x]+Delta
        params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
        params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]

        ### ------------------ TRM ----------------- ###
        for (j in Factores_cubrir) {
          assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
        }

        ### ----------------------------- Tener en cuenta Observaciones ------------------------------ ###
        GananciaFuturos = 0
        ### ------------------ Brent: Barriles ----------------- ###
        for (j in Factores_cubrir) {
          if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
            GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
          } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
            GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
          }
        }

        EBITDA = (EBITDA_Base+rowSums(GananciaFuturos))

        if(params[names(params)%in%x]<lims[x,"Max"]+Delta & params[names(params)%in%x]>lims[x,"Min"]+Delta){
          return((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio)
        }
        if(params[names(params)%in%x]==lims[x,"Max"]){
          return(min(c((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio,0)))
        }
        if(params[names(params)%in%x]==lims[x,"Min"]+Delta){
          return(max(c((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio,0)))
        }
      })
      ### ----------------------------- Limites ------------------------------ ###
      ### --- Si mi derivada es negativa: Minimo: Es igual a cero --- ###
      Derivadas[Derivadas<0 & (params==lims[,"Min"])[unique(names(params))]]=0
      ### --- Si mi derivada es Positiva y supera el limite superior: Igual a cero--- ###
      Derivadas[Derivadas>0 & (params==lims[,"Max"])[unique(names(params))]]=0

      ### --------------- Tomo el maximo de las derivadas ---- ###
      ValorDerivada=max(c(abs(min(Derivadas[names(params)])),max(Derivadas[names(params)])))

      ### ----------------------------- Caso 1: Derivada diferente 0 ------------------------------ ###
      if(ValorDerivada!=0){
        ### --- Muevo el maximo la proporcion Alpha, manteniendo la direccion la derivada --- ##
        params = params+Derivadas[names(params)]/abs(ValorDerivada)*Alpha
        ### --- Acotar el movimiento a los limites de cobertura --- ##
        params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
        ### --- Acotar el movimiento a los limites de cobertura --- ##
        params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]
      } else {ValorDerivada=1
      params=params+Derivadas[names(params)]/ValorDerivada*Alpha
      params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
      params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]
      }
      ### ----------------------------- De lo contrario la derivada igual a cero ------------------------------ ###

      ### ----------------------------- Evaluacion de la funcion en nuevo punto ------------------------------ ###

      ### ------------------ TRM ----------------- ###
      for (j in Factores_cubrir) {
        assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      }

      ### --- Ganancias:
      ### --- NOTA: JP tiene coberturas, esto no deberia ser igual a matrix(rep(0,12*nSim),nrow=nSim,byrow=T)
      ### --- sino cambiarlo Forwards_hist_2  Cobertura (12 peridos) matrix(rep(Coberturas,nSim),nrow=nSim,byrow=T)
      ### ------------------ Brent: Barriles ----------------- ###
      ### ------------------ Brent: Barriles ----------------- ###
      GananciaFuturos = 0
      ### ------------------ Brent: Barriles ----------------- ###
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
        }
      }


      ### ------------------ EBITDA ----------------- ###
      EBITDA=(EBITDA_Base+rowSums(GananciaFuturos))

      ### ------------------ Re calculo la diferencia  ----------------- ###
      Valor_Funcion = (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
      ### ------------------ EBITDA ----------------- ###
      EBITDA_cobertura=EBITDA
      ### ------------------ Aumento un paso adelante ----------------- ###
      Paso=Paso+1
      ### ------------------ Resultados ----------------- ###
      print(Valor_Funcion)
      print(Paso)
    }
    if(i==1){
      Funcion_i = (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
      paramsFin = params
      sim_best=i
    }
    if( (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio >Funcion_i){
      paramsFin = params
      Funcion_i= (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
      sim_best=i
    }
  }


  Parametros_optimos = paramsFin
  for (j in Factores_cubrir) {
    assign(x = paste0("n",j),  value = matrix(rep(Parametros_optimos[names(Parametros_optimos)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
  }


  ### ------------------ Brent: Barriles ----------------- ###
  ### ------------------ Brent: Barriles ----------------- ###
  GananciaFuturos = 0
  ### ------------------ Brent: Barriles ----------------- ###
  for (j in Factores_cubrir) {
    if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
      GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
    } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
      GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
    }
  }

  ### -------------------------------- P&G con Coberturas ---------------------------------- ###
  # GananciaFuturos = ((FuturoDolar-SerieDolar)*nDolar -CostosDolar*abs(nDolar-matrix(rep(0,12*nSim),nrow=nSim,byrow=T)))/SerieDolar + (FuturoBrent-SerieBrent)*nBrent -CostosBrent*abs(nBrent-matrix(rep(0,12*nSim),nrow=nSim,byrow=T))

  EBITDA_cobertura = (EBITDA_Base+rowSums(GananciaFuturos))

  Resultados = NULL
  Resultados = as.list(Resultados)
  Resultados[["Optima"]] = EBITDA_cobertura
  Resultados[["Pesos"]] = Parametros_optimos

  if (Shiny == TRUE){
    progress$close()
  }
  return(Resultados)
}



#
# Graficar_coberturas = function(Base,Cobertura,Optimo,Moneda = "USD"){
#   if (Moneda == "COP") {
#     Base = Base/1000000000
#     Cobertura = Cobertura/1000000000
#     Optimo = Optimo/1000000000
#     titulo = "Miles de millones de pesos"
#   } else {
#     titulo = "Dólares"
#   }
#
#   Grafico <- plot_ly(alpha = 0.5,histnorm = "probability") %>%
#     add_histogram(x = ~Cobertura, color = "deepskyblue4",name = "Cubierto") %>%
#     add_histogram(x = ~Base, color = "forestgreen",name = "Base") %>%
#     add_histogram(x = ~Optimo, color = "darkorange",name = "Óptimo") %>%
#     layout(barmode = "overlay",margin = list(l = 50, r = 50, b = 50, t = 50, pad = 4),
#            xaxis = list(title = titulo,
#                         zeroline = FALSE),
#            yaxis = list(title = "Probabilidad",
#                         zeroline = FALSE))
#
#
#   return(Grafico)
#
# }
Graficar_coberturas = function(Base,Cobertura,Optimo,Moneda = "USD"){
  if (Moneda == "COP") {
    Base = Base/1000000000
    Cobertura = Cobertura/1000000000
    Optimo = Optimo/1000000000
    titulo = "Miles de millones de pesos"
  } else {
    Base = Base/1000000
    Cobertura = Cobertura/1000000
    Optimo = Optimo/1000000
    titulo = "Millones de dólares"
    }

  if (length(Optimo) == 1 ){
    Optimo = rep(Optimo,length(Cobertura))
  }


  plot.df <- data.frame(x=c(Base,Cobertura),group=c(rep("Base",length(Base)),rep("Cobertura",length(Cobertura))))

  Grafica = ggplot(plot.df,aes(x=x,y = (..count..)/sum(..count..)))+
    geom_histogram(bins=60,data=subset(plot.df,group=='Base'),aes(fill=group),alpha=0.5)+
    geom_histogram(bins=60,data=subset(plot.df,group=='Cobertura'),aes(fill=group),alpha=0.5)+
    scale_fill_manual(name="", values=c("red","darkgray"),labels=c("Base","Cobertura")) +
    theme_bw() + labs(y="Simulaciones",x=titulo) + ggtitle("")+theme(legend.background = element_rect(fill="white", size=01, linetype="solid"),
                                                                                  legend.title = element_text(colour="black", size=10, face="bold"),
                                                                                  legend.text = element_text(colour="black", size=10, face="bold"),
                                                                                  title =  element_text(face = "bold", color = "#004237"),
                                                                                  panel.grid.major = element_blank(), panel.border = element_blank(),
                                                                                  plot.title = element_text(hjust = 0.5),axis.text=element_text(size=12,face="bold"),
                                                                                  axis.title=element_text(size=13,face="bold"),legend.position = "botton") +
    labs(title="")+labs(x="Miles de Millones")+labs(y="Frecuencia")+
    scale_y_continuous(labels = percent_format()) + scale_x_continuous(labels = dollar)


  Grafico = ggplotly(Grafica)

  Grafico$x$data[[1]]$text <- paste("Media:",round(rep(mean(Base),length(Base))),"\n Valor:",round(Base),"\n Desviacion:",
                                    round(rep(sd(Base),length(Base))))

  Grafico$x$data[[2]]$text <- paste("Media:",round(rep(mean(Cobertura),length(Base))),"\n Valor:",round(Cobertura),"\n Desviacion:",
                                    round(rep(sd(Cobertura),length(Base))))

  if (length(Optimo) == 1 ){
    Grafico$x$data[[3]]$text <- paste("Media:",round(rep(mean(Optimo),length(Base))),"\n Valor:",round(Optimo),"\n Desviacion:",
                                      round(rep(sd(Optimo),length(Base))))

  }



  return(Grafico)

}


### ---  Esta funcion identifica las posibles coberturas que puede tener una empresa --- ###
Coberturas_posibles_vector = function(Empresa,Excel_coberturas){

  if (Empresa == "Agregado"){

    Disponibilidad_empresas_cubrir = Filiales_correr[[1]]$Empresas$Empresas
    Resultados_agregado = Excel_coberturas[,c("Factor","Agregado")]
    Resultados = Excel_coberturas[,c(grep(colnames(Excel_coberturas),pattern = paste0("^",paste0(Disponibilidad_empresas_cubrir,collapse = "$|^"),"$")))]

    ### ---  En el caso en el que agregar mapee una sola empresa (por construccion deberia pasar pero... ) ####
    if (length(dim(Resultados)[2] != 1) != 0) {
      Resultados_agregado$Independientes =rowSums(Resultados)
      } else {
      Resultados_agregado$Independientes = Excel_coberturas[,c(as.character(Disponibilidad_empresas_cubrir))]
      }

    Resultados_agregado$Agregado = unlist(lapply(Resultados_agregado$Independientes, function(x){ ifelse(test = (x != 0) ==T,1,0)}))
    Resultados_agregado = Resultados_agregado[,c(1,2)]
    Vector_posible = as.character(Resultados_agregado[Resultados_agregado[,"Agregado"] == 1,"Factor"])

    } else {
    Coberturas_posibles = Excel_coberturas[,c(1,grep(colnames(Excel_coberturas),pattern = paste0("^",Empresa,"$")))]
    Coberturas_posibles = Coberturas_posibles[Coberturas_posibles[,2] == 1,]
    Vector_posible = as.character(Coberturas_posibles[,1])
    }
  return(Vector_posible)
}


### ---- Saca una lista de dinamica de vectores de los pesos de la coberturas ---- ###
Barra_factores_cubrir = function(Factor_cubrir,Empresa,input,Unico ='Unico'){
  tagList(
    selectInput(inputId = paste0("Seleccionador_coberturas",Empresa,Unico), 'Seleccione un factor',choices = Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Factor_cubrir,collapse = "$|^"),"$")),"Nombre"]),
    renderUI(
        sliderTextInput(grid = T,inputId = paste0("Seleccionador_coberturas",Empresa,Unico,input[[paste0("Seleccionador_coberturas",Empresa,Unico)]]) , label =input[[paste0("Seleccionador_coberturas",Empresa,Unico)]],
                        selected = 100,choices = as.numeric(seq(from = 0,by = 10,to = 100)))))

}


### ----------- Devuelve los pesos dinamicos ------- #####
Pesos_coberturas_shiny = function(Factor_cubrir,Empresa,input,Unico ='Unico'){
  Vector_nombres_coberturas = paste0(paste0("Seleccionador_coberturas",Empresa,Unico),Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Factor_cubrir,collapse = "$|^"),"$")),"Nombre"])
  Vector_valores_coberturas = as.numeric(lapply(Vector_nombres_coberturas, function(x){ifelse(test = is.null(input[[as.character(x)]]) != T,yes = (as.numeric(input[[as.character(x)]])/100),no = 1)}))
  return(Vector_valores_coberturas)
}


### --- Esta funcion: presenta el histograma, y tablas de las coberturas ---- ###

Coberturas_visulizacion = function(Moneda,Base,Cobertura,Patrimonio,Aversion,Nombre_unico){
  tagList(
    renderPlotly(Graficar_coberturas(Moneda = Moneda,
                                     Base = Base,
                                     Cobertura = Cobertura,
                                     Optimo = NA)),
    ### ------ Estadisticas descriptivas: Sin coberturas --------- ###
    HTML(paste0('<strong><font color="#002e5b">Sin coberturas</font></strong>')),
    renderDataTable(datatable(selection = list(target = "cell"),
                              Medidas_riesgo_agregada(Nombre_unico = Nombre_unico,
                                                      PG_inicial = Base,
                                                      Aversion = Aversion,
                                                      Patrimonio = Patrimonio,Moneda = Moneda),
                              escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
    ### ------ Estadisticas descriptivas: Sin coberturas --------- ###
    HTML(paste0('<strong><font color="#002e5b">Con coberturas</font></strong>')),
    renderDataTable(datatable(selection = list(target = "cell"),
                              Medidas_riesgo_agregada(Nombre_unico = Nombre_unico,
                                                      PG_inicial = Cobertura,
                                                      Aversion = Aversion,
                                                      Patrimonio = Patrimonio,Moneda = Moneda),
                              escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE)))
    ,
    Modales_riesgo(Nombre_unico = Nombre_unico)
    )


}


Coberturas_optimas_visulizacion = function(Empresa,Moneda,Base,Cobertura,Patrimonio,Aversion,Nombre_unico,Pesos_optimos = NA,Limites_optimos = NA){
  if (Empresa == "Ninguna"){
    tagList(
      renderText("Por favor seleccione una empresa."))
  } else {
    tagList(
      renderPlotly(Graficar_coberturas(Moneda = Moneda,
                                       Base = Base,
                                       Cobertura = Cobertura,
                                       Optimo = NA)),
      ### ------ Estadisticas descriptivas: Sin coberturas --------- ###
      HTML(paste0('<strong><font color="#002e5b">Sin coberturas</font></strong>')),
      renderDataTable(datatable(selection = list(target = "cell"),
                                Medidas_riesgo_agregada(Nombre_unico = paste0(Nombre_unico,"Sin_coberturas"),
                                                        PG_inicial = Base,
                                                        Aversion = Aversion,
                                                        Patrimonio = Patrimonio,Moneda = Moneda),
                                escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
      ### ------ Estadisticas descriptivas: Sin coberturas --------- ###
      HTML(paste0('<strong><font color="#002e5b">Con coberturas óptimas</font></strong>')),
      renderDataTable(datatable(selection = list(target = "cell"),
                                Medidas_riesgo_agregada(Nombre_unico = paste0(Nombre_unico,"Con_coberturas"),
                                                        PG_inicial = Cobertura,
                                                        Aversion = Aversion,
                                                        Patrimonio = Patrimonio,Moneda = Moneda),
                                escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE)))
      ,
      ### ------ Pesos optimos --------- ###
      HTML(paste0('<strong><font color="#002e5b">Límites</font></strong>')),
      renderDataTable(datatable(selection = list(target = "cell"),
                                Limites_optimos,
                                escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))
                      ),
      HTML(paste0('<strong><font color="#002e5b">Pesos óptimos</font></strong>')),
      renderDataTable(datatable(selection = list(target = "cell"),
                                Pesos_optimos,
                                escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))
      ),
      Modales_riesgo(Nombre_unico = paste0(Nombre_unico,"Sin_coberturas")),
      Modales_riesgo(Nombre_unico = paste0(Nombre_unico,"Con_coberturas")),
      Modales_riesgo(Nombre_unico = paste0(Nombre_unico,"Optimas"))

    )

  }


}

############################### ------------------- PUTS -------------------- ###############################

#### -------------- Puts insumos --------- ####
### --- Calcula Primas y strikes a partir de la volatilidad, el factor y los futuros --- ###
Puts_insumos = function(Indicador,Spread,dimension = (dim(Matriz_simulaciones)[1]-1),Volatilidad,Futuros = Matriz_futuros, Moneda = "COP",Opcion = "Put"){
  ######### ---------------- Vector Futuros ---------------- #########
  ### --- Se identifica el indicador que se le va encontrar las primas --- ###
  Vector_futuros = Futuros[,grep(colnames(Futuros),pattern = Indicador)]
  ### --- Se acota a la dimension --- ###
  Vector_futuros = Vector_futuros[c(1:dimension)]
  Pos_vacia = which(Vector_futuros[!na.locf(is.na(Vector_futuros))][length(Vector_futuros[!na.locf(is.na(Vector_futuros))])] == Vector_futuros)
  Vector_futuros = Vector_futuros[1:Pos_vacia]

  ### --- Interpolacion en caso de ser necesario --- ###
  if( length(unique(is.na(Vector_futuros))) ==2 ){
    Vector_futuros = as.data.frame(t(Vector_futuros))
    ### --- Vector_futuros --- ###
    colnames(Vector_futuros) = seq(1:dim(Vector_futuros)[2])
    Vector_futuros = round(as.numeric(spline(method = "natural",y = Vector_futuros,x = colnames(Vector_futuros),xout = c(seq(1:dim(Vector_futuros)[2])))$y),2)
    Vector_futuros = as.data.frame(t(Vector_futuros))
  } else {
    Vector_futuros = as.data.frame(t(Vector_futuros))

  }
  colnames(Vector_futuros) = seq(1:dimension)
  rownames(Vector_futuros) = Indicador

  ######### ---------------- Vector Strikes ---------------- #########
  Vector_strikes = Vector_futuros + Spread
  rownames(Vector_strikes) = "Strike"

  # if ((Moneda == "USD" & Indicador == "USD/LC") == TRUE){
  #   ### --- Se saca una distribucion y se calcula la sd de esta --- ###
  #   # Volatilidad = sd(1/(rnorm(n = 1000,mean = mean(as.numeric(Vector_futuros)),sd = mean(as.numeric(Vector_futuros))*Volatilidad)))*mean(as.numeric(Vector_futuros))
  #   Vector_futuros = 1/Vector_futuros
  #   Vector_strikes = 1/Vector_strikes
  # }


  ######### ---------------- Vector Primas ---------------- #########
  ### --- Se define vector de primas --- ###
  Vector_primas = as.data.frame(matrix(0,1,4))
  colnames(Vector_primas) = seq(1:dimension)
  rownames(Vector_primas) = "Prima"


  if (Opcion == "Put"){
    Tipo_opcion = "p"
  } else if (Opcion == "Call"){
    Tipo_opcion = "c"
  }


  for (tiempo_v in c(1:length(Vector_primas))) {
    ### --- Tiempo --- ###
    Tiempo = as.numeric(colnames(Vector_primas)[tiempo_v])/4
    ### --- Strike --- ###
    Strike_activo = as.numeric(Vector_strikes[tiempo_v])
    ### --- Spot Futuro --- ###
    Spot_futuros = as.numeric(Vector_futuros[tiempo_v])
    ### -- Black Sholes --- ###
    Vector_primas[tiempo_v] = GBSOption(TypeFlag = Tipo_opcion,S=Spot_futuros,X=Strike_activo,Time = Tiempo,r=0,b=0,sigma =Volatilidad)@price
  }

  if ((Moneda == "USD" & Indicador == "USD/LC") == TRUE){
    ### --- Se saca una distribucion y se calcula la sd de esta --- ###
    # Volatilidad = sd(1/(rnorm(n = 1000,mean = mean(as.numeric(Vector_futuros)),sd = mean(as.numeric(Vector_futuros))*Volatilidad)))*mean(as.numeric(Vector_futuros))
    Vector_primas = ((Vector_primas/(Vector_futuros))/Vector_futuros)
    Vector_futuros = 1/Vector_futuros
    Vector_strikes = 1/Vector_strikes
  }

  Vector_primas = round(Vector_primas,9)
  #### ----- Resultados ------ ####
  Resultados = rbind(Vector_futuros,Vector_strikes,Vector_primas)
  return(Resultados)
}

######### ---------------- Resultados SWAPS  ---------------- #########
Resultados_cobeturas_swaps = function(Empresa,Segmentos_info = Segmentos_empresas_informacion,Empresas = Empresas_activas_segmentos,Moneda,Cantidad,Compra,Modo_contable = T,Venta,Spread,Simulaciones = Matriz_simulaciones,Tipo,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Unidades,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima){
  Participacion_accionaria = Participacion_empresas(Excel = paste0(path,"/Inputs/Parametros/Parametros.xlsx"))
  Patrimonios_completos <- as.data.frame(read_excel(paste0(path,"/Inputs/Parametros/Parametros.xlsx"),sheet = "Patrimonios"))
  if(Empresa == "Agregado"){

    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)

    Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]

    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_PG
        Agregado_inicial = Contable$Inicial_agregado_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_PG
        Agregado_inicial = Teorica$Inicial_agregado_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_agregado_FC
        Agregado_inicial = Contable$Inicial_agregado_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_agregado_FC
        Agregado_inicial = Teorica$Inicial_agregado_FC
      }
    }

    Agregacion_por_segmento = Sensibilidades_exposicion
    Patrimonio_por_segmento = Patrimonios_completos[grep(Patrimonios_completos[,"Empresa"],pattern = "Patrimonio_Agregado"),"Patrimonio"]
    PG_cero_por_segneto = Agregado_inicial

  } else if(Empresa == "Upstream"|Empresa == "Midstream"|Empresa=="Downstream") {
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    Simulaciones = Simulaciones[c(1:Horizonte_agregacion_final),,]

    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG
        Agregado_inicial = Contable$Inicial_PG

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG
        Agregado_inicial = Teorica$Inicial_PG

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC
        Agregado_inicial =  Contable$Inicial_FC

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC
        Agregado_inicial = Teorica$Inicial_FC
      }
    }

    Segmentos = Segmentos_info
    Segmento = Empresa
    Empresas_a_agregrar = Empresas[grep(Empresas,pattern = paste0("^",paste0(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)][!is.na(Segmentos[,grep(colnames(Segmentos),pattern = Segmento)])] ,collapse = "$|^"),"$"))]
    Agregacion_por_segmento = 0
    Patrimonio_por_segmento = 0
    PG_cero_por_segneto = 0
    ### --- Empresa --- ###
    ### ------- Horizonte agregacion ----- ####
    Horizonte_agregacion_final = (length(seq(from=as.Date(Fecha_inicial), to=as.Date(Fecha_final), by='month'))+1)
    ### ------- Agregacion ----- ###
    for (k in Empresas_a_agregrar){
      Cero_k = Agregado_inicial[[k]][,c(1:Horizonte_agregacion_final)]
      Empresa_k = Sensibilidades_exposicion[[k]][,c(1:Horizonte_agregacion_final),]
      Agregacion_por_segmento = Agregacion_por_segmento + ((Empresa_k)*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      PG_cero_por_segneto = PG_cero_por_segneto + (Cero_k*as.numeric(Participacion_accionaria[grep(Participacion_accionaria[,"Empresas"],pattern = paste0("^",k,"$")),"Total"]))
      Patrimomio_k = Patrimonio_individual(Empresa = k,Patrimonios_completos = Patrimonios_completos)
      Patrimonio_por_segmento = Patrimonio_por_segmento + Patrimomio_k
    }
    Agregado_inicial = PG_cero_por_segneto
    Sensibilidades_exposicion = Agregacion_por_segmento


  } else if (Empresa == "Ecopetrol CB"){

    Simulaciones = Cortador_matriz_simulaciones(Empresa = "Ecopetrol",Matriz_Fechas = Matriz_Fechas,Simulaciones_cortar = Simulaciones)
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_PG
      Agregado_inicial = Contable$Ecopetrol_CB$Inicial_PG
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      ### ------------- Contable ------------ ###
      Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_FC
      Agregado_inicial =  Contable$Ecopetrol_CB$Inicial_FC
    }
  } else {
    print("a")
    ### ---------- Selecciona el tipo de sensibilidad ------------ ###
    ### ------------- P&G ------------ ###
    if (Tipo == 1){
      ### ------------- Contable ------------ ###
      if (Modo_contable == TRUE){
        Sensibilidades_exposicion = Contable$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Contable$Inicial_PG[[Empresa]]

      } else if( Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_PG[[Empresa]]
        Agregado_inicial = Teorica$Inicial_PG[[Empresa]]

      }
      ### ------------- Flujo de caja ------------ ###
    } else if(Tipo == 2) {
      if (Modo_contable == TRUE){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Sensibilidades_FC[[Empresa]]
        Agregado_inicial =  Contable$Inicial_FC[[Empresa]]

      } else if (Modo_contable == FALSE) {
        ### ------------- Teorica ------------ ###
        Sensibilidades_exposicion = Teorica$Sensibilidades_FC[[Empresa]]
        Agregado_inicial = Teorica$Inicial_FC[[Empresa]]

      }
    }

    ### ------------------ Q: (COP/USD)------------------ ###
    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###

    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###
    if (Moneda == "USD"){
      Agregado_inicial = Agregado_inicial/t(Simulaciones[,"TRM_Promedio",])

      #Sensibilidades_exposicion[,,"USD/LC"] = Sensibilidades_exposicion[,,"USD/LC"] - Agregado_inicial
      ### --- Se le quita  el P&G + 1 que fue calculado en el codigo original --- ###
      Q = replicate(dim(Sensibilidades_exposicion)[3],Simulaciones[,grep(colnames(Simulaciones),pattern = "TRM_Promedio"),])
      Q = aperm(Q,c(2,1,3))
      ### --- Se pasa todo a dolares nuevamente --- ###
      Sensibilidades_exposicion = (Sensibilidades_exposicion/Q)
    }

  }

  ### --- Se ajusta las dimensiones ---- ###
  #Sensibilidades_exposicion = Sensibilidades_exposicion[,-dim(Sensibilidades_exposicion)[2],]
  ### --- Se ajusta las dimensiones ---- ###
  Agregado_inicial = Agregado_inicial[,-dim(Agregado_inicial)[2]]



  ########### --------- BASE --------- ########
  PG_base = Agregado_inicial
  Horizonte = (dim(PG_base)[2])
  PG_base = PG_base
  EBITDA_Base = rowSums(PG_base)

  ########### --------- Cantidades --------- ########
  NDIA = Cantidad
  if (Unidades == "Barriles"){
    NMES = (NDIA*365000)/4
  } else {
    NMES = (NDIA)/4

  }
  Vector_cantidades = rep(NMES,(Horizonte))

  ########### --------- identifica si esta en niveles o diferenciales --------- ########
  Compra_producto = Producto_identificado_niveles(Factor = Compra,Simulaciones = Simulaciones)
  ##### ----------- Se ajusta el horizonte y se elimina el primer observado ---------- ####
  Compra_producto = Compra_producto[c(1:Horizonte),][-1,]
  ########### --------- identifica si esta en niveles o diferenciales --------- ########
  Venta_producto = Producto_identificado_niveles(Factor = Venta,Simulaciones = Simulaciones)
  ##### ----------- Se ajusta el horizonte y se elimina el primer observado ---------- ####
  Venta_producto = Venta_producto[c(1:Horizonte),][-1,]
  ##### ----------- TRM Observada ---------- ####
  TRM_transformacion = Matriz_simulaciones[c(1:Horizonte),"USD/LC",][-1,]
  ### Positivo si yo pago
  ### Negativo si me pagan
  ########## --------- Ganacias ---------- ##########
  GananciaSwaps = Vector_cantidades*(Compra_producto-Venta_producto-Spread)

  ########## --------- USD/COP ---------- ##########
  if (Moneda == "COP"){
    print("COP")
    GananciaSwaps = GananciaSwaps*(TRM_transformacion)
  } else {
    GananciaSwaps = GananciaSwaps
  }
  ########## --------- Cobertura ---------- ##########
  PG_cubierto = EBITDA_Base + rowSums(t(GananciaSwaps))

  ########## --------- Resultados ---------- ##########
  Resultados = NULL
  Resultados = as.list(Resultados)
  Resultados[["Base"]] = EBITDA_Base
  Resultados[["Cubierto"]] = PG_cubierto
  return(Resultados)
}

Empresa_swaps_panel_indiviudal = function(Unidades,Empresa,Tipo =1,input,Nombre_unico){
  if(Empresa == "Ecopetrol CB"){
    Empresa_moneda <- "Barranca"
    Empresa = "Ecopetrol CB"
  } else {
    Empresa_moneda <- Empresa
  }

  tagList(
    fluidRow(
      h2(HTML('<strong><font color="#002e5b">Swaps</font></strong>')),
      HTML('<p align="justify" <p style="font-family:verdana;"><br>
           El usuario puede definir los productos que desea intercambiar, y la herramienta compara
           este riesgo con el caso base (sin coberturas). Se debe definir, el Strike del SWAP
           y la cantidad a intercambiar. El signo del Strike depende la posición que se este
           intercambiando. Particularmente, es positivo si se paga por la posición,
           y negativo si me pagan.</p></p>'),
      column(6,
             pickerInput(
               inputId = paste0("Swaps_compra",Empresa_moneda,Nombre_unico),
               label = HTML(paste0('Compra <a id=\"',paste0(paste0(Empresa,"SWAPS_compra_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
               choices = Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Buscador_swaps_activos(Empresa = Empresa)[[Unidades]],collapse = "$|^"),"$"))),"Nombre"]
             )),
      column(6,
             pickerInput(
               inputId = paste0("Swaps_venta",Empresa_moneda,Nombre_unico),
               label = HTML(paste0('Venta <a id=\"',paste0(paste0(Empresa,"SWAPS_venta_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
               choices = Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Buscador_swaps_activos(Empresa = Empresa)[[Unidades]],collapse = "$|^"),"$"))),"Nombre"]
             ))),
    ############# ----------- Cantidad ------------- ######
    sliderTextInput(inputId = paste0("Spread_swap",Empresa,Tipo,Nombre_unico),
                    label = HTML(paste0('Spread <a id=\"',paste0(paste0(Empresa,"SWAPS_Spread_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                    choices = c(seq(-200,-10,by = 10),seq(-10,10,by = 0.5),seq(10,200,by = 10)),selected = 0,grid = T),
    ############# ----------- Cantidad ------------- ######
    sliderTextInput(inputId = paste0("Cantidad_swap",Empresa,Tipo,Nombre_unico),
                    label = HTML(paste0('Cantidad <a id=\"',paste0(paste0(Empresa,"SWAPS_cantidad_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                    choices = unlist(ifelse(Unidades == "Barriles",yes = list(seq(0,500,by = 5)),no = list(seq(0,100000,by = 1000)))),selected = 0,grid = T),
    ### --- Variable --- ###
    renderUI({
      assign(x = paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico),
      value = Resultados_cobeturas_swaps(Empresa = Empresa,Unidades = Unidades,
        Cantidad = input[[paste0("Cantidad_swap",Empresa,Tipo,Nombre_unico)]],
        Compra = Nombres_shiny[c(grep(x = Nombres_shiny[,"Nombre"],pattern = input[[paste0("Swaps_compra",Empresa_moneda,Nombre_unico)]])),"Indice"],
        Venta = Nombres_shiny[c(grep(x = Nombres_shiny[,"Nombre"],pattern = input[[paste0("Swaps_venta",Empresa_moneda,Nombre_unico)]])),"Indice"],
        Spread = input[[paste0("Spread_swap",Empresa,Tipo,Nombre_unico)]],
        Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
        Tipo = Tipo,
        Contable = Resultados_agregacion_contable))
      ### ------------ Resultados ----------- ###
      do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico),
                                              Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                              Base = get(paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico))[["Base"]],
                                              Cobertura = get(paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico))[["Cubierto"]],
                                              Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                                              Aversion = A1))}),
    ### ---------- Modales -------- ###
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_compra_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "La empresa entra en una posición larga en este subyacente."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_venta_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "La empresa entra en una posición corta en este subyacente."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_Spread_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "Diferencia de precios pactada. Un valor positivo supone que la empresa paga el spread. Una diferencia negativa supone que la empresa recibe el spread."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_cantidad_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "Para productos denominados en barriles, las unidades de nocional de cobertura son miles de barriles por día. Para calcular el monto cubierto en un año, en barriles, se debe multiplicar el número ingresado por 365,000. (Para productos denominados en toneladas, las unidades de cobertura son toneladas por año.)")
    )
}

Empresa_swaps_panel_agregado = function(Unidades,Empresa,Tipo =1,input,Modo_contable,Nombre_unico){
  if(Empresa == "Ecopetrol CB"){
    Empresa_moneda <- "Barranca"
    Empresa = "Ecopetrol CB"
  } else {
    Empresa_moneda <- Empresa
  }

  tagList(
    fluidRow(
      h2(HTML('<strong><font color="#002e5b">Swaps</font></strong>')),
      HTML('<p align="justify" <p style="font-family:verdana;"><br>
           El usuario puede definir los productos que desea intercambiar, y la herramienta compara
           este riesgo con el caso base (sin coberturas). Se debe definir, el Strike del SWAP
           y la cantidad a intercambiar. El signo del Strike depende la posición que se este
           intercambiando. Particularmente, es positivo si se paga por la posición,
           y negativo si me pagan.</p></p>'),
      column(6,
             pickerInput(
               inputId = paste0("Swaps_compra",Empresa_moneda,Nombre_unico),
               label = HTML(paste0('Compra <a id=\"',paste0(paste0(Empresa,"SWAPS_compra_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
               choices = Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Buscador_swaps_activos(Empresa = Empresa)[[Unidades]],collapse = "$|^"),"$"))),"Nombre"]
             )),
      column(6,
             pickerInput(
               inputId = paste0("Swaps_venta",Empresa_moneda,Nombre_unico),
               label = HTML(paste0('Venta <a id=\"',paste0(paste0(Empresa,"SWAPS_venta_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
               choices = Nombres_shiny[c(grep(x = Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Buscador_swaps_activos(Empresa = Empresa)[[Unidades]],collapse = "$|^"),"$"))),"Nombre"]
             ))),
    ############# ----------- Cantidad ------------- ######
    sliderTextInput(inputId = paste0("Spread_swap",Empresa,Tipo,Nombre_unico),
                    label = HTML(paste0('Spread <a id=\"',paste0(paste0(Empresa,"SWAPS_Spread_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                    choices = c(seq(-200,-10,by = 10),seq(-10,10,by = 0.5),seq(10,200,by = 10)),selected = 0,grid = T),
    ############# ----------- Cantidad ------------- ######
    sliderTextInput(inputId = paste0("Cantidad_swap",Empresa,Tipo,Nombre_unico),
                    label = HTML(paste0('Cantidad <a id=\"',paste0(paste0(Empresa,"SWAPS_cantidad_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                    choices = unlist(ifelse(Unidades == "Barriles",yes = list(seq(0,500,by = 5)),no = list(seq(0,100000,by = 1000)))),selected = 0,grid = T),
    ### --- Variable --- ###
    renderUI({
      assign(x = paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico),
             value = Resultados_cobeturas_swaps(Empresa = Empresa,Unidades = Unidades,
                                                Cantidad = input[[paste0("Cantidad_swap",Empresa,Tipo,Nombre_unico)]],
                                                Compra = Nombres_shiny[c(grep(x = Nombres_shiny[,"Nombre"],pattern = input[[paste0("Swaps_compra",Empresa_moneda,Nombre_unico)]])),"Indice"],
                                                Venta = Nombres_shiny[c(grep(x = Nombres_shiny[,"Nombre"],pattern = input[[paste0("Swaps_venta",Empresa_moneda,Nombre_unico)]])),"Indice"],
                                                Spread = input[[paste0("Spread_swap",Empresa,Tipo,Nombre_unico)]],
                                                Moneda = "COP",
                                                Tipo = Tipo,Modo_contable = Modo_contable,
                                                Contable = Resultados_agregacion_contable))
      ### ------------ Resultados ----------- ###
      do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico),
                                              Moneda = "COP",
                                              Base = get(paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico))[["Base"]],
                                              Cobertura = get(paste0("Coberturas_SWAPS",Empresa,"_PG",Nombre_unico))[["Cubierto"]],
                                              Patrimonio = Patrimonios_completos[c(grep(Patrimonios_completos[,"Empresa"],pattern = paste0("Patrimonio_",Empresa))),"Patrimonio"],
                                              Aversion = A1))}),
    ### ---------- Modales -------- ###
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_compra_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "La empresa entra en una posición larga en este subyacente."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_venta_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "La empresa entra en una posición corta en este subyacente."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_Spread_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "TDiferencia de precios pactada. Un valor positivo supone que la empresa paga el spread. Una diferencia negativa supone que la empresa recibe el spread."),
    shinyBS::bsTooltip(id = paste0(paste0(Empresa,"SWAPS_cantidad_explicacion",Tipo,Nombre_unico),gsub(Empresa,pattern = " ",replacement = "")),
                       title = "Para productos denominados en barriles, las unidades de nocional de cobertura son miles de barriles por día. Para calcular el monto cubierto en un año, en barriles, se debe multiplicar el número ingresado por 365,000. (Para productos denominados en toneladas, las unidades de cobertura son toneladas por año.)")
    )
}

hasCssClass <- function(tag, class) {
  if (is.null(tag$attribs) || is.null(tag$attribs$class))
    return(FALSE)

  classes <- strsplit(tag$attribs$class, " +")[[1]]
  return(class %in% classes)
}


# Make sure a tab name is valid (there's no "." in it).
validateTabName <- function(name) {
  if (grepl(".", name, fixed = TRUE)) {
    stop("tabName must not have a '.' in it.")
  }
}
validStatuses <- c("primary", "success", "info", "warning", "danger")
tagAssert <- function(tag, type = NULL, class = NULL, allowUI = TRUE) {
  if (!inherits(tag, "shiny.tag")) {
    print(tag)
    stop("Expected an object with class 'shiny.tag'.")
  }

  # Skip dynamic output elements
  if (allowUI &&
      (hasCssClass(tag, "shiny-html-output") ||
       hasCssClass(tag, "shinydashboard-menu-output"))) {
    return()
  }

  if (!is.null(type) && tag$name != type) {
    stop("Expected tag to be of type ", type)
  }

  if (!is.null(class)) {
    if (is.null(tag$attribs$class)) {
      stop("Expected tag to have class '", class, "'")

    } else {
      tagClasses <- strsplit(tag$attribs$class, " ")[[1]]
      if (!(class %in% tagClasses)) {
        stop("Expected tag to have class '", class, "'")
      }
    }
  }
}


validateStatus <- function(status) {

  if (status %in% validStatuses) {
    return(TRUE)
  }

  stop("Invalid status: ", status, ". Valid statuses are: ",
       paste(validStatuses, collapse = ", "), ".")
}


dropdownMenu_Quantil = function (..., type = c("messages", "notifications", "tasks"),
          badgeStatus = "primary", icon = NULL, headerText = NULL,
          .list = NULL)
{
  type <- match.arg(type)
  if (!is.null(badgeStatus))
    validateStatus(badgeStatus)
  items <- c(list(...), .list)
  lapply(items, tagAssert, type = "li")
  dropdownClass <- paste0("dropdown ", type, "-menu")
  if (is.null(icon)) {
    icon <- switch(type, messages = shiny::icon("envelope"),
                   notifications = shiny::icon("info"),
                   tasks = shiny::icon("tasks"))
  }
  numItems <- length(items)
  if (is.null(badgeStatus)) {
    badge <- NULL
  }
  else {
    badge <- span(class = paste0("label label-", badgeStatus))
  }
  if (is.null(headerText)) {
    headerText <- box(
      width = NULL,
      title = HTML('<strong><font color="#002e5b">&nbsp;  &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Acerca de nóstros</font></strong>'),
      status = NULL,
      appButton(
        url = "http://quantil.co/#intro",
        label = "Nosotros",
        icon = 'fa fa-address-card',
        enable_badge = TRUE,
        badgeColor = "purple",
        badgeLabel = '!'
      ),
      appButton(
        label = "Contáctanos",url = 'http://quantil.co/#contacto',
        icon = "fa fa-edit",
        enable_badge = FALSE,
        badgeColor = NULL,
        badgeLabel = NULL
      )
    )

  }
  tags$li(class = dropdownClass, a(href = "#", class = "dropdown-toggle",
                                   `data-toggle` = "dropdown", icon, badge), tags$ul(class = "dropdown-menu",
                                                                                     tags$li(class = "header", headerText), tags$li(tags$ul(class = "menu",
                                                                                                                                            box(
                                                                                                                                              width = NULL,
                                                                                                                                              title = HTML('<strong><font color="#002e5b">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Compártenos</font></strong>'),
                                                                                                                                              status = NULL,
                                                                                                                                              socialButton(
                                                                                                                                                url = "https://www.facebook.com/quantil/",
                                                                                                                                                type = "facebook"
                                                                                                                                              ),
                                                                                                                                              socialButton(
                                                                                                                                                url = "https://twitter.com/QuantilMA",
                                                                                                                                                type = "twitter"
                                                                                                                                              ),
                                                                                                                                              socialButton(
                                                                                                                                                url = "https://www.linkedin.com/in/quantil-sas-014086158/",
                                                                                                                                                type = "linkedin"
                                                                                                                                              )
                                                                                                                                            )))))
}


Graficar_box  = function (..., id, front_title = NULL, back_title = NULL,
                          front_btn_text = "More", back_btn_text = "Back to main",
                          header_img = NULL, main_img = NULL, width = 6)
{
  id_front <- id
  id_back <- id_front + 10000
  if (is.null(id))
    stop("card id cannot be null and must be unique")
  flipBoxTag <- shiny::tags$div(class = paste0("col sm-", width),
                                shiny::tags$div(class = "rotate-container", shiny::tags$div(class = paste0("card card-front-",
                                                                                                           id, " text-center"), style = "background-color: #ffffff;",
                                                                                            shiny::tags$div(class = paste0("card-background-",
                                                                                                                           id)), shiny::tags$div(class = "card-block", shiny::tags$h3(class = "card-title",
                                                                                                                                                                                                                                       front_title), shiny::tags$p(...))), shiny::tags$div(class = paste0("card card-back-",
                                                                                                                                                                                                                                                                                                                                              id, " text-center"), style = "background-color: #ffffff;",
                                                                                                                                                                                                                                                                                                                               shiny::br(), shiny::tags$div(class = "card-header",
                                                                                                                                                                                                                                                                                                                                                            shiny::tags$p(shiny::tags$button(id = paste0("btn-",
                                                                                                                                                                                                                                                                                                                                                                                                         id_back), class = "btn btn-primary btn-rotate",
                                                                                                                                                                                                                                                                                                                                                                                             shiny::tags$i(class = "fa fa-long-arrow-left"),
                                                                                                                                                                                                                                                                                                                                                                                             back_btn_text), shiny::h4(back_title))), shiny::hr())))
  shiny::tagList(shiny::singleton(shiny::tags$head(shiny::tags$style(shiny::HTML(paste0("/* Card styles for rotation */\n              .rotate-container {\n                position: relative;\n               }\n               .rotate-container .card-front-",
                                                                                        id, ", .rotate-container .card-back-", id, " {\n                width: 100%;\n                height: 100%;\n                -webkit-transform: perspective(600px) rotateY(0deg);\n                transform: perspective(600px) rotateY(0deg);\n                -webkit-backface-visibility: hidden;\n                backface-visibility: hidden;\n                transition: all 0.5s linear 0s;\n               }\n               .rotate-container .card-back-",
                                                                                        id, " {\n                -webkit-transform: perspective(1600px) rotateY(180deg);\n                transform: perspective(1600px) rotateY(180deg);\n                position: absolute;\n                top: 0;\n                left: 0;\n                right: 0;\n               }\n               .rotate-container .rotate-card-front-",
                                                                                        id, " {\n                -webkit-transform: perspective(1600px) rotateY(-180deg);\n                transform: perspective(1600px) rotateY(-180deg);\n               }\n               .rotate-container .rotate-card-back-",
                                                                                        id, " {\n                -webkit-transform: perspective(1600px) rotateY(0deg);\n                transform: perspective(1600px) rotateY(0deg);\n               }\n               \n               /* Modified card styles */\n               .card {\n                box-shadow: 0 8px 6px -6px rgba(0, 0, 0, 0.5);\n               }\n               .card .card-header p {\n                margin: 0;\n               }\n               \n               .card .card-background-",
                                                                                        id, " {\n                background: url('", header_img,
                                                                                        "');\n                height: 8em;\n                background-position: center center;\n                background-size: cover;\n               }\n               .card .avatar {\n                max-width: 6em;\n                max-height: 6em;\n                margin-top: -4em;\n                margin-bottom: 1em;\n                border: 4px solid white;\n                border-radius: 50%;\n                background: radial-gradient(#e3e3e3, #329A7C, #109381);\n               }\n               .card .btn {\n                margin-bottom: 1em;\n                cursor: pointer;\n               }\n               .card .social-links li {\n                margin: 0.5em;\n               }\n               .card .social-links a {\n                font-size: 1.5em;\n               }\n               "))),
                                                   shiny::tags$script(shiny::HTML(paste0("$(function() {\n                // For card rotation\n                $('#btn-",
                                                                                         id_front, "').click(function(){\n                  $('.card-front-",
                                                                                         id, "').addClass(' rotate-card-front-", id, "');\n                  $('.card-back-",
                                                                                         id, "').addClass(' rotate-card-back-", id, "');\n                });\n                $('#btn-",
                                                                                         id_back, "').click(function(){\n                  $('.card-front-",
                                                                                         id, "').removeClass(' rotate-card-front-", id, "');\n                  $('.card-back-",
                                                                                         id, "').removeClass(' rotate-card-back-", id, "');\n                });\n              });\n              "))))),
                 flipBoxTag)
}

Resultados_coberturas_put_totales = function(Tipo,Empresa,Empresa_moneda,ID_unico,input,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Modo_contable){
  tagList(
    ######################### -------  Put TRM --------  #########################
    ######################### -------  Put TRM --------  #########################
    box(status = "primary",collapsible = F,title = "Coberturas Puts",height = 1000,width = 4000,
        HTML('<p align="justify" <p style="font-family:verdana;"><br>
             El usuario puede definir porcentajes de coberturas
             con puts para USD/LC y Commodity, y la herramienta compara
             este riesgo con el caso base (sin coberturas).
             Se debe definir, para cada uno, el Strike de las puts
             (contra los precios futuros) y la volatilidad implícita.
             El porcentaje de cobertura de cada factor se define contra
             el promedio de las sensibilidades paralelas.</p></p>'),
        fluidRow(column(6, box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                               tagList(
                                 shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                    title = "Strike de la cobertura put"),
                                 shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Volatilidad_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                    title = "Volatilidad Implícita (%)"),
                                 column(6,textInput(inputId = paste0(ID_unico,"texto_spread_TRM",Empresa),value = -50,
                                                    label = HTML(paste0('Strike vs.Forwards TRM <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                 column(6,textInput(inputId = paste0(ID_unico,"texto_volatilidad_TRM",Empresa), value = "10%",
                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0(ID_unico,"ID_Texto_BS_Volatilidad_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                 sliderTextInput(inputId = paste0(ID_unico,"Pesos_TRM_put_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                 switchInput(
                                   inputId =  paste0(ID_unico,"Cobertura_Put_individual_TRM_activa",Empresa),
                                   label = "Cubertura",
                                   labelWidth = "80px",value = T)))),
                 ######################### -------  PUT Brent --------  #########################
                 column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                              tagList(shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_Brent",gsub(Empresa,pattern = " ",replacement = "")),
                                                         title = "Strike comparado con futuros"),
                                      shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Volatilidad_Brent",gsub(Empresa,pattern = " ",replacement = "")),
                                                         title = "Volatilidad Implícita (%)"),
                                      column(6,textInput(inputId = paste0(ID_unico,"texto_spread_Brent",Empresa),value = 0,
                                                         label = HTML(paste0('Strike vs.Futuros Commodity <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_Brent",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>'))
                                                         ,width = 60)
                                             ),
                                      column(6,textInput(inputId = paste0(ID_unico,"texto_volatilidad_Brent",Empresa), value = "10%",
                                                         label = HTML(paste0('Volatilidad <a id=\"',paste0(ID_unico,"ID_Texto_BS_Volatilidad_Brent",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                      sliderTextInput(inputId = paste0(ID_unico,"Pesos_Brent_put_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                      switchInput(
                                        inputId =  paste0(ID_unico,"Cobertura_Put_individual_Brent_activa",Empresa),
                                        label = "Cubertura",
                                        labelWidth = "80px",value = T))))),
        ######################### ------- Resultados Histograma Puts --------  #########################
        renderUI({
          ######################### ------- Calculo de primas: Put TRM --------  #########################
          assign(x = paste0(ID_unico,"Puts_TRM_individual",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                          Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_TRM",Empresa)]]),
                                                                                          Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_TRM",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                          Moneda = "COP",
                                                                                          Opcion = "Put"),envir = .GlobalEnv)

          ######################### ------- Calculo de primas: Put Brent --------  #########################
          assign(x = paste0(ID_unico,"Puts_Brent_individual",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                            Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_Brent",Empresa)]]),
                                                                                            Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_Brent",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                            Moneda = "COP",
                                                                                            Opcion = "Put"),envir = .GlobalEnv)

          assign(x = paste0(ID_unico,"Coberturas_Puts_individuales_",Empresa,"_PG"),
                 value = Coberturas_empresas_totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                        Empresa = Empresa,
                                                        Insumos_puts_TRM = get( paste0(ID_unico,"Puts_TRM_individual",Empresa)),
                                                        Puts_TRM =  input[[paste0(ID_unico,"Cobertura_Put_individual_TRM_activa",Empresa)]],
                                                        Insumos_puts_brent = get(paste0(ID_unico,"Puts_Brent_individual",Empresa)),
                                                        Puts_Brent = input[[paste0(ID_unico,"Cobertura_Put_individual_Brent_activa",Empresa)]],
                                                        Moneda = "COP",
                                                        Nivel_cobertura = c((as.numeric(input[[paste0(ID_unico,"Pesos_TRM_put_individual",Empresa)]])/100),(as.numeric(input[[paste0(ID_unico,"Pesos_Brent_put_individual",Empresa)]])/100)),
                                                        Tipo = Tipo,
                                                        Cobertura = "Puts",
                                                        Contable = Resultados_agregacion_contable,
                                                        Teorica = Resultados_agregacion_teorica,
                                                     Modo_contable = Modo_contable))
          ### ------------ Resultados ----------- ###
          do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0(ID_unico,"Coberturas_Puts_individuales_",Empresa,"_PG"),
                                                  Moneda = "COP",
                                                  Base = get(paste0(ID_unico,"Coberturas_Puts_individuales_",Empresa,"_PG"))[["Base"]],
                                                  Cobertura = get(paste0(ID_unico,"Coberturas_Puts_individuales_",Empresa,"_PG"))[["Cobertura"]],
                                                  Patrimonio = Patrimonios_completos[c(grep(Patrimonios_completos[,"Empresa"],pattern = paste0("Patrimonio_",Empresa))),"Patrimonio"],
                                                  Aversion = A1))})
      ))
}



Resultados_coberturas_collares_totales = function(Tipo,Empresa,Empresa_moneda,ID_unico,Fecha_inicial = Filiales_correr[[1]]$Fecha_inicial,Fecha_final = Filiales_correr[[1]]$Fecha_minima,Modo_contable,input){
  tagList(
    ######################### -------  Put TRM --------  #########################
    box(status = "primary",collapsible = F,title = "Coberturas - Collares",height = 1000,width = 4000,
        HTML('<p align="justify" <p style="font-family:verdana;"><br>El usuario puede
             definir porcentajes de coberturas con collares para USD/LC y Commodity,
             y la herramienta compara este riesgo con el caso base (sin coberturas).
             Se debe definir, para cada uno, el Strike de las puts y calls
             (contra los precios futuros) y la volatilidad implícita.
             El porcentaje de cobertura de cada factor se define contra el promedio
             de las sensibilidades paralelas.</p></p>'),
        fluidRow(column(6,box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                              tagList(shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_Put_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                         title = "Strike de la cobertura Put"),
                                      shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_Call_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                         title = "Strike de la cobertura Call"),
                                      shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Volatilidad_TRM_collar",gsub(Empresa,pattern = " ",replacement = "")),
                                                         title = "Volatilidad Implícita (%)"),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_spread_Put_TRM",Empresa),value = -100,
                                                         label = HTML(paste0('Put <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_Put_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_spread_Call_TRM",Empresa),value = +100,
                                                         label = HTML(paste0('Call <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_Call_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_volatilidad_TRM_collares",Empresa), value = "10%",
                                                         label = HTML(paste0('Volatilidad <a id=\"',paste0(ID_unico,"ID_Texto_BS_Volatilidad_TRM_collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      sliderTextInput(inputId = paste0(ID_unico,"Pesos_TRM_put_collares_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                      switchInput(
                                        inputId =  paste0(ID_unico,"Cobertura_collares_TRM_activa",Empresa),
                                        label = "Cubertura",
                                        labelWidth = "80px",value = T
                                      )))),

                 ######################### -------  PUT Brent --------  #########################
                 column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                              tagList(shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_Put_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Put"),
                                      shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Strike_Call_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Call"),
                                      shinyBS::bsTooltip(id = paste0(ID_unico,"ID_Texto_BS_Volatilidad_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Volatilidad Implícita (%)"),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_spread_Put_Brent",Empresa),value = -10,
                                                         label = HTML(paste0('Put <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_Put_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_spread_Call_Brent",Empresa),value = +10,
                                                         label = HTML(paste0('Call <a id=\"',paste0(ID_unico,"ID_Texto_BS_Strike_Call_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      column(4,textInput(inputId = paste0(ID_unico,"texto_volatilidad_Brent_collares",Empresa), value = "10%",
                                                         label = HTML(paste0('Volatilidad <a id=\"',paste0(ID_unico,"ID_Texto_BS_Volatilidad_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                      sliderTextInput(inputId = paste0(ID_unico,"Pesos_Brent_put_collares_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                      switchInput(
                                        inputId =  paste0(ID_unico,"Cobertura_collares_Brent_activa",Empresa),
                                        label = "Cubertura",
                                        labelWidth = "80px",value = T))))),
        ######################### ------- Resultados Histograma Puts --------  #########################
        renderUI({

          ######################### ------- Calculo de primas: Put TRM --------  #########################
          assign(x = paste0(ID_unico,"Puts_TRM_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                          Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_Put_TRM",Empresa)]]),
                                                                                          Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_TRM_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                          Moneda = "COP",
                                                                                          Opcion = "Put"),envir = .GlobalEnv)


          assign(x = paste0(ID_unico,"Calls_TRM_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                           Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_Call_TRM",Empresa)]]),
                                                                                           Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_TRM_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                           Moneda ="COP",
                                                                                           Opcion = "Call"),envir = .GlobalEnv)


          ######################### ------- Calculo de primas: Put Brent --------  #########################
          assign(x = paste0(ID_unico,"Puts_Brent_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                            Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_Put_Brent",Empresa)]]),
                                                                                            Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_Brent_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                            Moneda = "COP",
                                                                                            Opcion = "Put"),envir = .GlobalEnv)

          ######################### ------- Calculo de primas: Put Brent --------  #########################
          assign(x = paste0(ID_unico,"Calls_Brent_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                             Spread = as.numeric(input[[paste0(ID_unico,"texto_spread_Call_Brent",Empresa)]]),
                                                                                             Volatilidad = (as.numeric(gsub(input[[paste0(ID_unico,"texto_volatilidad_Brent_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                             Moneda = "COP",
                                                                                             Opcion = "Call"),envir = .GlobalEnv)


          assign(x = paste0(ID_unico,"Coberturas_COLLARES_individuales_",Empresa,"_PG"),
                 value = Coberturas_empresas_totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                     Empresa = Empresa,
                                                     Insumos_puts_TRM = get(paste0(ID_unico,"Puts_TRM_individual_Collares",Empresa)),
                                                     Insumos_call_TRM = get(paste0(ID_unico,"Calls_TRM_individual_Collares",Empresa)),
                                                     Insumos_puts_brent = get(paste0(ID_unico,"Puts_Brent_individual_Collares",Empresa)),
                                                     Insumos_call_brent = get(paste0(ID_unico,"Calls_Brent_individual_Collares",Empresa)),
                                                     Puts_TRM =  input[[paste0(ID_unico,"Cobertura_collares_TRM_activa",Empresa)]],
                                                     Puts_Brent = input[[paste0(ID_unico,"Cobertura_collares_Brent_activa",Empresa)]],
                                                     Moneda = "COP",
                                                     Nivel_cobertura = c((as.numeric(input[[paste0(ID_unico,"Pesos_TRM_put_collares_individual",Empresa)]])/100),(as.numeric(input[[paste0(ID_unico,"Pesos_Brent_put_collares_individual",Empresa)]])/100)),
                                                     Cobertura = "Collares",
                                                     Tipo = Tipo,
                                                     Contable = Resultados_agregacion_contable,
                                                     Teorica = Resultados_agregacion_teorica,
                                                     Modo_contable = Modo_contable),envir = .GlobalEnv)


          ### ------------ Resultados ----------- ###
          do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0(ID_unico,"Coberturas_COLLARES_individuales_",Empresa,"_PG"),
                                                  Moneda = "COP",
                                                  Base = get(paste0(ID_unico,"Coberturas_COLLARES_individuales_",Empresa,"_PG"))[["Base"]],
                                                  Cobertura = get(paste0(ID_unico,"Coberturas_COLLARES_individuales_",Empresa,"_PG"))[["Cobertura"]],
                                                  Patrimonio = Patrimonios_completos[c(grep(Patrimonios_completos[,"Empresa"],pattern = paste0("Patrimonio_",Empresa))),"Patrimonio"],
                                                  Aversion = A1))}))
    )
}



Coberturas_empresas_agregadas_tabs = function(x,input){
    tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
             box(title = x,solidHeader = T,height = 2000,status = "primary",width = 4000,
                     tabBox(side = "right", height = 1000,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Forwards - Futuros</font></strong> <a id=\"',paste0("Coberturas_futuros_agregados_idunico",gsub(x,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                            ##################################------------ Futuros ------------############################
                            tabPanel(title = HTML(paste0('<strong><font color="#46555f">Forwards - Futuros</font></strong> <a id=\"',paste0("Coberturas_futuros_agregados_idunico",gsub(x,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                     shinyBS::bsTooltip(id = paste0("Coberturas_futuros_agregados_idunico",gsub(x,pattern = " ",replacement = "_")),title = "Fijación certera de precio de compra/venta, según condiciones actuales de mercados, a cero costo."),

                           tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                        ##################################------------ Contable ------------############################
                        tabPanel(title = "P&G",
                                 ###### -------------------- P&G Contable  ------------------ #####
                                 tabBox(side = "right", height = 800,width = 1500,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_cobertura",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_cobertura",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_individual_cobertura",x),title = "Consolidación usando práctica contable."),
                                                 #### ---- Agregacion - Contable ---- ####
                                                 ### ---- Histograma - Agregado ---- ###
                                                 do.call(tagList,Barra_factores_cubrir(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input = input,Unico = "PG_contable")),
                                                 ### ---- Histograma - Agregado ---- ###
                                                 renderPlotly(Graficar_coberturas(Moneda = "COP",Base = (Coberturas_empresas_totales(Moneda = "COP",Cobertura = "Futuros",Empresa = x,Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                              Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_contable"),
                                                                                                                              Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Base"]]),
                                                                                  Cobertura = (Coberturas_empresas_totales(Moneda = "COP",Cobertura = "Futuros",Empresa = x,Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                    Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_contable"),
                                                                                                                    Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Cobertura"]])
                                                                                  ,Optimo = (Riesgo_agregado_contable_PG$Optima))),

                                                 ### ---- Medidas de riesgo - Agregado ---- ###
                                                 HTML(paste0('<strong><font color="#002e5b">Sin coberturas</font></strong>')),
                                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                                           Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg",PG_inicial = Coberturas_empresas_totales(Moneda = "COP",Cobertura = "Futuros",Empresa = x,Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_contable"),
                                                                                                                                     Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Base"]],
                                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE)))
                                                 ,Modales_riesgo(Nombre_unico = "Modales_agregados_pg"),HTML(paste0('<strong><font color="#002e5b">Con coberturas</font></strong>')),
                                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                                           Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg2",PG_inicial = Coberturas_empresas_totales(Moneda = "COP",Cobertura = "Futuros",Empresa = x,Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_contable"),
                                                                                                                                     Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Cobertura"]],
                                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
                                                 Modales_riesgo(Nombre_unico = "Modales_agregados_pg2"),
                                                 ##### ------ Optimas unicamente para las agregadas ----- ####
                                                 tagList(renderUI({if(x == "Agregado"){
                                                   tagList(HTML(paste0('<strong><font color="#002e5b">Coberturas óptimas</font></strong>')),
                                                           renderDataTable(datatable(selection = list(target = "cell"),Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg3",PG_inicial = as.numeric(Riesgo_agregado_contable_PG$Optima),Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                                                     escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
                                                           Modales_riesgo(Nombre_unico = "Modales_agregados_pg3")
                                                   )
                                                 } else {
                                                   tagList("")
                                                 }
                                                   }))

                                        ),

                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_contable",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_contable",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                 #### ---- Agregacion - Contable ---- ####
                                                 ### ---- Histograma - Agregado ---- ###
                                                 do.call(tagList,Barra_factores_cubrir(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input = input,Unico = "PG_Teorico")),
                                                 ### ---- Histograma - Agregado ---- ###
                                                 renderPlotly(Graficar_coberturas(Moneda = "COP",Optimo = NA,Base = (Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                                          Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_Teorico"),
                                                                                                                                          Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = FALSE)[["Base"]]),
                                                                                  Cobertura = (Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = c(Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas)),
                                                                                                                    Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_Teorico"),
                                                                                                                    Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = FALSE)[["Cobertura"]]))),

                                                 ### ---- Medidas de riesgo - Agregado ---- ###
                                                 HTML(paste0('<strong><font color="#002e5b">Sin coberturas</font></strong>')),
                                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                                           Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg4",PG_inicial = Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_Teorico"),
                                                                                                                                     Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = FALSE)[["Base"]],
                                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),

                                                 Modales_riesgo(Nombre_unico = "Modales_agregados_pg4"),HTML(paste0('<strong><font color="#002e5b">Con coberturas</font></strong>')),
                                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                                           Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg5",PG_inicial = Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "PG_Teorico"),
                                                                                                                                     Tipo = 1,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = FALSE)[["Cobertura"]],
                                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
                                                 Modales_riesgo(Nombre_unico = "Modales_agregados_pg5")
                                        ))
                        ),

                        ##################################------------ Teorico ------------############################
                        tabPanel(title = "Flujo de caja",
                                 do.call(tagList,Barra_factores_cubrir(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input = input,Unico = "FC_agregado")),
                                ### ---- Histograma - Agregado ---- ###
                                 renderPlotly(Graficar_coberturas(Moneda = "COP",Base = (Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                    Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "FC_agregado"),
                                                                                                    Tipo = 2,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Base"]]),
                                                                  Cobertura = (Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                    Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "FC_agregado"),
                                                                                                    Tipo = 2,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Cobertura"]])
                                                                  ,Optimo = NA)),

                                 ### ---- Medidas de riesgo - Agregado ---- ###
                                 HTML(paste0('<strong><font color="#002e5b">Sin coberturas</font></strong>')),
                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                           Medidas_riesgo_agregada(Nombre_unico = "Modales_agregados_pg6",PG_inicial = Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "FC_agregado"),
                                                                                                                     Tipo = 2,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Base"]],
                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))),
                                Modales_riesgo(Nombre_unico = "Modales_agregados_pg6"),HTML(paste0('<strong><font color="#002e5b">Con coberturas</font></strong>')),
                                 renderDataTable(datatable(selection = list(target = "cell"),
                                                           Medidas_riesgo_agregada(PG_inicial = Coberturas_empresas_totales(Empresa = x,Moneda = "COP",Cobertura = "Futuros",Factores_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),
                                                                                                                     Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(x,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = x,input=input,Unico = "FC_agregado"),
                                                                                                                     Tipo = 2,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE)[["Cobertura"]],
                                                                                   Aversion = A1,Patrimonio = Patrimonio_agregado),
                                                           escape = F,options = list(dom = 't',searching = FALSE, paging = FALSE,ordering = FALSE,info = FALSE))))

                        )),
                        ##################################------------ PUTS ------------############################
                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">&nbsp &nbsp &nbspPuts&nbsp &nbsp &nbsp</font></strong> <a id=\"',paste0("Coberturas_puts_agregadas",gsub(x,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                 shinyBS::bsTooltip(id = paste0("Coberturas_puts_agregadas",gsub(x,pattern = " ",replacement = "_")),title = "Fijación de precio mínimo de venta, a costo igual a la prima de la opción, que depende de este precio mínimo contra el precio futuro actual, del plazo, y de la volatilidad del subyacente."),
                                 tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                                        ##################################------------ Contable ------------############################
                                        tabPanel(title = "P&G",
                                                 ###### -------------------- P&G Contable  ------------------ #####
                                                 tabBox(side = "right", height = 800,width = 1500,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturaxx",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturaxx",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_individual_coberturaxx",x),title = "Consolidación usando práctica contable."),
                                                                 do.call(tagList,Resultados_coberturas_put_totales(Tipo = 1,Empresa = x,Empresa_moneda = x,ID_unico = "PG_agregado_consolidado_teorico",input=input,Modo_contable = T))



                                                                 ),
                                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_contable3",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_contable3",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                                 do.call(tagList,Resultados_coberturas_put_totales(Tipo = 1,Empresa = x,Empresa_moneda = x,ID_unico = "PG_agregado_consolidado_contable",input=input,Modo_contable = F))))
                                        ),
                                        ##################################------------ Teorico ------------############################
                                        tabPanel(title = "Flujo de caja",
                                                 do.call(tagList,Resultados_coberturas_put_totales(Tipo = 2,Empresa = x,Empresa_moneda = x,ID_unico = "FC_agregado_contabl",input=input,Modo_contable = T))

                                                 ))),

                        ##################################------------ Collares ------------############################
                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">&nbsp &nbsp &nbsp Collares &nbsp &nbsp &nbsp</font></strong> <a id=\"',paste0("Coberturas_Collares_agregados_a",gsub(x,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                 shinyBS::bsTooltip(id = paste0("Coberturas_Collares_agregados_a",gsub(x,pattern = " ",replacement = "_")),title = "Compra de put y venta de call: fijación de precio mínimo de venta, y precio máximo de venta. Se determina el costo (que puede ser positivo, negativo, o cero) según los strikes, el plazo y la volatilidad del subyacente."),
                                 tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                                        ##################################------------ Contable ------------############################
                                        tabPanel(title = "P&G",
                                                 ###### -------------------- P&G Contable  ------------------ #####
                                                 tabBox(side = "right", height = 800,width = 1500,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturade",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturade",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_individual_coberturade",x),title = "Consolidación usando práctica contable."),
                                                                 do.call(tagList,Resultados_coberturas_collares_totales(Tipo = 1,Empresa = x,Empresa_moneda = x,ID_unico = "PG_agregado_consolidado_contable",input=input,Modo_contable = T))

                                                                 ),
                                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_contablesde",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_contablesde",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                                 do.call(tagList,Resultados_coberturas_collares_totales(Tipo = 1,Empresa = x,Empresa_moneda = x,ID_unico = "PG_agregado_consolidado_teorico",input=input,Modo_contable = F))))
                                        ),
                                        ##################################------------ Teorico ------------############################
                                        tabPanel(title = "Flujo de caja",
                                                 do.call(tagList,Resultados_coberturas_collares_totales(Tipo = 2,Empresa = x,Empresa_moneda = x,ID_unico = "FC_agregado_consolidado_teorico",input=input,Modo_contable = F))))),

                        ##################################------------ SWAPS ------------############################
                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">&nbsp &nbsp &nbsp Swaps &nbsp &nbsp &nbsp </font></strong> <a id=\"',paste0("Coberturas_Swaps_agregados_a",gsub(x,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                 shinyBS::bsTooltip(id = paste0("Coberturas_Swaps_agregados_a",gsub(x,pattern = " ",replacement = "_")),title = "Intercambio de un producto por otro en un plazo futuro, a un spread de precios que permite definir la estructura a cero costo."),
                                 tabBox(side = "right", height = 1000,width = 4000,selected = "P&G",
                                        ##################################------------ Contable ------------############################
                                        tabPanel(title = "P&G",
                                                 ###### -------------------- P&G Contable  ------------------ #####
                                                 tabBox(side = "right", height = 800,width = 1500,selected = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturapoe",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Contable</font></strong> <a id=\"',paste0("ID_aviso_contable_sensibilidades_individual_coberturapoe",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("exchange"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_contable_sensibilidades_individual_coberturapoe",x),title = "Consolidación usando práctica contable."),
                                                                 do.call(tagList,Panel_swaps_render_agregado(input = input,Empresa = x,Tipo = 1,Modo_contable = T,Nombre_unico = "Swaps_unicos_agregados_pgg_contable"))),
                                                        ###### -------------------- Flujo de caja: Contable  ------------------ #####
                                                        tabPanel(title = HTML(paste0('<strong><font color="#46555f">Teórica</font></strong> <a id=\"',paste0("ID_aviso_teorico_riesgo_contablejess",x),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')), icon = icon("plus"),
                                                                 shinyBS::bsTooltip(id = paste0("ID_aviso_teorico_riesgo_contablejess",x),title = "Consolidación calculando diferencia en cambio con la posición neta en dólares."),
                                                                 do.call(tagList,Panel_swaps_render_agregado(input = input,Empresa = x,Tipo = 1,Modo_contable = F,Nombre_unico = "Swaps_unicos_agregados_pgg_teorico"))))
                                        ),
                                        ##################################------------ Teorico ------------############################
                                        tabPanel(title = "Flujo de caja",
                                                 do.call(tagList,Panel_swaps_render_agregado(input = input,Empresa = x,Tipo = 2,Modo_contable = T,Nombre_unico = "Swaps_unicos_agregados_fcc_teorico")))))

                        )))

  }



Panel_swaps_render =function(input,Empresa,Tipo = 1,Nombre_unico){
  tagList(
    renderUI({
      if (length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) == 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) == 0){
        tagList(HTML("Está empresa no tiene productos que se puedan intercambiar."))
        } else if (length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) != 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) == 0){
          ########### ------- Barriles ----------- ######
          tabBox(side = "right", height = 800,width = 4000,selected = "Barriles",
                 tabPanel(title = "Barriles",
                          do.call(tagList,Empresa_swaps_panel_indiviudal(Unidades = "Barriles",Empresa=Empresa,input=input,Tipo = Tipo, Nombre_unico = paste0(Nombre_unico,"Barriles")))))
          } else if(length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) == 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) != 0){
            ########### ------- Toneladas ----------- ######
            tabBox(side = "right", height = 800,width = 4000,selected = "Toneladas",
                   tabPanel(title = "Toneladas",
                            do.call(tagList,Empresa_swaps_panel_indiviudal(Unidades = "Toneladas",Empresa=Empresa,input=input,Tipo = Tipo,Nombre_unico = paste0(Nombre_unico,"Toneladas")))))
            } else {
            tabBox(side = "right", height = 800,width = 4000,selected = "Barriles",
             tabPanel(title = "Barriles",
                      ########### ------- Barriles ----------- ######
                      do.call(tagList,Empresa_swaps_panel_indiviudal(Unidades = "Barriles",Empresa=Empresa,input=input,Tipo = Tipo,Nombre_unico = paste0(Nombre_unico,"Barriles")))),
             tabPanel(title = "Toneladas",
                      do.call(tagList,Empresa_swaps_panel_indiviudal(Unidades = "Toneladas",Empresa=Empresa,input=input,Tipo = Tipo,Nombre_unico = paste0(Nombre_unico,"Toneladas")))))}}))
}


Panel_swaps_render_agregado =function(input,Empresa,Tipo = 1,Modo_contable,Nombre_unico){
  tagList(
    renderUI({
      if (length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) == 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) == 0){
        tagList(HTML("Está empresa no tiene productos que se puedan intercambiar."))
      } else if (length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) != 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) == 0){
        ########### ------- Barriles ----------- ######
        tabBox(side = "right", height = 800,width = 4000,selected = "Barriles",
               tabPanel(title = "Barriles",
                        do.call(tagList,Empresa_swaps_panel_agregado(Unidades = "Barriles",Empresa=Empresa,input=input,Tipo = Tipo,Modo_contable,Nombre_unico=paste0(Nombre_unico,"Barriles")))))
      } else if(length(Buscador_swaps_activos(Empresa = Empresa)$Barriles) == 0 & length(Buscador_swaps_activos(Empresa = Empresa)$Toneladas) != 0){
        ########### ------- Toneladas ----------- ######
        tabBox(side = "right", height = 800,width = 4000,selected = "Toneladas",
               tabPanel(title = "Toneladas",
                        do.call(tagList,Empresa_swaps_panel_agregado(Unidades = "Toneladas",Empresa=Empresa,input=input,Tipo = Tipo,Modo_contable,Nombre_unico = paste0(Nombre_unico,"Toneladas")))))
      } else {
        tabBox(side = "right", height = 800,width = 4000,selected = "Barriles",
               tabPanel(title = "Barriles",
                        ########### ------- Barriles ----------- ######
                        do.call(tagList,Empresa_swaps_panel_agregado(Unidades = "Barriles",Empresa=Empresa,input=input,Tipo = Tipo,Modo_contable,Nombre_unico=paste0(Nombre_unico,"Barriles")))),
               tabPanel(title = "Toneladas",
                        do.call(tagList,Empresa_swaps_panel_agregado(Unidades = "Toneladas",Empresa=Empresa,input=input,Tipo = Tipo,Modo_contable,Nombre_unico=paste0(Nombre_unico,"Toneladas")))))}}))
}

Coberturas_empresas_individual_tabs = function(Empresa,input,session){
  if(Empresa == "Ecopetrol CB"){
    Empresa_moneda <- "Barranca"
    Empresa = "Ecopetrol CB"
  } else {
    Empresa_moneda <- Empresa
  }
  tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',Empresa,'</font></strong>'))),
   box(title = HTML('<strong><font color="white">Análisis de Coberturas</font></strong>'),solidHeader = T,width = 4000,height = 2000,status = "primary",
    tabBox(side = "right", height = 1000,width = 4000,selected = HTML(paste0('<strong><font color="#46555f">Forwards - Futuros</font></strong> <a id=\"',paste0("Coberturas_futuros_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
  ################################## ------------- Forwards --------------------- #############################
     tabPanel(title = HTML(paste0('<strong><font color="#46555f">Forwards - Futuros</font></strong> <a id=\"',paste0("Coberturas_futuros_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
              shinyBS::bsTooltip(id = paste0("Coberturas_futuros_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),title = "Fijación certera de precio de compra/venta, según condiciones actuales de mercados, a cero costo."),
              HTML('<p align="justify" <p style="font-family:verdana;">El usuario puede definir porcentajes de cobertura para los
          factores de riesgo que plausiblemente se podrían cubrir en el mercado, y la
                   herramienta compara este riesgo con el caso base (sin coberturas).
                   Se incluye un tercer caso, de “coberturas óptimas”, que resuelve el
                   objetivo de maximizar el equivalente de certeza, cumpliendo con límites
                   máximos que se pueden cubrir. El porcentaje de cobertura de cada factor
                   se define contra el promedio de las sensibilidades paralelas; una vez se
                   fija para un factor, se puede escoger otro factor para definir su porcentaje.<br> <br> </p></p> '),
      tabBox(side = "right", height = 800,width = 4000,selected = "Cobertura",
        tabPanel(title = "Cobertura",
         tabBox(side = "right", height = 800,width = 4000,selected = "P&G",
        #################### ------------------- Flujo de caja ----------------- #################
          tabPanel(title = "P&G",
          ### ---- Menu de coberturas dinamico --- ###
          do.call(tagList,Barra_factores_cubrir(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("PG_",Empresa))),
          ### --- Variable --- ###
          renderUI({
           assign(x = paste0("Coberturas_inviduales",Empresa,"_PG"),
            value = Coberturas_empresas_totales(
             Factores_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),
             Empresa = Empresa,
             Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
             Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = Empresa,input=input,Unico = paste0("PG_",Empresa)),
             Tipo = 1,
             Contable = Resultados_agregacion_contable,
             Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE))
         ### ------------ Resultados ----------- ###
          do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_inviduales",Empresa,"_PG"),
            Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
            Base = get(paste0("Coberturas_inviduales",Empresa,"_PG"))[["Base"]],
            Cobertura = get(paste0("Coberturas_inviduales",Empresa,"_PG"))[["Cobertura"]],
            Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
            Aversion = A1))})),
         #################### ------------------- Flujo de caja ----------------- #################
         tabPanel(title = "Flujo",
          do.call(tagList,Barra_factores_cubrir(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("FC_",Empresa))),
          renderUI({
            assign(x = paste0("Coberturas_inviduales",Empresa,"_FC"),
                  value = Coberturas_empresas_totales(Factores_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),
                  Empresa = Empresa,
                  Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                  Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas),Empresa = Empresa,input=input,Unico = paste0("FC_",Empresa)),
                  Tipo = 2,
                  Contable = Resultados_agregacion_contable,
                  Teorica = Resultados_agregacion_teorica,
                  Modo_contable = TRUE))
        ### ------------ Resultados ----------- ###
            do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_inviduales",Empresa,"_FC"),
                  Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                  Base = get(paste0("Coberturas_inviduales",Empresa,"_FC"))[["Base"]],
                  Cobertura = get(paste0("Coberturas_inviduales",Empresa,"_FC"))[["Cobertura"]],
                  Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                  Aversion = A1))})))),
            tabPanel(title = "Componentes",
                  tabBox(side = "right", height = 800,width = 4000,selected = "P&G",
        ######################## ------------------------ P&G ------------------------- #####################
            tabPanel(title = "P&G",
                  tagList(
                  do.call(tagList,Barra_factores_cubrir(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("PG_cobertura_dinamica",Empresa))),
                  ######################## ----------------- VAR Cubierto ----------------- #####################
                  renderPlotly(Coberturas_empresas_totales_componentes(Factores_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),
                               Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("PG_cobertura_dinamica",Empresa)),
                               Tipo = 1,Contable = Resultados_agregacion_contable,
                               Teorica = Resultados_agregacion_teorica,
                               Modo_contable = T,
                               Empresa = Empresa,
                               Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"])),
                  HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                        de la empresa en sus componentes, representados con los factores de riesgo.
                        El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                        a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                        parcialmente riesgos, o a aumentarlos</p></p>'))),
                  ######################## ------------------------ Flujo de caja -------------------------- #####################
                 tabPanel(title = "Flujo",
                  tagList(
                    do.call(tagList,Barra_factores_cubrir(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("FC_cobertura_dinamica",Empresa))),
                    ######################## ----------------- VAR Cubierto ----------------- #####################
                    renderPlotly(Coberturas_empresas_totales_componentes(Factores_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),
                                                                            Nivel_cobertura = Pesos_coberturas_shiny(Factor_cubrir = c(Coberturas_posibles_vector(Empresa = Empresa_moneda,Excel_coberturas = Coberturas_disponibles_empresas)),Empresa = Empresa,input = input,Unico = paste0("FC_cobertura_dinamica",Empresa)),
                                                                            Tipo = 2,Contable = Resultados_agregacion_contable,Teorica = Resultados_agregacion_teorica,
                                                                            Modo_contable = T,
                                                                            Empresa = Empresa,
                                                                            Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"])),
                    HTML('<p align="justify" <p style="font-family:verdana;"><br> Partición del riesgo total
                    de la empresa en sus componentes, representados con los factores de riesgo.
                    El cálculo considera la volatilidad de los factores, la sensibilidad de los resultados
                    a esos factores, y la correlación entre factores (lo cual puede contribuir a cancelar
                    parcialmente riesgos, o a aumentarlos</p></p>'))))))),
                      ################################## ---------------------------------- Puts ------------------------------- #############################
                    tabPanel(title = HTML(paste0('<strong><font color="#46555f">&nbsp &nbsp &nbspPuts&nbsp &nbsp &nbsp</font></strong> <a id=\"',paste0("Coberturas_Puts_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                             tabBox(side = "right", height = 800,width = 4000,selected = "P&G",
                                    tabPanel(title = "P&G",
                                             ######################### -------  Put TRM --------  #########################
                                               box(status = "primary",collapsible = F,title = "Coberturas Puts",height = 1000,width = 4000,
                                                   HTML('<p align="justify" <p style="font-family:verdana;"><br>
                                                        El usuario puede definir porcentajes de coberturas
                                                        con puts para USD/LC y Commodity, y la herramienta compara
                                                        este riesgo con el caso base (sin coberturas).
                                                        Se debe definir, para cada uno, el Strike de las puts
                                                        (contra los precios futuros) y la volatilidad implícita.
                                                        El porcentaje de cobertura de cada factor se define contra
                                                        el promedio de las sensibilidades paralelas.</p></p>'),
                                                   shinyBS::bsTooltip(id = paste0("Coberturas_Puts_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),title = "Fijación de precio mínimo de venta, a costo igual a la prima de la opción, que depende de este precio mínimo contra el precio futuro actual, del plazo, y de la volatilidad del subyacente."),
                                                   fluidRow(column(6, box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                                                                          tagList(
                                                                            shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                               title = "Strike de la cobertura put"),
                                                                            shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                               title = "Volatilidad Implícita (%)"),
                                                                                  column(6,textInput(inputId = paste0("texto_spread_TRM",Empresa),value = -50,
                                                                                  label = HTML(paste0('Strike vs.Forwards TRM <a id=\"',paste0("ID_Texto_BS_Strike_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                  column(6,textInput(inputId = paste0("texto_volatilidad_TRM",Empresa), value = "10%",
                                                                                  label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                  sliderTextInput(inputId = paste0("Pesos_TRM_put_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                  switchInput(
                                                                                  inputId =  paste0("Cobertura_Put_individual_TRM_activa",Empresa),
                                                                                  label = "Cubertura",
                                                                                  labelWidth = "80px",value = T)))),
                                                            ######################### -------  PUT Commodity --------  #########################
                                                            column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Brent",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike comparado con futuros"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_Brent",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Volatilidad Implícita (%)"),
                                                                                 column(6,textInput(inputId = paste0("texto_spread_Brent",Empresa),value = 0,
                                                                                                    label = HTML(paste0('Strike vs.Futuros Commodity <a id=\"',paste0("ID_Texto_BS_Strike_Brent",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                 column(6,textInput(inputId = paste0("texto_volatilidad_Brent",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_Brent",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_Brent_put_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                 inputId =  paste0("Cobertura_Put_individual_Brent_activa",Empresa),
                                                                                 label = "Cubertura",
                                                                                 labelWidth = "80px",value = T))))),
                                                   ######################### ------- Resultados Histograma Puts --------  #########################
                                                   renderUI({
                                                     ######################### ------- Calculo de primas: Put TRM --------  #########################
                                                     assign(x = paste0("Puts_TRM_individual",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                            Spread = as.numeric(input[[paste0("texto_spread_TRM",Empresa)]]),
                                                                                                                            Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                            Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                            Opcion = "Put"),envir = .GlobalEnv)

                                                    ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                    assign(x = paste0("Puts_Brent_individual",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                              Spread = as.numeric(input[[paste0("texto_spread_Brent",Empresa)]]),
                                                                                                                              Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                              Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                              Opcion = "Put"),envir = .GlobalEnv)

                                                    assign(x = paste0("Coberturas_Puts_individuales_",Empresa,"_PG"),
                                                            value = Coberturas_empresas_totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                                                                   Empresa = Empresa,
                                                                                                   Insumos_puts_TRM = get( paste0("Puts_TRM_individual",Empresa)),
                                                                                                   Puts_TRM =  input[[paste0("Cobertura_Put_individual_TRM_activa",Empresa)]],
                                                                                                   Insumos_puts_brent = get(paste0("Puts_Brent_individual",Empresa)),
                                                                                                   Puts_Brent = input[[paste0("Cobertura_Put_individual_Brent_activa",Empresa)]],
                                                                                                   Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                   Nivel_cobertura = c((as.numeric(input[[paste0("Pesos_TRM_put_individual",Empresa)]])/100),(as.numeric(input[[paste0("Pesos_Brent_put_individual",Empresa)]])/100)),
                                                                                                   Tipo = 1,
                                                                                                   Cobertura = "Puts",
                                                                                                   Contable = Resultados_agregacion_contable,
                                                                                                   Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE))
                                                     ### ------------ Resultados ----------- ###
                                                     do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_Puts_individuales_",Empresa,"_PG"),
                                                                                             Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                             Base = get(paste0("Coberturas_Puts_individuales_",Empresa,"_PG"))[["Base"]],
                                                                                             Cobertura = get(paste0("Coberturas_Puts_individuales_",Empresa,"_PG"))[["Cobertura"]],
                                                                                             Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                             Aversion = A1))}))),
                                      #################### ------------------- Flujo de caja ----------------- #################
                                      tabPanel(title = "Flujo",
                                               ######################### -------  Put TRM --------  #########################
                                               box(status = "primary",collapsible = F,title = "Coberturas Puts",height = 1000,width = 4000,
                                                   HTML('<p align="justify" <p style="font-family:verdana;"><br>
                                                        El usuario puede definir porcentajes de coberturas
                                                        con puts para USD/LC y Commodity, y la herramienta compara
                                                        este riesgo con el caso base (sin coberturas).
                                                        Se debe definir, para cada uno, el Strike de las puts
                                                        (contra los precios futuros) y la volatilidad implícita.
                                                        El porcentaje de cobertura de cada factor se define contra
                                                        el promedio de las sensibilidades paralelas.</p></p>'),
                                                   shinyBS::bsTooltip(id = paste0("Coberturas_Puts_unicos_id_bs_fc",gsub(Empresa,pattern = " ",replacement = "_")),title = "Fijación de precio mínimo de venta, a costo igual a la prima de la opción, que depende de este precio mínimo contra el precio futuro actual, del plazo, y de la volatilidad del subyacente."),
                                                   fluidRow(column(6, box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                                                                          tagList(
                                                                            shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                               title = "Strike de la cobertura put"),
                                                                            shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                               title = "Volatilidad Implícita (%)"),
                                                                            column(6,textInput(inputId = paste0("texto_spread_TRM_fc",Empresa),value = -50,
                                                                                               label = HTML(paste0('Strike vs.Forwards TRM <a id=\"',paste0("ID_Texto_BS_Strike_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                            column(6,textInput(inputId = paste0("texto_volatilidad_TRM_fc",Empresa), value = "10%",
                                                                                               label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                            sliderTextInput(inputId = paste0("Pesos_TRM_put_individual_fc",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                            switchInput(
                                                                              inputId =  paste0("Cobertura_Put_individual_TRM_activa_fc",Empresa),
                                                                              label = "Cubertura",
                                                                              labelWidth = "80px",value = T)))),
                                                            ######################### -------  PUT Brent --------  #########################
                                                            column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Brent_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike comparado con futuros"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_Brent_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Volatilidad Implícita (%)"),
                                                                                 column(6,textInput(inputId = paste0("texto_spread_Brent_fc",Empresa),value = 0,
                                                                                                    label = HTML(paste0('Strike vs.Futuros Commodity <a id=\"',paste0("ID_Texto_BS_Strike_Brent_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                 column(6,textInput(inputId = paste0("texto_volatilidad_Brent_fc",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_Brent_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 60)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_Brent_put_individual_fc",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                   inputId =  paste0("Cobertura_Put_individual_Brent_activa_fc",Empresa),
                                                                                   label = "Cubertura",
                                                                                   labelWidth = "80px",value = T))))),
                                                   ######################### ------- Resultados Histograma Puts --------  #########################
                                                   renderUI({
                                                     ######################### ------- Calculo de primas: Put TRM --------  #########################
                                                     assign(x = paste0("Puts_TRM_individual_fc",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                            Spread = as.numeric(input[[paste0("texto_spread_TRM_fc",Empresa)]]),
                                                                                                                            Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                            Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                            Opcion = "Put"),envir = .GlobalEnv)

                                                     ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                     assign(x = paste0("Puts_Brent_individual_fc",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                              Spread = as.numeric(input[[paste0("texto_spread_Brent_fc",Empresa)]]),
                                                                                                                              Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                              Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                              Opcion = "Put"),envir = .GlobalEnv)

                                                     assign(x = paste0("Coberturas_Puts_individuales_fc",Empresa,"_PG"),
                                                            value = Coberturas_empresas_totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                                                                   Empresa = Empresa,
                                                                                                   Insumos_puts_TRM = get( paste0("Puts_TRM_individual_fc",Empresa)),
                                                                                                   Puts_TRM =  input[[paste0("Cobertura_Put_individual_TRM_activa_fc",Empresa)]],
                                                                                                   Insumos_puts_brent = get(paste0("Puts_Brent_individual_fc",Empresa)),
                                                                                                   Puts_Brent = input[[paste0("Cobertura_Put_individual_Brent_activa_fc",Empresa)]],
                                                                                                   Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                   Nivel_cobertura = c((as.numeric(input[[paste0("Pesos_TRM_put_individual_fc",Empresa)]])/100),(as.numeric(input[[paste0("Pesos_Brent_put_individual_fc",Empresa)]])/100)),
                                                                                                   Tipo = 2,
                                                                                                   Cobertura = "Puts",
                                                                                                   Contable = Resultados_agregacion_contable,
                                                                                                   Teorica = Resultados_agregacion_teorica,Modo_contable = TRUE))
                                                     ### ------------ Resultados ----------- ###
                                                     do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_Puts_individuales_fc",Empresa,"_PG"),
                                                                                             Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                             Base = get(paste0("Coberturas_Puts_individuales_fc",Empresa,"_PG"))[["Base"]],
                                                                                             Cobertura = get(paste0("Coberturas_Puts_individuales_fc",Empresa,"_PG"))[["Cobertura"]],
                                                                                             Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                             Aversion = A1))})))
                               )),

                      ################################## ---------------------------------- Collares ------------------------------- #############################
                      tabPanel(title = HTML(paste0('<strong><font color="#46555f">&nbsp &nbsp &nbsp Collares &nbsp &nbsp &nbsp</font></strong> <a id=\"',paste0("Coberturas_Collares_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),
                               shinyBS::bsTooltip(id = paste0("Coberturas_Collares_unicos_id_bs",gsub(Empresa,pattern = " ",replacement = "_")),title = "Compra de put y venta de call: fijación de precio mínimo de venta, y precio máximo de venta. Se determina el costo (que puede ser positivo, negativo, o cero) según los strikes, el plazo y la volatilidad del subyacente."),
                               tabBox(side = "right", height = 800,width = 4000,selected = "P&G",
                                      tabPanel(title = "P&G",
                                               ######################### -------  Put TRM --------  #########################
                                               box(status = "primary",collapsible = F,title = "Coberturas - Collares",height = 1000,width = 4000,
                                                   HTML('<p align="justify" <p style="font-family:verdana;"><br>El usuario puede
                                                        definir porcentajes de coberturas con collares para USD/LC y Commodity,
                                                        y la herramienta compara este riesgo con el caso base (sin coberturas).
                                                        Se debe definir, para cada uno, el Strike de las puts y calls
                                                        (contra los precios futuros) y la volatilidad implícita.
                                                        El porcentaje de cobertura de cada factor se define contra el promedio
                                                        de las sensibilidades paralelas.</p></p>'),
                                                   fluidRow(column(6,box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Put_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike de la cobertura Put"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Call_TRM",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike de la cobertura Call"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_TRM_collar",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Volatilidad Implícita (%)"),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Put_TRM",Empresa),value = -100,
                                                                                                    label = HTML(paste0('Put <a id=\"',paste0("ID_Texto_BS_Strike_Put_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Call_TRM",Empresa),value = +100,
                                                                                                    label = HTML(paste0('Call <a id=\"',paste0("ID_Texto_BS_Strike_Call_TRM",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_volatilidad_TRM_collares",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_TRM_collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_TRM_put_collares_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                   inputId =  paste0("Cobertura_collares_TRM_activa",Empresa),
                                                                                   label = "Cubertura",
                                                                                   labelWidth = "80px",value = T
                                                                                 )))),

                                                            ######################### -------  PUT Brent --------  #########################
                                                            column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Put_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Put"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Call_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Call"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),title = "Volatilidad Implícita (%)"),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Put_Brent",Empresa),value = -10,
                                                                                                    label = HTML(paste0('Put <a id=\"',paste0("ID_Texto_BS_Strike_Put_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Call_Brent",Empresa),value = +10,
                                                                                                    label = HTML(paste0('Call <a id=\"',paste0("ID_Texto_BS_Strike_Call_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_volatilidad_Brent_collares",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_Brent_Collar",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_Brent_put_collares_individual",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                   inputId =  paste0("Cobertura_collares_Brent_activa",Empresa),
                                                                                   label = "Cubertura",
                                                                                   labelWidth = "80px",value = T))))),
                                                   ######################### ------- Resultados Histograma Puts --------  #########################
                                                   renderUI({

                                                     ######################### ------- Calculo de primas: Put TRM --------  #########################
                                                     assign(x = paste0("Puts_TRM_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                                     Spread = as.numeric(input[[paste0("texto_spread_Put_TRM",Empresa)]]),
                                                                                                                                     Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                     Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                     Opcion = "Put"),envir = .GlobalEnv)


                                                     assign(x = paste0("Calls_TRM_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                                      Spread = as.numeric(input[[paste0("texto_spread_Call_TRM",Empresa)]]),
                                                                                                                                      Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                      Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                      Opcion = "Call"),envir = .GlobalEnv)


                                                     ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                     assign(x = paste0("Puts_Brent_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                                       Spread = as.numeric(input[[paste0("texto_spread_Put_Brent",Empresa)]]),
                                                                                                                                       Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                       Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                       Opcion = "Put"),envir = .GlobalEnv)

                                                     ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                     assign(x = paste0("Calls_Brent_individual_Collares",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                                        Spread = as.numeric(input[[paste0("texto_spread_Call_Brent",Empresa)]]),
                                                                                                                                        Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent_collares",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                        Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                        Opcion = "Call"),envir = .GlobalEnv)


                                                     assign(x = paste0("Coberturas_COLLARES_individuales_",Empresa,"_PG"),
                                                            value = Coberturas_empresas_totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                                                                   Empresa = Empresa,
                                                                                                   Insumos_puts_TRM = get(paste0("Puts_TRM_individual_Collares",Empresa)),
                                                                                                   Insumos_call_TRM = get(paste0("Calls_TRM_individual_Collares",Empresa)),
                                                                                                   Insumos_puts_brent = get(paste0("Puts_Brent_individual_Collares",Empresa)),
                                                                                                   Insumos_call_brent = get(paste0("Calls_Brent_individual_Collares",Empresa)),
                                                                                                   Puts_TRM =  input[[paste0("Cobertura_collares_TRM_activa",Empresa)]],
                                                                                                   Puts_Brent = input[[paste0("Cobertura_collares_Brent_activa",Empresa)]],
                                                                                                   Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                   Nivel_cobertura = c((as.numeric(input[[paste0("Pesos_TRM_put_collares_individual",Empresa)]])/100),(as.numeric(input[[paste0("Pesos_Brent_put_collares_individual",Empresa)]])/100)),
                                                                                                   Cobertura = "Collares",
                                                                                                   Tipo = 1,
                                                                                                   Contable = Resultados_agregacion_contable,
                                                                                                   Teorica = Resultados_agregacion_teorica,
                                                                                                   Modo_contable = TRUE),envir = .GlobalEnv)


                                                     ### ------------ Resultados ----------- ###
                                                     do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_COLLARES_individuales_",Empresa,"_PG"),
                                                                                             Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                             Base = get(paste0("Coberturas_COLLARES_individuales_",Empresa,"_PG"))[["Base"]],
                                                                                             Cobertura = get(paste0("Coberturas_COLLARES_individuales_",Empresa,"_PG"))[["Cobertura"]],
                                                                                             Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                             Aversion = A1))}))),
                                      #################### ------------------- Flujo de caja ----------------- #################
                                      tabPanel(title = "Flujo",
                                               ######################### -------  Put TRM --------  #########################
                                               box(status = "primary",collapsible = F,title = "Coberturas - Collares",height = 1000,width = 4000,
                                                   HTML('<p align="justify" <p style="font-family:verdana;"><br>El usuario puede
                                                        definir porcentajes de coberturas con collares para USD/LC y Commodity,
                                                        y la herramienta compara este riesgo con el caso base (sin coberturas).
                                                        Se debe definir, para cada uno, el Strike de las puts y calls
                                                        (contra los precios futuros) y la volatilidad implícita.
                                                        El porcentaje de cobertura de cada factor se define contra el promedio
                                                        de las sensibilidades paralelas.</p></p>'),
                                                   fluidRow(column(6,box(title = HTML('<strong><font color="#002e5b">USD/LC</font></strong>'),collapsible = F,side = "right",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Put_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike de la cobertura Put"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Call_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Strike de la cobertura Call"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_TRM_collar_fc",gsub(Empresa,pattern = " ",replacement = "")),
                                                                                                    title = "Volatilidad Implícita (%)"),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Put_TRM_fc",Empresa),value = -100,
                                                                                                    label = HTML(paste0('Put <a id=\"',paste0("ID_Texto_BS_Strike_Put_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Call_TRM_fc",Empresa),value = +100,
                                                                                                    label = HTML(paste0('Call <a id=\"',paste0("ID_Texto_BS_Strike_Call_TRM_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_volatilidad_TRM_collares_fc",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_TRM_collar_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_TRM_put_collares_individual_fc",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                   inputId =  paste0("Cobertura_collares_TRM_activa_fc",Empresa),
                                                                                   label = "Cubertura",
                                                                                   labelWidth = "80px",value = T
                                                                                 )))),

                                                            ######################### -------  PUT Brent --------  #########################
                                                            column(6,box(title = HTML('<strong><font color="#002e5b">Commodity</font></strong>'),collapsible = F,side = "left",height = 300,width = 20,
                                                                         tagList(shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Put_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Put"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Strike_Call_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),title = "Strike de la cobertura Call"),
                                                                                 shinyBS::bsTooltip(id = paste0("ID_Texto_BS_Volatilidad_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),title = "Volatilidad Implícita (%)"),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Put_Brent_fc",Empresa),value = -10,
                                                                                                    label = HTML(paste0('Put <a id=\"',paste0("ID_Texto_BS_Strike_Put_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_spread_Call_Brent_fc",Empresa),value = +10,
                                                                                                    label = HTML(paste0('Call <a id=\"',paste0("ID_Texto_BS_Strike_Call_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 column(4,textInput(inputId = paste0("texto_volatilidad_Brent_collares_fc",Empresa), value = "10%",
                                                                                                    label = HTML(paste0('Volatilidad <a id=\"',paste0("ID_Texto_BS_Volatilidad_Brent_Collar_fc",gsub(Empresa,pattern = " ",replacement = "")),'\" href=\"#\" class=\"action-button\"><i class=\"fa fa-info-circle\"></i></a>')),width = 85)),
                                                                                 sliderTextInput(inputId = paste0("Pesos_Brent_put_collares_individual_fc",Empresa), "Cantidad:", choices = as.numeric(seq(from = 0,by = 10,to = 100)),grid = TRUE,animate = F,selected = 100),
                                                                                 switchInput(
                                                                                   inputId =  paste0("Cobertura_collares_Brent_activa_fc",Empresa),
                                                                                   label = "Cubertura",
                                                                                   labelWidth = "80px",value = T))))),
                                                   ######################### ------- Resultados Histograma Puts --------  #########################
                                                   renderUI({

                                                     ######################### ------- Calculo de primas: Put TRM --------  #########################
                                                     assign(x = paste0("Puts_TRM_individual_Collares_fc",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                                     Spread = as.numeric(input[[paste0("texto_spread_Put_TRM_fc",Empresa)]]),
                                                                                                                                     Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM_collares_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                     Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                     Opcion = "Put"),envir = .GlobalEnv)


                                                     assign(x = paste0("Calls_TRM_individual_Collares_fc",Empresa),value =  Puts_insumos(Indicador = "USD/LC",
                                                                                                                                      Spread = as.numeric(input[[paste0("texto_spread_Call_TRM_fc",Empresa)]]),
                                                                                                                                      Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_TRM_collares_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                      Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                      Opcion = "Call"),envir = .GlobalEnv)


                                                     ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                     assign(x = paste0("Puts_Brent_individual_Collares_fc",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                                       Spread = as.numeric(input[[paste0("texto_spread_Put_Brent_fc",Empresa)]]),
                                                                                                                                       Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent_collares_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                       Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                       Opcion = "Put"),envir = .GlobalEnv)

                                                     ######################### ------- Calculo de primas: Put Brent --------  #########################
                                                     assign(x = paste0("Calls_Brent_individual_Collares_fc",Empresa),value =  Puts_insumos(Indicador = "Commodity",
                                                                                                                                        Spread = as.numeric(input[[paste0("texto_spread_Call_Brent_fc",Empresa)]]),
                                                                                                                                        Volatilidad = (as.numeric(gsub(input[[paste0("texto_volatilidad_Brent_collares_fc",Empresa)]],pattern = "%",replacement = ""))/100),
                                                                                                                                        Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                                                        Opcion = "Call"),envir = .GlobalEnv)


                                                     assign(x = paste0("Coberturas_COLLARES_individuales_fc",gsub(Empresa,pattern = " ",replacement = "_"),"_PG"),
                                                            value = totales(Factores_cubrir = c("USD/LC","Commodity"),
                                                                                                   Empresa = Empresa,
                                                                                                   Insumos_puts_TRM = get(paste0("Puts_TRM_individual_Collares_fc",Empresa)),
                                                                                                   Insumos_call_TRM = get(paste0("Calls_TRM_individual_Collares_fc",Empresa)),
                                                                                                   Insumos_puts_brent = get(paste0("Puts_Brent_individual_Collares_fc",Empresa)),
                                                                                                   Insumos_call_brent = get(paste0("Calls_Brent_individual_Collares_fc",Empresa)),
                                                                                                   Puts_TRM =  input[[paste0("Cobertura_collares_TRM_activa_fc",Empresa)]],
                                                                                                   Puts_Brent = input[[paste0("Cobertura_collares_Brent_activa_fc",Empresa)]],
                                                                                                   Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                                   Nivel_cobertura = c((as.numeric(input[[paste0("Pesos_TRM_put_collares_individual_fc",Empresa)]])/100),(as.numeric(input[[paste0("Pesos_Brent_put_collares_individual_fc",Empresa)]])/100)),
                                                                                                   Cobertura = "Collares",
                                                                                                   Tipo = 2,
                                                                                                   Contable = Resultados_agregacion_contable,
                                                                                                   Teorica = Resultados_agregacion_teorica,
                                                                                                   Modo_contable = TRUE),envir = .GlobalEnv)


                                                     ### ------------ Resultados ----------- ###
                                                     do.call(tagList,Coberturas_visulizacion(Nombre_unico = paste0("Coberturas_COLLARES_individuales_fc",gsub(Empresa,pattern = " ",replacement = "_"),"_PG"),
                                                                                             Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",Empresa_moneda,"$")),"Moneda"],
                                                                                             Base = get(paste0("Coberturas_COLLARES_individuales_fc",gsub(Empresa,pattern = " ",replacement = "_"),"_PG"))[["Base"]],
                                                                                             Cobertura = get(paste0("Coberturas_COLLARES_individuales_fc",gsub(Empresa,pattern = " ",replacement = "_"),"_PG"))[["Cobertura"]],
                                                                                             Patrimonio = Patrimonio_individual(Empresa = paste0("^",Empresa_moneda,"$"),Patrimonios_completos = Patrimonios_completos),
                                                                                             Aversion = A1))}))
                                               ))))))


}



########################## ----------------- Gradiente ----------------- ##########################
###  ----     Esta funcion permite optimizar gradiente por empresa: Lee dolares y pesos -------###
Coberturas_individuales_gradiente <- function(Empresa,Factores_cubrir,Tipo,Contable = Resultados_agregacion_contable,Modo_contable = T,Teorica = Resultados_agregacion_teorica,Patrimonio,Moneda,Shiny = T,Simulaciones = Matriz_simulaciones) {
  if (Empresa != "Ninguna"){
    if (Shiny == TRUE){
      progress = shiny::Progress$new()
      progress$set(message = "Se está iterando", value = 0)
      shinyalert("Óptimizando el gradiente. Por favor espere.",time =2500 ,type = "warning",showConfirmButton = T, confirmButtonText = "Entiendo",showCancelButton = F)

    }

    Gradiente_agregado <- new.env()
    #### ----------- Parametros de Gradiente ------------ ####
    # Número máximo de pasos - para evitar casos de iteraciones infinitas
    nRep=250
    # Cambio mínima en equivalente de certeza para detener al algoritmo mientras aún no se cumplan los pasos - Medido en pesos
    Precision=100
    ### --- Valor para calcular las derivadas en cada paso - se fija en 1%.
    Delta=0.02
    ### --- Alpha que es la multiplicacion de la derivada --- ###
    Alpha=0.02
    ### --- Aversion --- ###
    Aversion = A1


    if (Empresa == "Ecopetrol CB"){
      ### ---------- Selecciona el tipo de sensibilidad ------------ ###
      Simulaciones = Cortador_matriz_simulaciones(Empresa = "Ecopetrol",Matriz_Fechas = Matriz_Fechas,Simulaciones_cortar = Simulaciones)
      ### ------------- P&G ------------ ###
      if (Tipo == 1){
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_PG
        Agregado_inicial = Contable$Ecopetrol_CB$Inicial_PG
        ### ------------- Flujo de caja ------------ ###
      } else if(Tipo == 2) {
        ### ------------- Contable ------------ ###
        Sensibilidades_exposicion = Contable$Ecopetrol_CB$Sensibilidades_FC
        Agregado_inicial =  Contable$Ecopetrol_CB$Inicial_FC
      }
    } else {
      ### ---------- Selecciona el tipo de sensibilidad ------------ ###
      Simulaciones = Simulaciones
      ### ------------- P&G ------------ ###
      if (Tipo == 1){
        ### ------------- Contable ------------ ###
        if (Modo_contable == TRUE){
          Sensibilidades_exposicion = Contable$Sensibilidades_PG[[Empresa]]
          Agregado_inicial = Contable$Inicial_PG[[Empresa]]

        } else if( Modo_contable == FALSE) {
          ### ------------- Teorica ------------ ###
          Sensibilidades_exposicion = Teorica$Sensibilidades_PG[[Empresa]]
          Agregado_inicial = Teorica$Inicial_PG[[Empresa]]

        }
        ### ------------- Flujo de caja ------------ ###
      } else if(Tipo == 2) {
        if (Modo_contable == TRUE){
          ### ------------- Contable ------------ ###
          Sensibilidades_exposicion = Contable$Sensibilidades_FC[[Empresa]]
          Agregado_inicial =  Contable$Inicial_FC[[Empresa]]

        } else if (Modo_contable == FALSE) {
          ### ------------- Teorica ------------ ###
          Sensibilidades_exposicion = Teorica$Sensibilidades_FC[[Empresa]]
          Agregado_inicial = Teorica$Inicial_FC[[Empresa]]

        }
      }

    }


    #### --------- Tomo los insumos de las empresas moneda USD que estan pesos y los paso a dolares ###
    if (Moneda == "USD"){
      Agregado_inicial = Agregado_inicial/t(Simulaciones[,"TRM_Promedio",])

      #Sensibilidades_exposicion[,,"USD/LC"] = Sensibilidades_exposicion[,,"USD/LC"] - Agregado_inicial
      ### --- Se le quita  el P&G + 1 que fue calculado en el codigo original --- ###
      Q = replicate(dim(Sensibilidades_exposicion)[3],Simulaciones[,grep(colnames(Simulaciones),pattern = "TRM_Promedio"),])
      Q = aperm(Q,c(2,1,3))
      ### --- Se pasa todo a dolares nuevamente --- ###
      Sensibilidades_exposicion = (Sensibilidades_exposicion/Q)
    }

    ### --- Se ajusta las dimensiones ---- ###
    Sensibilidades_exposicion = Sensibilidades_exposicion[,-dim(Sensibilidades_exposicion)[2],]
    Agregado_inicial = Agregado_inicial[,-dim(Agregado_inicial)[2]]


    ###################################################################################
    ##############################  GRADIENT DESCENT  #################################
    ###################################################################################
    ## ------------ Definimos los parámetros de coberturas: ------------- ###
    Fechas = dimnames(Simulaciones)[[1]][-1]
    CoberturasPorAno=length(Fechas)
    nMeses = length(Fechas)
    nSim = dim(Simulaciones)[[3]]
    ## EBITDA_Base
    ### --- Aversion --- ###
    Aversion = A1

    Nivel_cobertura = c(rep(0,length(Factores_cubrir)))

    # Número de coberturas por año (4 es trimestral, 12 mensual, etc.)
    ### ----------- Espacios a llenar ---------- ###
    params=rep(Nivel_cobertura,CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
    ### ------- Limites de las coberturas -------- ###
    lims=cbind(rep(rep(0,length(Factores_cubrir)),CoberturasPorAno),rep(rep(0.95,length(Factores_cubrir)),CoberturasPorAno));rownames(lims)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)));colnames(lims)=c("Min","Max")
    # lims[,2] =  c((Sensibilidaded_PG_T$Limite))

    ### -------- P&G Inicial sin alterar  ---------- ###
    EBITDA_Base = rowSums(Agregado_inicial)


    load(paste0(path,'/Outputs/Matriz/Matriz_futuros.Rdata'))




    ### -------------------------------- Simulaciones --------------------------------- ###
    for (j in Factores_cubrir) {
      assign(x = paste0("Serie",j), t(Simulaciones[-1,j,]),envir = Gradiente_agregado)
    }


    ########## -------------------- Futuros ------------------- ##########
    for (j in Factores_cubrir) {
      if( j == "USD/LC"){
        TRM = as.data.frame(t(as.numeric(Matriz_futuros[1:dim(Agregado_inicial)[2],"USD/LC"])))
        colnames(TRM)= stringr::str_extract(colnames(TRM),pattern = "[0-9]+")
        Futuro_Dolar = round(as.numeric(spline(TRM,x = colnames(TRM),xout = c(seq(1:dim(Agregado_inicial)[2])))$y),2)
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Futuro_Dolar),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      } else if ((j == 'NYMEX_RBOB_1M' | j == "Nymex_Heating_Oil_1M")) {
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j] + Matriz_futuros[1:nMeses,"Commodity"]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      } else {
        assign(x = paste0("Futuro",j),  matrix(rep( as.numeric(Matriz_futuros[1:nMeses,j]),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)

      }
    }

    ### ---------- Cobertura promedio Proporción*Sensibilidad --------- ###
    ### ------------------ Brent: Barriles ----------------- ###
    if( Moneda == "USD"){
      ######################### --------------------- Caso Pesos pasar TRM a pesos ------------------------------ ##########
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          print("cambiando TRM dolar")
          Transformacion_TRM = (t((Simulaciones[,"TRM_Promedio",])^3)/(1+t(Simulaciones[,"TRM_Promedio",])))
          Transformacion_TRM = Transformacion_TRM[,-dim(Simulaciones)[1]]
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]*Transformacion_TRM),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton" ){
          print(paste(j," barriles"))
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]),envir = Gradiente_agregado)
        }
      }


    } else if(Moneda == "COP") {
      ######################### --------------------- Caso Pesos pasar todo a barriles ------------------------------ ##########
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "BL"|Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD/UN"){
          assign(x = paste0("Sensibilidad",j),  value = colMeans((Sensibilidades_exposicion[,,j]/t(Simulaciones[-dim(Simulaciones)[1],"TRM_Promedio",]))),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),"Unidades_COP"] == "USD"){
          assign(x = paste0("Sensibilidad",j),  value = colMeans(Sensibilidades_exposicion[,,j]),envir = Gradiente_agregado)
        }
      }


    }


    Numero_semillas = 2
    Lista_de_semillas = NULL
    Lista_de_semillas = as.list(Lista_de_semillas)
    Lista_de_semillas[[1]] = as.numeric(unlist(lims[,2]))
    ### -------- 1000  ----------- ####
    Lista_de_semillas[[2]] = rep(c(rep(1,length(Factores_cubrir))),CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
    ### -------- 50%  ----------- ####
    Lista_de_semillas[[3]] = rep(c(rep(0.5,length(Factores_cubrir))),CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))
    ### -------- 0%  ----------- ####
    Lista_de_semillas[[4]] = rep(c(rep(0,length(Factores_cubrir))),CoberturasPorAno);names(params)=paste(rep(Factores_cubrir,CoberturasPorAno),sort(rep(1:CoberturasPorAno,length(Factores_cubrir)*4/CoberturasPorAno)))

    for ( j in (c(1:Numero_semillas))){
      print(j)
      Lista_de_semillas[[4+j]] = rep(runif(length(params)/(4/CoberturasPorAno),min(lims),max(lims)),4/CoberturasPorAno)

    }


    for(i in c(1:length(Lista_de_semillas))){
      print(i)
      Valor_Funcion = 1e10
      Paso=0
      ### -------------------------------- Paso 1 Semilla inicial t = 0 ---------------------------------- ###
      nom_orig=names(params)
      noms=unique(names(params))

      ### --- Numeros Aleatorios de una unifome, utilizando como limites el percentil 95 --- ###
      params=as.numeric(Lista_de_semillas[[i]])
      names(params)=rep(noms,4/CoberturasPorAno)
      params=params[nom_orig]

      for (j in Factores_cubrir) {
        assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
      }


      ### -------------------------------- P&G con Coberturas ---------------------------------- ###
      # GananciaFuturos = ((FuturoDolar-SerieDolar)*nDolar -CostosDolar*abs(nDolar-matrix(rep(0,12*nSim),nrow=nSim,byrow=T)))/SerieDolar + (FuturoBrent-SerieBrent)*nBrent -CostosBrent*abs(nBrent-matrix(rep(0,12*nSim),nrow=nSim,byrow=T))

      GananciaFuturos = 0

      if(Moneda == "USD"){
        ### ------------------ Cobertura para monedas funcionales dolares  ----------------- ###
        for (j in Factores_cubrir) {
          if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
            GananciaFuturos = GananciaFuturos + (get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*get(paste0("n",j),envir = Gradiente_agregado)
          } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
            GananciaFuturos = GananciaFuturos + ((get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Serie",j),envir = Gradiente_agregado)) - (get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Futuro",j),envir = Gradiente_agregado)))
          }
        }

      } else if (Moneda == "COP"){
        ### ------------------ Cobertura para monedas funcionales pesos  ----------------- ###
        for (j in Factores_cubrir) {
          if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
            GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
          } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
            GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
          }
        }

      }


      EBITDA_cobertura = (EBITDA_Base+rowSums(GananciaFuturos))

      ### ----------------------------- Etapa 3: Optimizacion ------------------------------ ###
      while(Valor_Funcion>Precision & Paso<nRep){

        if (Shiny == TRUE){
          progress$inc(round((1/nRep),2)/i, detail = paste0("Iteración ",Paso,"  Semilla ", i))
        }

        ### -------------------- Derivadas ------------------- ###

        Derivadas=sapply(unique(names(params)),function(x){

          params[names(params)%in%x]=params[names(params)%in%x]+Delta
          params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
          params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]

          ### ------------------ TRM ----------------- ###
          for (j in Factores_cubrir) {
            assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
          }

          GananciaFuturos = 0

          if(Moneda == "USD"){
            ### ------------------ Cobertura para monedas funcionales dolares  ----------------- ###
            for (j in Factores_cubrir) {
              if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
                GananciaFuturos = GananciaFuturos + (get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*get(paste0("n",j),envir = Gradiente_agregado)
              } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
                GananciaFuturos = GananciaFuturos + ((get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Serie",j),envir = Gradiente_agregado)) - (get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Futuro",j),envir = Gradiente_agregado)))
              }
            }

          } else if (Moneda == "COP"){
            ### ------------------ Cobertura para monedas funcionales pesos  ----------------- ###
            for (j in Factores_cubrir) {
              if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
                GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
              } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
                GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
              }
            }

          }


          EBITDA = (EBITDA_Base+rowSums(GananciaFuturos))

          if(params[names(params)%in%x]<lims[x,"Max"]+Delta & params[names(params)%in%x]>lims[x,"Min"]+Delta){
            return((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio)
          }
          if(params[names(params)%in%x]==lims[x,"Max"]){
            return(min(c((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio,0)))
          }
          if(params[names(params)%in%x]==lims[x,"Min"]+Delta){
            return(max(c((E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio,0)))
          }
        })
        ### ----------------------------- Limites ------------------------------ ###
        ### --- Si mi derivada es negativa: Minimo: Es igual a cero --- ###
        Derivadas[Derivadas<0 & (params==lims[,"Min"])[unique(names(params))]]=0
        ### --- Si mi derivada es Positiva y supera el limite superior: Igual a cero--- ###
        Derivadas[Derivadas>0 & (params==lims[,"Max"])[unique(names(params))]]=0

        ### --------------- Tomo el maximo de las derivadas ---- ###
        ValorDerivada=max(c(abs(min(Derivadas[names(params)])),max(Derivadas[names(params)])))

        ### ----------------------------- Caso 1: Derivada diferente 0 ------------------------------ ###
        if(ValorDerivada!=0){
          ### --- Muevo el maximo la proporcion Alpha, manteniendo la direccion la derivada --- ##
          params = params+Derivadas[names(params)]/abs(ValorDerivada)*Alpha
          ### --- Acotar el movimiento a los limites de cobertura --- ##
          params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
          ### --- Acotar el movimiento a los limites de cobertura --- ##
          params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]
        } else {ValorDerivada=1
        params=params+Derivadas[names(params)]/ValorDerivada*Alpha
        params[params<lims[,"Min"]]=lims[params<lims[,"Min"],"Min"]
        params[params>lims[,"Max"]]=lims[params>lims[,"Max"],"Max"]
        }
        ### ----------------------------- De lo contrario la derivada igual a cero ------------------------------ ###

        ### ----------------------------- Evaluacion de la funcion en nuevo punto ------------------------------ ###

        ### ------------------ TRM ----------------- ###
        for (j in Factores_cubrir) {
          assign(x = paste0("n",j),  value = matrix(rep(params[names(params)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
        }

        ### --- Ganancias:
        ### --- NOTA: JP tiene coberturas, esto no deberia ser igual a matrix(rep(0,12*nSim),nrow=nSim,byrow=T)
        ### --- sino cambiarlo Forwards_hist_2  Cobertura (12 peridos) matrix(rep(Coberturas,nSim),nrow=nSim,byrow=T)
        ### ------------------ Brent: Barriles ----------------- ###
        ### ------------------ Brent: Barriles ----------------- ###
        GananciaFuturos = 0

        if(Moneda == "USD"){
          ### ------------------ Cobertura para monedas funcionales dolares  ----------------- ###
          for (j in Factores_cubrir) {
            if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
              GananciaFuturos = GananciaFuturos + (get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*get(paste0("n",j),envir = Gradiente_agregado)
            } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
              GananciaFuturos = GananciaFuturos + ((get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Serie",j),envir = Gradiente_agregado)) - (get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Futuro",j),envir = Gradiente_agregado)))
            }
          }

        } else if (Moneda == "COP"){
          ### ------------------ Cobertura para monedas funcionales pesos  ----------------- ###
          for (j in Factores_cubrir) {
            if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
              GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
            } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
              GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
            }
          }

        }


        ### ------------------ EBITDA ----------------- ###
        EBITDA=(EBITDA_Base+rowSums(GananciaFuturos))

        ### ------------------ Re calculo la diferencia  ----------------- ###
        Valor_Funcion = (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio-(E0(mean(Ut((1+EBITDA_cobertura/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
        ### ------------------ EBITDA ----------------- ###
        EBITDA_cobertura=EBITDA
        ### ------------------ Aumento un paso adelante ----------------- ###
        Paso=Paso+1
        ### ------------------ Resultados ----------------- ###
        print(Valor_Funcion)
        print(Paso)
      }
      if(i==1){
        Funcion_i = (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
        paramsFin = params
        sim_best=i
      }
      if( (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio >Funcion_i){
        paramsFin = params
        Funcion_i= (E0(mean(Ut((1+EBITDA/Patrimonio)^(4/nMeses),param=Aversion)),param=Aversion)^(nMeses/4)-1)*Patrimonio
        sim_best=i
      }
    }


    Parametros_optimos = paramsFin
    for (j in Factores_cubrir) {
      assign(x = paste0("n",j),  value = matrix(rep(Parametros_optimos[names(Parametros_optimos)%in%paste(Factores_cubrir[grep(Factores_cubrir,pattern = j)],1:nMeses)]*get(paste0('Sensibilidad',j),envir = Gradiente_agregado),nSim),nrow=nSim,byrow=T),envir = Gradiente_agregado)
    }


    ### ------------------ Brent: Barriles ----------------- ###
    ### ------------------ Brent: Barriles ----------------- ###
    GananciaFuturos = 0

    if(Moneda == "USD"){
      ### ------------------ Cobertura para monedas funcionales dolares  ----------------- ###
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
          GananciaFuturos = GananciaFuturos + (get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*get(paste0("n",j),envir = Gradiente_agregado)
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          GananciaFuturos = GananciaFuturos + ((get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Serie",j),envir = Gradiente_agregado)) - (get(paste0("n",j),envir = Gradiente_agregado)/get(paste0("Futuro",j),envir = Gradiente_agregado)))
        }
      }

    } else if (Moneda == "COP"){
      ### ------------------ Cobertura para monedas funcionales pesos  ----------------- ###
      for (j in Factores_cubrir) {
        if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "BL" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD/UN" | Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "Ton"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado))*Gradiente_agregado$`SerieUSD/LC`)*get(paste0("n",j),envir = Gradiente_agregado))
        } else if (Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = j),paste0("Unidades_",Moneda)] == "USD"){
          GananciaFuturos = GananciaFuturos + (((get(paste0("Futuro",j),envir = Gradiente_agregado)-get(paste0("Serie",j),envir = Gradiente_agregado)))*get(paste0("n",j),envir = Gradiente_agregado))
        }
      }

    }

    ### -------------------------------- P&G con Coberturas ---------------------------------- ###
    # GananciaFuturos = ((FuturoDolar-SerieDolar)*nDolar -CostosDolar*abs(nDolar-matrix(rep(0,12*nSim),nrow=nSim,byrow=T)))/SerieDolar + (FuturoBrent-SerieBrent)*nBrent -CostosBrent*abs(nBrent-matrix(rep(0,12*nSim),nrow=nSim,byrow=T))

    EBITDA_cobertura = (EBITDA_Base+rowSums(GananciaFuturos))


    ### ----------------------------- Pesos optimos ------------------------------ ###
    Pesos_optimos = as.data.frame(matrix(Parametros_optimos,byrow = F,ncol = dim(Agregado_inicial)[2]))
    colnames(Pesos_optimos) = paste0("T",seq(1:dim(Agregado_inicial)[2]))
    rownames(Pesos_optimos) = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Factores_cubrir,collapse = "$|^","$"))),"Nombre"])
    Pesos_optimos = round(Pesos_optimos,2)

    ### ----------------------------- Limites ------------------------------ ###
    Limites = as.data.frame(matrix(lims[,2],byrow = F,ncol = dim(Agregado_inicial)[2]))
    colnames(Limites) = paste0("T",seq(1:dim(Agregado_inicial)[2]))
    rownames(Limites) = c(Nombres_shiny[grep(Nombres_shiny[,"Indice"],pattern = paste0("^",paste0(Factores_cubrir,collapse = "$|^","$"))),"Nombre"])
    Limites = round(Limites,2)

    if (Shiny == TRUE){
      on.exit(progress$close())
    }

    Resultados = NULL
    Resultados = as.list(Resultados)
    Resultados[["Base"]] = EBITDA_Base
    Resultados[["Optima"]] = EBITDA_cobertura
    Resultados[["Limites"]] = Limites
    Resultados[["Pesos_optimos"]] = Pesos_optimos

    if (Shiny == TRUE){
      progress$close()
      }
    return(Resultados)
  } else {

  }
}

########################## ----------------- Visualizar Gradiente ----------------- ##########################
###  ----     Esta funcion permite visualizar el gradiente por empresa: Lee dolares y pesos -------###
Optimizacion_Coberturas_gradiente_individual = function(input,session){
  tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">Optimización</font></strong>'))),
           box(title = HTML('<strong><font color="white">Análisis de Coberturas</font></strong>'),solidHeader = T,width = 4000,height = 2000,status = "primary",
               tagList(HTML('<p align="justify" <p style="font-family:verdana;">Las coberturas óptimas son el resultado
      de maximizar el equivalente de certeza, que puede interpretarse
                            como el retorno ajustado por riesgo, sujeto a unos límites máximos
                            de porcentajes de cobertura de las sensibilidades.
                            Estos límites son función de la incertidumbre de la sensibilidad,
                            y se definen como percentiles que varían con el plazo, buscando reducir la probabilidad de sobrecoberturas.
                            </p> </p>
                            <p align="justify" <p style="font-family:verdana;">
                            La optimización se realiza sobre cada plazo (mes)
                            de cada factor de riesgo (por lo cual ocasionalmente su convergencia es parcial),
                            definiendo como variables de control los porcentajes a cubrir de las sensibilidades
                            correspondientes. <br> <br></p>'),

                ############### ------------ Lista de empresas --------------- #########
                radioGroupButtons(
                  inputId = "Empresa_cubrir_gradiente",
                  label = "Empresa",
                  choices = c("Ninguna",as.character(Filiales_correr[[1]]$Empresas$Empresas)),
                  status = "primary",selected = c("Ninguna"),
                  checkIcon = list(yes = icon("ok", lib = "glyphicon"),
                    no = icon("remove",lib = "glyphicon"))
                ),
                ############### ------------ Gradiente --------------- #########
                renderUI({
                  assign(x = paste0("Coberturas_empresas_optimo_gradiente_individual"),
                         value = Coberturas_individuales_gradiente(Empresa = input[["Empresa_cubrir_gradiente"]],
                                                                   Factores_cubrir = Coberturas_posibles_vector(Empresa = ifelse(test = input[["Empresa_cubrir_gradiente"]] == "Ecopetrol",yes = "Barranca",no = input[["Empresa_cubrir_gradiente"]]),Excel_coberturas = Coberturas_disponibles_empresas),
                                                                   Tipo = 1,
                                                                   Contable = Resultados_agregacion_contable,
                                                                   Teorica = Resultados_agregacion_teorica,
                                                                   Modo_contable = T,
                                                                   Patrimonio = Patrimonio_individual(Empresa = ifelse(test = input[["Empresa_cubrir_gradiente"]] == "Ecopetrol",yes = "Barranca",no = input[["Empresa_cubrir_gradiente"]]),Patrimonios_completos = Patrimonios_completos),
                                                                   Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",ifelse(test = input[["Empresa_cubrir_gradiente"]] == "Ecopetrol",yes = "Barranca",no = input[["Empresa_cubrir_gradiente"]]),"$")),"Moneda"]))
                  ### ------------ Resultados ----------- ###
                  do.call(tagList,Coberturas_optimas_visulizacion(Empresa = input[["Empresa_cubrir_gradiente"]],Nombre_unico = paste0("Coberturas_empresas_optimo_gradiente_individual"),
                                                          Moneda = Informacion_empresas[grep(Informacion_empresas[,"Empresa"],pattern = paste0("^",ifelse(test = input[["Empresa_cubrir_gradiente"]] == "Ecopetrol",yes = "Barranca",no = input[["Empresa_cubrir_gradiente"]]),"$")),"Moneda"],
                                                          Base = get(paste0("Coberturas_empresas_optimo_gradiente_individual"))[["Base"]],
                                                          Pesos_optimos = get(paste0("Coberturas_empresas_optimo_gradiente_individual"))[["Pesos_optimos"]],
                                                          Limites_optimos = get(paste0("Coberturas_empresas_optimo_gradiente_individual"))[["Limites"]],
                                                          Cobertura = get(paste0("Coberturas_empresas_optimo_gradiente_individual"))[["Optima"]],Aversion = A1,
                                                          Patrimonio = Patrimonio_individual(Empresa = ifelse(test = input[["Empresa_cubrir_gradiente"]] == "Ecopetrol CB",yes = "Barranca",no = input[["Empresa_cubrir_gradiente"]]),Patrimonios_completos = Patrimonios_completos)))}))))
  }




########################## ----------------- Coberturas ----------------- ##########################
  Coberturas_empresas = function(x,input,session){
    if (x == "Agregado"){
      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">Agregado y Segmentos</font></strong>'))),
               tabBox(side = "right", height = 2100,width = 4000,selected = "Agregado",
                      do.call(tabsetPanel, lapply(c("Agregado",c(as.character(unlist(Segmentos_activos_empresas(Empresas = Empresas_activas_segmentos,Segmentos = Segmentos_empresas_load)["Segmento"])))),function(y){Coberturas_empresas_agregadas_tabs(x = y,input = input)}))))
    } else if (x == "Ecopetrol"){
      ################# ------------------- Ecopetrol  --------------- #################
      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
               tabBox(side = "right", height = 2000,width = 4000,selected = HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol S.A.",'</font></strong>')),
                      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Barrancabermeja",'</font></strong>'))),
                               do.call(tagList, lapply(c("Barranca"),function(z){Coberturas_empresas_individual_tabs(Empresa = z,input = input,session = session)}))),
                      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol Sin GRB",'</font></strong>'))),
                               do.call(tagList, lapply(c("Ecopetrol"),function(z){Coberturas_empresas_individual_tabs(Empresa = z,input = input)}))),
                      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',"Ecopetrol S.A.",'</font></strong>'))),
                               do.call(tagList, lapply(c("Ecopetrol CB"),function(z){Coberturas_empresas_individual_tabs(Empresa = z,input = input)})))
               )
      )
    } else if ((x != "Agregado" | x!= "Ecopetrol") & x!= "Optimizacion"){
      ################# ------------------- Empresas --------------- #################
      ### --- Tabs dinamicos: De agregacion dinamicos --- ###
      tabPanel(title = (HTML(paste0('<strong><font color="#002e5b">',x,'</font></strong>'))),
               do.call(tagList, lapply(c(x),function(z){Coberturas_empresas_individual_tabs(Empresa = z,input = input)})))
    } else if( x == "Optimizacion"){
      Optimizacion_Coberturas_gradiente_individual(input =input ,session=session)
    }
  }



